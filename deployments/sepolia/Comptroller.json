{
  "address": "0xd067863496006aFEa08C2FcBFC699E7Cfe363134",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract MultiRewardDistributor",
          "name": "oldRewardDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract MultiRewardDistributor",
          "name": "newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "NewRewardDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldSupplyCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSupplyCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewSupplyCapGuardian",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken[]",
          "name": "kTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken[]",
          "name": "kTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MultiRewardDistributor",
          "name": "newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "_setRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSupplyCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setSupplyCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract KToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract KToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract KToken",
          "name": "kToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract KToken[]",
          "name": "kTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract KToken[]",
          "name": "kTokens",
          "type": "address[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "kTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract KToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract KToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "contract MultiRewardDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90932668f9721f96a61e4ca6d59cbbb19556eaba97d12517c34c5e67cf245929",
  "receipt": {
    "to": null,
    "from": "0x6027862A465EF7d842e32A8a16a39D4D83c25D3A",
    "contractAddress": "0xd067863496006aFEa08C2FcBFC699E7Cfe363134",
    "transactionIndex": 59,
    "gasUsed": "3874024",
    "logsBloom": "0x
    "blockHash": "0xbda776f9d9023e6c017d40d22cbce4bc0c7dba667e8e6fa3b9eed3fc1f42079a",
    "transactionHash": "0x90932668f9721f96a61e4ca6d59cbbb19556eaba97d12517c34c5e67cf245929",
    "logs": [],
    "blockNumber": 7100855,
    "cumulativeGasUsed": "11615142",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "793c830b20ac64feae3c614cbe433c41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MultiRewardDistributor\",\"name\":\"oldRewardDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract MultiRewardDistributor\",\"name\":\"newRewardDistributor\",\"type\":\"address\"}],\"name\":\"NewRewardDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSupplyCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSupplyCapGuardian\",\"type\":\"address\"}],\"name\":\"NewSupplyCapGuardian\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken[]\",\"name\":\"kTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken[]\",\"name\":\"kTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiRewardDistributor\",\"name\":\"newRewardDistributor\",\"type\":\"address\"}],\"name\":\"_setRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupplyCapGuardian\",\"type\":\"address\"}],\"name\":\"_setSupplyCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract KToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract KToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract KToken\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract KToken[]\",\"name\":\"kTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract KToken[]\",\"name\":\"kTokens\",\"type\":\"address[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"kTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract KToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract KToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"contract MultiRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kawa\",\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_rescueFunds(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to sweep, uint.max means everything\",\"_tokenAddress\":\"The address of the token to transfer\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"kToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"kTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\",\"params\":{\"kTokens\":\"The addresses of the markets (tokens) to change the supply caps for\",\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setRewardDistributor(address)\":{\"params\":{\"newRewardDistributor\":\"The address of the new Reward Distributor\"}},\"_setSupplyCapGuardian(address)\":{\"params\":{\"newSupplyCapGuardian\":\"The address of the new Supply Cap Guardian\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"kToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"kToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"kToken\":\"The kToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"claimReward(address)\":{\"params\":{\"holder\":\"The address to claim rewards for\"}},\"claimReward(address,address[])\":{\"params\":{\"holder\":\"The address to claim rewards for\",\"kTokens\":\"The list of markets to claim rewards in\"}},\"claimReward(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim earned by borrowing\",\"holders\":\"The addresses to claim for\",\"kTokens\":\"The list of markets to claim in\",\"suppliers\":\"Whether or not to claim earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"kTokens\":\"The list of addresses of the kToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"kTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"kTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"kTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"kTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in kToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of kTokenBorrowed underlying to convert into kTokenCollateral tokens\",\"kTokenBorrowed\":\"The address of the borrowed kToken\",\"kTokenCollateral\":\"The address of the collateral kToken\"},\"returns\":{\"_0\":\"(errorCode, number of kTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"kToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"kToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of kTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"kToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"kToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"kTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"kTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"kToken\":\"The market to verify the transfer against\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of kTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}}},\"title\":\"Kawa's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a kToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"},\"NewRewardDistributor(address,address)\":{\"notice\":\"Emitted when reward distributor is changed\"},\"NewSupplyCap(address,uint256)\":{\"notice\":\"Emitted when supply cap for a kToken is changed\"},\"NewSupplyCapGuardian(address,address)\":{\"notice\":\"Emitted when supply cap guardian is changed\"}},\"kind\":\"user\",\"methods\":{\"_rescueFunds(address,uint256)\":{\"notice\":\"Sweep ERC-20 tokens from the comptroller to the admin\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given kToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given kToken markets. Supplying that brings total supplies to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setRewardDistributor(address)\":{\"notice\":\"Admin function to change the Reward Distributor\"},\"_setSupplyCapGuardian(address)\":{\"notice\":\"Admin function to change the Supply Cap Guardian\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimReward()\":{\"notice\":\"Claim all the WELL accrued by holder in all markets\"},\"claimReward(address)\":{\"notice\":\"Claim all the rewards accrued by specified holder in all markets\"},\"claimReward(address,address[])\":{\"notice\":\"Claim all the rewards accrued by holder in the specified markets\"},\"claimReward(address[],address[],bool,bool)\":{\"notice\":\"Claim all rewards for a specified group of users, tokens, and market sides\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of kTokens -> Market metadata\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"rewardDistributor()\":{\"notice\":\"The Reward distributor used to emit protocol rewards\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"supplyCapGuardian()\":{\"notice\":\"The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\"},\"supplyCaps(address)\":{\"notice\":\"Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Careful Math\\r\\n * @author Kawa\\r\\n * @notice Derived from OpenZeppelin's SafeMath library\\r\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\r\\n */\\r\\ncontract CarefulMath {\\r\\n    /**\\r\\n     * @dev Possible error codes that we can return\\r\\n     */\\r\\n    enum MathError {\\r\\n        NO_ERROR,\\r\\n        DIVISION_BY_ZERO,\\r\\n        INTEGER_OVERFLOW,\\r\\n        INTEGER_UNDERFLOW\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two numbers, returns an error on overflow.\\r\\n     */\\r\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (a == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n\\r\\n        if (c / a != b) {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        } else {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two numbers, truncating the quotient.\\r\\n     */\\r\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b == 0) {\\r\\n            return (MathError.DIVISION_BY_ZERO, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b <= a) {\\r\\n            return (MathError.NO_ERROR, a - b);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two numbers, returns an error on overflow.\\r\\n     */\\r\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        uint c = a + b;\\r\\n\\r\\n        if (c >= a) {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add a and b and then subtract c\\r\\n     */\\r\\n    function addThenSubUInt(\\r\\n        uint a,\\r\\n        uint b,\\r\\n        uint c\\r\\n    ) internal pure returns (MathError, uint) {\\r\\n        (MathError err0, uint sum) = addUInt(a, b);\\r\\n\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, 0);\\r\\n        }\\r\\n\\r\\n        return subUInt(sum, c);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9b42557365bb1019da1f45e31c0832a3a4b18c9b7e26a4577f953a748f754e04\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./KToken.sol\\\";\\r\\nimport \\\"./TokenErrorReporter.sol\\\";\\r\\nimport \\\"./oracles/PriceOracle.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Kawa's Comptroller Contract\\r\\n * @author Kawa\\r\\n */\\r\\ncontract Comptroller is\\r\\n    ComptrollerV2Storage,\\r\\n    ComptrollerInterface,\\r\\n    ComptrollerErrorReporter,\\r\\n    ExponentialNoError\\r\\n{\\r\\n    /// @notice Emitted when an admin supports a market\\r\\n    event MarketListed(KToken kToken);\\r\\n\\r\\n    /// @notice Emitted when an account enters a market\\r\\n    event MarketEntered(KToken kToken, address account);\\r\\n\\r\\n    /// @notice Emitted when an account exits a market\\r\\n    event MarketExited(KToken kToken, address account);\\r\\n\\r\\n    /// @notice Emitted when close factor is changed by admin\\r\\n    event NewCloseFactor(\\r\\n        uint oldCloseFactorMantissa,\\r\\n        uint newCloseFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when a collateral factor is changed by admin\\r\\n    event NewCollateralFactor(\\r\\n        KToken kToken,\\r\\n        uint oldCollateralFactorMantissa,\\r\\n        uint newCollateralFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when liquidation incentive is changed by admin\\r\\n    event NewLiquidationIncentive(\\r\\n        uint oldLiquidationIncentiveMantissa,\\r\\n        uint newLiquidationIncentiveMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when price oracle is changed\\r\\n    event NewPriceOracle(\\r\\n        PriceOracle oldPriceOracle,\\r\\n        PriceOracle newPriceOracle\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when pause guardian is changed\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n\\r\\n    /// @notice Emitted when an action is paused globally\\r\\n    event ActionPaused(string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when an action is paused on a market\\r\\n    event ActionPaused(KToken kToken, string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when borrow cap for a kToken is changed\\r\\n    event NewBorrowCap(KToken indexed kToken, uint newBorrowCap);\\r\\n\\r\\n    /// @notice Emitted when borrow cap guardian is changed\\r\\n    event NewBorrowCapGuardian(\\r\\n        address oldBorrowCapGuardian,\\r\\n        address newBorrowCapGuardian\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when supply cap for a kToken is changed\\r\\n    event NewSupplyCap(KToken indexed kToken, uint newSupplyCap);\\r\\n\\r\\n    /// @notice Emitted when supply cap guardian is changed\\r\\n    event NewSupplyCapGuardian(\\r\\n        address oldSupplyCapGuardian,\\r\\n        address newSupplyCapGuardian\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when reward distributor is changed\\r\\n    event NewRewardDistributor(\\r\\n        MultiRewardDistributor oldRewardDistributor,\\r\\n        MultiRewardDistributor newRewardDistributor\\r\\n    );\\r\\n\\r\\n    // closeFactorMantissa must be strictly greater than this value\\r\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\r\\n\\r\\n    // closeFactorMantissa must not exceed this value\\r\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // No collateralFactorMantissa may exceed this value\\r\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the assets an account has entered\\r\\n     * @param account The address of the account to pull assets for\\r\\n     * @return A dynamic list with the assets the account has entered\\r\\n     */\\r\\n    function getAssetsIn(\\r\\n        address account\\r\\n    ) external view returns (KToken[] memory) {\\r\\n        KToken[] memory assetsIn = accountAssets[account];\\r\\n\\r\\n        return assetsIn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given account is entered in the given asset\\r\\n     * @param account The address of the account to check\\r\\n     * @param kToken The kToken to check\\r\\n     * @return True if the account is in the asset, otherwise false.\\r\\n     */\\r\\n    function checkMembership(\\r\\n        address account,\\r\\n        KToken kToken\\r\\n    ) external view returns (bool) {\\r\\n        return markets[address(kToken)].accountMembership[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add assets to be included in account liquidity calculation\\r\\n     * @param kTokens The list of addresses of the kToken markets to be enabled\\r\\n     * @return Success indicator for whether each corresponding market was entered\\r\\n     */\\r\\n    function enterMarkets(\\r\\n        address[] memory kTokens\\r\\n    ) public override returns (uint[] memory) {\\r\\n        uint len = kTokens.length;\\r\\n\\r\\n        uint[] memory results = new uint[](len);\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            KToken kToken = KToken(kTokens[i]);\\r\\n\\r\\n            results[i] = uint(addToMarketInternal(kToken, msg.sender));\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\r\\n     * @param kToken The market to enter\\r\\n     * @param borrower The address of the account to modify\\r\\n     * @return Success indicator for whether the market was entered\\r\\n     */\\r\\n    function addToMarketInternal(\\r\\n        KToken kToken,\\r\\n        address borrower\\r\\n    ) internal returns (Error) {\\r\\n        Market storage marketToJoin = markets[address(kToken)];\\r\\n\\r\\n        if (!marketToJoin.isListed) {\\r\\n            // market is not listed, cannot join\\r\\n            return Error.MARKET_NOT_LISTED;\\r\\n        }\\r\\n\\r\\n        if (marketToJoin.accountMembership[borrower] == true) {\\r\\n            // already joined\\r\\n            return Error.NO_ERROR;\\r\\n        }\\r\\n\\r\\n        // survived the gauntlet, add to list\\r\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\r\\n        //  this avoids having to iterate through the list for the most common use cases\\r\\n        //  that is, only when we need to perform liquidity checks\\r\\n        //  and not whenever we want to check if an account is in a particular market\\r\\n        marketToJoin.accountMembership[borrower] = true;\\r\\n        accountAssets[borrower].push(kToken);\\r\\n\\r\\n        emit MarketEntered(kToken, borrower);\\r\\n\\r\\n        return Error.NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes asset from sender's account liquidity calculation\\r\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\r\\n     *  or be providing necessary collateral for an outstanding borrow.\\r\\n     * @param kTokenAddress The address of the asset to be removed\\r\\n     * @return Whether or not the account successfully exited the market\\r\\n     */\\r\\n    function exitMarket(\\r\\n        address kTokenAddress\\r\\n    ) external override returns (uint) {\\r\\n        KToken kToken = KToken(kTokenAddress);\\r\\n        /* Get sender tokensHeld and amountOwed underlying from the kToken */\\r\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = kToken\\r\\n            .getAccountSnapshot(msg.sender);\\r\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\r\\n\\r\\n        /* Fail if the sender has a borrow balance */\\r\\n        if (amountOwed != 0) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.NONZERO_BORROW_BALANCE,\\r\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\r\\n                );\\r\\n        }\\r\\n\\r\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\r\\n        uint allowed = redeemAllowedInternal(\\r\\n            kTokenAddress,\\r\\n            msg.sender,\\r\\n            tokensHeld\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            return\\r\\n                failOpaque(\\r\\n                    Error.REJECTION,\\r\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\r\\n                    allowed\\r\\n                );\\r\\n        }\\r\\n\\r\\n        Market storage marketToExit = markets[address(kToken)];\\r\\n\\r\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\r\\n        if (!marketToExit.accountMembership[msg.sender]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Set kToken account membership to false */\\r\\n        delete marketToExit.accountMembership[msg.sender];\\r\\n\\r\\n        /* Delete kToken from the account\\u2019s list of assets */\\r\\n        // load into memory for faster iteration\\r\\n        KToken[] memory userAssetList = accountAssets[msg.sender];\\r\\n        uint len = userAssetList.length;\\r\\n        uint assetIndex = len;\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            if (userAssetList[i] == kToken) {\\r\\n                assetIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(assetIndex < len);\\r\\n\\r\\n        // copy last item in list to location of item to be removed, reduce length by 1\\r\\n        KToken[] storage storedList = accountAssets[msg.sender];\\r\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\r\\n        storedList.pop();\\r\\n\\r\\n        emit MarketExited(kToken, msg.sender);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\r\\n     * @param kToken The market to verify the mint against\\r\\n     * @param minter The account which would get the minted tokens\\r\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\r\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function mintAllowed(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external override returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintGuardianPaused[kToken], \\\"mint is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        mintAmount;\\r\\n\\r\\n        if (!markets[kToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        uint supplyCap = supplyCaps[kToken];\\r\\n        // Supply cap of 0 corresponds to unlimited supplying\\r\\n        if (supplyCap != 0) {\\r\\n            uint totalCash = KToken(kToken).getCash();\\r\\n            uint totalBorrows = KToken(kToken).totalBorrows();\\r\\n            uint totalReserves = KToken(kToken).totalReserves();\\r\\n            // totalSupplies = totalCash + totalBorrows - totalReserves\\r\\n            uint totalSupplies = sub_(\\r\\n                add_(totalCash, totalBorrows),\\r\\n                totalReserves\\r\\n            );\\r\\n\\r\\n            uint nextTotalSupplies = add_(totalSupplies, mintAmount);\\r\\n            require(nextTotalSupplies < supplyCap, \\\"market supply cap reached\\\");\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateAndDistributeSupplierRewardsForToken(kToken, minter);\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\r\\n     * @param kToken The market to verify the redeem against\\r\\n     * @param redeemer The account which would redeem the tokens\\r\\n     * @param redeemTokens The number of kTokens to exchange for the underlying asset in the market\\r\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function redeemAllowed(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemTokens\\r\\n    ) external override returns (uint) {\\r\\n        uint allowed = redeemAllowedInternal(kToken, redeemer, redeemTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateAndDistributeSupplierRewardsForToken(kToken, redeemer);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function redeemAllowedInternal(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemTokens\\r\\n    ) internal view returns (uint) {\\r\\n        if (!markets[kToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\r\\n        if (!markets[kToken].accountMembership[redeemer]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(\\r\\n            redeemer,\\r\\n            KToken(kToken),\\r\\n            redeemTokens,\\r\\n            0\\r\\n        );\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall > 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\r\\n     * @param kToken Asset being redeemed\\r\\n     * @param redeemer The address redeeming the tokens\\r\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\r\\n     * @param redeemTokens The number of tokens being redeemed\\r\\n     */\\r\\n    function redeemVerify(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemAmount,\\r\\n        uint redeemTokens\\r\\n    ) external pure override {\\r\\n        // Shh - currently unused\\r\\n        kToken;\\r\\n        redeemer;\\r\\n\\r\\n        // Require tokens is zero or amount is also zero\\r\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\r\\n            revert(\\\"redeemTokens zero\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param kToken The market to verify the borrow against\\r\\n     * @param borrower The account which would borrow the asset\\r\\n     * @param borrowAmount The amount of underlying the account would borrow\\r\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function borrowAllowed(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external override returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!borrowGuardianPaused[kToken], \\\"borrow is paused\\\");\\r\\n\\r\\n        if (!markets[kToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (!markets[kToken].accountMembership[borrower]) {\\r\\n            // only kTokens may call borrowAllowed if borrower not in market\\r\\n            require(msg.sender == kToken, \\\"sender must be kToken\\\");\\r\\n\\r\\n            // attempt to add borrower to the market\\r\\n            Error addToMarketErr = addToMarketInternal(\\r\\n                KToken(msg.sender),\\r\\n                borrower\\r\\n            );\\r\\n            if (addToMarketErr != Error.NO_ERROR) {\\r\\n                return uint(addToMarketErr);\\r\\n            }\\r\\n\\r\\n            // it should be impossible to break the important invariant\\r\\n            assert(markets[kToken].accountMembership[borrower]);\\r\\n        }\\r\\n\\r\\n        if (oracle.getUnderlyingPrice(KToken(kToken)) == 0) {\\r\\n            return uint(Error.PRICE_ERROR);\\r\\n        }\\r\\n\\r\\n        uint borrowCap = borrowCaps[kToken];\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (borrowCap != 0) {\\r\\n            uint totalBorrows = KToken(kToken).totalBorrows();\\r\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\r\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(\\r\\n            borrower,\\r\\n            KToken(kToken),\\r\\n            0,\\r\\n            borrowAmount\\r\\n        );\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall > 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateAndDistributeBorrowerRewardsForToken(kToken, borrower);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\r\\n     * @param kToken The market to verify the repay against\\r\\n     * @param payer The account which would repay the asset\\r\\n     * @param borrower The account which would borrowed the asset\\r\\n     * @param repayAmount The amount of the underlying asset the account would repay\\r\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function repayBorrowAllowed(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external override returns (uint) {\\r\\n        // Shh - currently unused\\r\\n        payer;\\r\\n        borrower;\\r\\n        repayAmount;\\r\\n\\r\\n        if (!markets[kToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateAndDistributeBorrowerRewardsForToken(kToken, borrower);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the liquidation should be allowed to occur\\r\\n     * @param kTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param kTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param repayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowAllowed(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external view override returns (uint) {\\r\\n        // Shh - currently unused\\r\\n        liquidator;\\r\\n\\r\\n        if (\\r\\n            !markets[kTokenBorrowed].isListed ||\\r\\n            !markets[kTokenCollateral].isListed\\r\\n        ) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* The borrower must have shortfall in order to be liquidatable */\\r\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall == 0) {\\r\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\r\\n        }\\r\\n\\r\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\r\\n        uint borrowBalance = KToken(kTokenBorrowed).borrowBalanceStored(\\r\\n            borrower\\r\\n        );\\r\\n        uint maxClose = mul_ScalarTruncate(\\r\\n            Exp({mantissa: closeFactorMantissa}),\\r\\n            borrowBalance\\r\\n        );\\r\\n        if (repayAmount > maxClose) {\\r\\n            return uint(Error.TOO_MUCH_REPAY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the seizing of assets should be allowed to occur\\r\\n     * @param kTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param kTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeAllowed(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external override returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        seizeTokens;\\r\\n\\r\\n        if (\\r\\n            !markets[kTokenCollateral].isListed ||\\r\\n            !markets[kTokenBorrowed].isListed\\r\\n        ) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            KToken(kTokenCollateral).comptroller() !=\\r\\n            KToken(kTokenBorrowed).comptroller()\\r\\n        ) {\\r\\n            return uint(Error.COMPTROLLER_MISMATCH);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        // Note: We don't update borrower indices here because as part of liquidations\\r\\n        //       repayBorrowFresh is called, which in turn calls `borrowAllow`, which updates\\r\\n        //       the liquidated borrower's indices.\\r\\n        updateAndDistributeSupplierRewardsForToken(kTokenCollateral, borrower);\\r\\n        updateAndDistributeSupplierRewardsForToken(\\r\\n            kTokenCollateral,\\r\\n            liquidator\\r\\n        );\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\r\\n     * @param kToken The market to verify the transfer against\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of kTokens to transfer\\r\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function transferAllowed(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external override returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\r\\n\\r\\n        // Currently the only consideration is whether or not\\r\\n        //  the src is allowed to redeem this many tokens\\r\\n        uint allowed = redeemAllowedInternal(kToken, src, transferTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateAndDistributeSupplierRewardsForToken(kToken, src);\\r\\n        updateAndDistributeSupplierRewardsForToken(kToken, dst);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\r\\n     *  Note that `kTokenBalance` is the number of kTokens the account owns in the market,\\r\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\r\\n     */\\r\\n    struct AccountLiquidityLocalVars {\\r\\n        uint sumCollateral;\\r\\n        uint sumBorrowPlusEffects;\\r\\n        uint kTokenBalance;\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint oraclePriceMantissa;\\r\\n        Exp collateralFactor;\\r\\n        Exp exchangeRate;\\r\\n        Exp oraclePrice;\\r\\n        Exp tokensToDenom;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidity(\\r\\n        address account\\r\\n    ) public view returns (uint, uint, uint) {\\r\\n        (\\r\\n            Error err,\\r\\n            uint liquidity,\\r\\n            uint shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                KToken(address(0)),\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code,\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidityInternal(\\r\\n        address account\\r\\n    ) internal view returns (Error, uint, uint) {\\r\\n        return\\r\\n            getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                KToken(address(0)),\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param kTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address kTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount\\r\\n    ) public view returns (uint, uint, uint) {\\r\\n        (\\r\\n            Error err,\\r\\n            uint liquidity,\\r\\n            uint shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                KToken(kTokenModify),\\r\\n                redeemTokens,\\r\\n                borrowAmount\\r\\n            );\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param kTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @dev Note that we calculate the exchangeRateStored for each collateral kToken using stored data,\\r\\n     *  without calculating accumulated interest.\\r\\n     * @return (possible error code,\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidityInternal(\\r\\n        address account,\\r\\n        KToken kTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount\\r\\n    ) internal view returns (Error, uint, uint) {\\r\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\r\\n        uint oErr;\\r\\n\\r\\n        // For each asset the account is in\\r\\n        KToken[] memory assets = accountAssets[account];\\r\\n        for (uint i = 0; i < assets.length; i++) {\\r\\n            KToken asset = assets[i];\\r\\n\\r\\n            // Read the balances and exchange rate from the kToken\\r\\n            (\\r\\n                oErr,\\r\\n                vars.kTokenBalance,\\r\\n                vars.borrowBalance,\\r\\n                vars.exchangeRateMantissa\\r\\n            ) = asset.getAccountSnapshot(account);\\r\\n            if (oErr != 0) {\\r\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\r\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.collateralFactor = Exp({\\r\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\r\\n            });\\r\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\r\\n\\r\\n            // Get the normalized price of the asset\\r\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\r\\n            if (vars.oraclePriceMantissa == 0) {\\r\\n                return (Error.PRICE_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\r\\n\\r\\n            // Pre-compute a conversion factor from tokens -> eth (normalized price value)\\r\\n            vars.tokensToDenom = mul_(\\r\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\r\\n                vars.oraclePrice\\r\\n            );\\r\\n\\r\\n            // sumCollateral += tokensToDenom * kTokenBalance\\r\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\r\\n                vars.tokensToDenom,\\r\\n                vars.kTokenBalance,\\r\\n                vars.sumCollateral\\r\\n            );\\r\\n\\r\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\r\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                vars.oraclePrice,\\r\\n                vars.borrowBalance,\\r\\n                vars.sumBorrowPlusEffects\\r\\n            );\\r\\n\\r\\n            // Calculate effects of interacting with kTokenModify\\r\\n            if (asset == kTokenModify) {\\r\\n                // redeem effect\\r\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                    vars.tokensToDenom,\\r\\n                    redeemTokens,\\r\\n                    vars.sumBorrowPlusEffects\\r\\n                );\\r\\n\\r\\n                // borrow effect\\r\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                    vars.oraclePrice,\\r\\n                    borrowAmount,\\r\\n                    vars.sumBorrowPlusEffects\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // These are safe, as the underflow condition is checked first\\r\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\r\\n            return (\\r\\n                Error.NO_ERROR,\\r\\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\\r\\n                0\\r\\n            );\\r\\n        } else {\\r\\n            return (\\r\\n                Error.NO_ERROR,\\r\\n                0,\\r\\n                vars.sumBorrowPlusEffects - vars.sumCollateral\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in kToken.liquidateBorrowFresh)\\r\\n     * @param kTokenBorrowed The address of the borrowed kToken\\r\\n     * @param kTokenCollateral The address of the collateral kToken\\r\\n     * @param actualRepayAmount The amount of kTokenBorrowed underlying to convert into kTokenCollateral tokens\\r\\n     * @return (errorCode, number of kTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        uint actualRepayAmount\\r\\n    ) external view override returns (uint, uint) {\\r\\n        /* Read oracle prices for borrowed and collateral markets */\\r\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(\\r\\n            KToken(kTokenBorrowed)\\r\\n        );\\r\\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(\\r\\n            KToken(kTokenCollateral)\\r\\n        );\\r\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\r\\n            return (uint(Error.PRICE_ERROR), 0);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\r\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\r\\n         *  seizeTokens = seizeAmount / exchangeRate\\r\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\r\\n         */\\r\\n        uint exchangeRateMantissa = KToken(kTokenCollateral)\\r\\n            .exchangeRateStored(); // Note: reverts on error\\r\\n        uint seizeTokens;\\r\\n        Exp memory numerator;\\r\\n        Exp memory denominator;\\r\\n        Exp memory ratio;\\r\\n\\r\\n        numerator = mul_(\\r\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\r\\n            Exp({mantissa: priceBorrowedMantissa})\\r\\n        );\\r\\n        denominator = mul_(\\r\\n            Exp({mantissa: priceCollateralMantissa}),\\r\\n            Exp({mantissa: exchangeRateMantissa})\\r\\n        );\\r\\n        ratio = div_(numerator, denominator);\\r\\n\\r\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), seizeTokens);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new price oracle for the comptroller\\r\\n     * @dev Admin function to set a new price oracle\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Track the old oracle for the comptroller\\r\\n        PriceOracle oldOracle = oracle;\\r\\n\\r\\n        // Set comptroller's oracle to newOracle\\r\\n        oracle = newOracle;\\r\\n\\r\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\r\\n        emit NewPriceOracle(oldOracle, newOracle);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the closeFactor used when liquidating borrows\\r\\n     * @dev Admin function to set closeFactor\\r\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure\\r\\n     */\\r\\n    function _setCloseFactor(\\r\\n        uint newCloseFactorMantissa\\r\\n    ) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        require(msg.sender == admin, \\\"only admin can set close factor\\\");\\r\\n\\r\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\r\\n        closeFactorMantissa = newCloseFactorMantissa;\\r\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the collateralFactor for a market\\r\\n     * @dev Admin function to set per-market collateralFactor\\r\\n     * @param kToken The market to set the factor on\\r\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n     */\\r\\n    function _setCollateralFactor(\\r\\n        KToken kToken,\\r\\n        uint newCollateralFactorMantissa\\r\\n    ) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Verify market is listed\\r\\n        Market storage market = markets[address(kToken)];\\r\\n        if (!market.isListed) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.MARKET_NOT_LISTED,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\r\\n                );\\r\\n        }\\r\\n\\r\\n        Exp memory newCollateralFactorExp = Exp({\\r\\n            mantissa: newCollateralFactorMantissa\\r\\n        });\\r\\n\\r\\n        // Check collateral factor <= 0.9\\r\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.INVALID_COLLATERAL_FACTOR,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // If collateral factor != 0, fail if price == 0\\r\\n        if (\\r\\n            newCollateralFactorMantissa != 0 &&\\r\\n            oracle.getUnderlyingPrice(kToken) == 0\\r\\n        ) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.PRICE_ERROR,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Set market's collateral factor to new collateral factor, remember old value\\r\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\r\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\r\\n\\r\\n        // Emit event with asset, old collateral factor, and new collateral factor\\r\\n        emit NewCollateralFactor(\\r\\n            kToken,\\r\\n            oldCollateralFactorMantissa,\\r\\n            newCollateralFactorMantissa\\r\\n        );\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets liquidationIncentive\\r\\n     * @dev Admin function to set liquidationIncentive\\r\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n     */\\r\\n    function _setLiquidationIncentive(\\r\\n        uint newLiquidationIncentiveMantissa\\r\\n    ) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current value for use in log\\r\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\r\\n\\r\\n        // Set liquidation incentive to new incentive\\r\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\r\\n\\r\\n        // Emit event with old incentive, new incentive\\r\\n        emit NewLiquidationIncentive(\\r\\n            oldLiquidationIncentiveMantissa,\\r\\n            newLiquidationIncentiveMantissa\\r\\n        );\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the markets mapping and set it as listed\\r\\n     * @dev Admin function to set isListed and add support for the market\\r\\n     * @param kToken The address of the market (token) to list\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _supportMarket(KToken kToken) external returns (uint) {\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        if (markets[address(kToken)].isListed) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.MARKET_ALREADY_LISTED,\\r\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\r\\n                );\\r\\n        }\\r\\n\\r\\n        require(kToken.isKToken(), \\\"Must be an KToken\\\"); // Sanity check to make sure its really a KToken\\r\\n\\r\\n        Market storage newMarket = markets[address(kToken)];\\r\\n        newMarket.isListed = true;\\r\\n        newMarket.collateralFactorMantissa = 0;\\r\\n\\r\\n        _addMarketInternal(address(kToken));\\r\\n\\r\\n        emit MarketListed(kToken);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _addMarketInternal(address kToken) internal {\\r\\n        for (uint i = 0; i < allMarkets.length; i++) {\\r\\n            require(allMarkets[i] != KToken(kToken), \\\"market already added\\\");\\r\\n        }\\r\\n        allMarkets.push(KToken(kToken));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the given borrow caps for the given kToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\r\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\r\\n     * @param kTokens The addresses of the markets (tokens) to change the borrow caps for\\r\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\r\\n     */\\r\\n    function _setMarketBorrowCaps(\\r\\n        KToken[] calldata kTokens,\\r\\n        uint[] calldata newBorrowCaps\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\r\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\r\\n        );\\r\\n\\r\\n        uint numMarkets = kTokens.length;\\r\\n        uint numBorrowCaps = newBorrowCaps.length;\\r\\n\\r\\n        require(\\r\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\r\\n            \\\"invalid input\\\"\\r\\n        );\\r\\n\\r\\n        for (uint i = 0; i < numMarkets; i++) {\\r\\n            borrowCaps[address(kTokens[i])] = newBorrowCaps[i];\\r\\n            emit NewBorrowCap(kTokens[i], newBorrowCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Borrow Cap Guardian\\r\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\r\\n     */\\r\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\r\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\r\\n\\r\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\r\\n        borrowCapGuardian = newBorrowCapGuardian;\\r\\n\\r\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\r\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the given supply caps for the given kToken markets. Supplying that brings total supplies to or above supply cap will revert.\\r\\n     * @dev Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\r\\n     * @param kTokens The addresses of the markets (tokens) to change the supply caps for\\r\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\r\\n     */\\r\\n    function _setMarketSupplyCaps(\\r\\n        KToken[] calldata kTokens,\\r\\n        uint[] calldata newSupplyCaps\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == supplyCapGuardian,\\r\\n            \\\"only admin or supply cap guardian can set supply caps\\\"\\r\\n        );\\r\\n\\r\\n        uint numMarkets = kTokens.length;\\r\\n        uint numSupplyCaps = newSupplyCaps.length;\\r\\n\\r\\n        require(\\r\\n            numMarkets != 0 && numMarkets == numSupplyCaps,\\r\\n            \\\"invalid input\\\"\\r\\n        );\\r\\n\\r\\n        for (uint i = 0; i < numMarkets; i++) {\\r\\n            supplyCaps[address(kTokens[i])] = newSupplyCaps[i];\\r\\n            emit NewSupplyCap(kTokens[i], newSupplyCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Supply Cap Guardian\\r\\n     * @param newSupplyCapGuardian The address of the new Supply Cap Guardian\\r\\n     */\\r\\n    function _setSupplyCapGuardian(address newSupplyCapGuardian) external {\\r\\n        require(msg.sender == admin, \\\"only admin can set supply cap guardian\\\");\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldSupplyCapGuardian = supplyCapGuardian;\\r\\n\\r\\n        // Store supplyCapGuardian with value newSupplyCapGuardian\\r\\n        supplyCapGuardian = newSupplyCapGuardian;\\r\\n\\r\\n        // Emit NewSupplyCapGuardian(OldSupplyCapGuardian, NewSupplyCapGuardian)\\r\\n        emit NewSupplyCapGuardian(oldSupplyCapGuardian, newSupplyCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Pause Guardian\\r\\n     * @param newPauseGuardian The address of the new Pause Guardian\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldPauseGuardian = pauseGuardian;\\r\\n\\r\\n        // Store pauseGuardian with value newPauseGuardian\\r\\n        pauseGuardian = newPauseGuardian;\\r\\n\\r\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\r\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Reward Distributor\\r\\n     * @param newRewardDistributor The address of the new Reward Distributor\\r\\n     */\\r\\n    function _setRewardDistributor(\\r\\n        MultiRewardDistributor newRewardDistributor\\r\\n    ) public {\\r\\n        require(msg.sender == admin, \\\"Unauthorized\\\");\\r\\n\\r\\n        MultiRewardDistributor oldRewardDistributor = rewardDistributor;\\r\\n\\r\\n        rewardDistributor = newRewardDistributor;\\r\\n\\r\\n        emit NewRewardDistributor(oldRewardDistributor, newRewardDistributor);\\r\\n    }\\r\\n\\r\\n    function _setMintPaused(KToken kToken, bool state) public returns (bool) {\\r\\n        require(\\r\\n            markets[address(kToken)].isListed,\\r\\n            \\\"cannot pause a market that is not listed\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        mintGuardianPaused[address(kToken)] = state;\\r\\n        emit ActionPaused(kToken, \\\"Mint\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setBorrowPaused(KToken kToken, bool state) public returns (bool) {\\r\\n        require(\\r\\n            markets[address(kToken)].isListed,\\r\\n            \\\"cannot pause a market that is not listed\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        borrowGuardianPaused[address(kToken)] = state;\\r\\n        emit ActionPaused(kToken, \\\"Borrow\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setTransferPaused(bool state) public returns (bool) {\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        transferGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Transfer\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setSeizePaused(bool state) public returns (bool) {\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        seizeGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Seize\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _become(Unitroller unitroller) public {\\r\\n        require(\\r\\n            msg.sender == unitroller.admin(),\\r\\n            \\\"only unitroller admin can change brains\\\"\\r\\n        );\\r\\n        require(\\r\\n            unitroller._acceptImplementation() == 0,\\r\\n            \\\"change not authorized\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sweep ERC-20 tokens from the comptroller to the admin\\r\\n     * @param _tokenAddress The address of the token to transfer\\r\\n     * @param _amount The amount of tokens to sweep, uint.max means everything\\r\\n     */\\r\\n    function _rescueFunds(address _tokenAddress, uint _amount) external {\\r\\n        require(msg.sender == admin, \\\"Unauthorized\\\");\\r\\n\\r\\n        IERC20 token = IERC20(_tokenAddress);\\r\\n        // Similar to kTokens, if this is uint.max that means \\\"transfer everything\\\"\\r\\n        if (_amount == type(uint).max) {\\r\\n            token.transfer(admin, token.balanceOf(address(this)));\\r\\n        } else {\\r\\n            token.transfer(admin, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** WELL Distribution ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Call out to the reward distributor to update its supply index and this user's index too\\r\\n     * @param kToken The market to synchronize indexes for\\r\\n     * @param supplier The supplier to whom rewards are going\\r\\n     */\\r\\n    function updateAndDistributeSupplierRewardsForToken(\\r\\n        address kToken,\\r\\n        address supplier\\r\\n    ) internal {\\r\\n        if (address(rewardDistributor) != address(0)) {\\r\\n            rewardDistributor.updateMarketSupplyIndexAndDisburseSupplierRewards(\\r\\n                KToken(kToken),\\r\\n                supplier,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call out to the reward distributor to update its borrow index and this user's index too\\r\\n     * @param kToken The market to synchronize indexes for\\r\\n     * @param borrower The borrower to whom rewards are going\\r\\n     */\\r\\n    function updateAndDistributeBorrowerRewardsForToken(\\r\\n        address kToken,\\r\\n        address borrower\\r\\n    ) internal {\\r\\n        if (address(rewardDistributor) != address(0)) {\\r\\n            rewardDistributor.updateMarketBorrowIndexAndDisburseBorrowerRewards(\\r\\n                KToken(kToken),\\r\\n                borrower,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the WELL accrued by holder in all markets\\r\\n     */\\r\\n    function claimReward() public {\\r\\n        claimReward(msg.sender, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the rewards accrued by specified holder in all markets\\r\\n     * @param holder The address to claim rewards for\\r\\n     */\\r\\n    function claimReward(address holder) public {\\r\\n        claimReward(holder, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the rewards accrued by holder in the specified markets\\r\\n     * @param holder The address to claim rewards for\\r\\n     * @param kTokens The list of markets to claim rewards in\\r\\n     */\\r\\n    function claimReward(address holder, KToken[] memory kTokens) public {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimReward(holders, kTokens, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all rewards for a specified group of users, tokens, and market sides\\r\\n     * @param holders The addresses to claim for\\r\\n     * @param kTokens The list of markets to claim in\\r\\n     * @param borrowers Whether or not to claim earned by borrowing\\r\\n     * @param suppliers Whether or not to claim earned by supplying\\r\\n     */\\r\\n    function claimReward(\\r\\n        address[] memory holders,\\r\\n        KToken[] memory kTokens,\\r\\n        bool borrowers,\\r\\n        bool suppliers\\r\\n    ) public {\\r\\n        require(\\r\\n            address(rewardDistributor) != address(0),\\r\\n            \\\"No reward distributor configured!\\\"\\r\\n        );\\r\\n\\r\\n        for (uint i = 0; i < kTokens.length; i++) {\\r\\n            // Safety check that the supplied kTokens are active/listed\\r\\n            KToken kToken = kTokens[i];\\r\\n            require(markets[address(kToken)].isListed, \\\"market must be listed\\\");\\r\\n\\r\\n            // Disburse supply side\\r\\n            if (suppliers == true) {\\r\\n                rewardDistributor.updateMarketSupplyIndex(kToken);\\r\\n                for (\\r\\n                    uint holderIndex = 0;\\r\\n                    holderIndex < holders.length;\\r\\n                    holderIndex++\\r\\n                ) {\\r\\n                    rewardDistributor.disburseSupplierRewards(\\r\\n                        kToken,\\r\\n                        holders[holderIndex],\\r\\n                        true\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Disburse borrow side\\r\\n            if (borrowers == true) {\\r\\n                rewardDistributor.updateMarketBorrowIndex(kToken);\\r\\n                for (\\r\\n                    uint holderIndex = 0;\\r\\n                    holderIndex < holders.length;\\r\\n                    holderIndex++\\r\\n                ) {\\r\\n                    rewardDistributor.disburseBorrowerRewards(\\r\\n                        kToken,\\r\\n                        holders[holderIndex],\\r\\n                        true\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the markets\\r\\n     * @dev The automatic getter may be used to access an individual market.\\r\\n     * @return The list of market addresses\\r\\n     */\\r\\n    function getAllMarkets() public view returns (KToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n\\r\\n    function getBlockTimestamp() public view returns (uint) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_locked != 1, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _locked = 1;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _locked = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x171230121e71d7711a03091d73a82fbf3412128be208e72c30d0352b210d14ee\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(\\r\\n        address[] calldata kTokens\\r\\n    ) external virtual returns (uint[] memory);\\r\\n    function exitMarket(address kToken) external virtual returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function redeemAllowed(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    // Do not remove, still used by KToken\\r\\n    function redeemVerify(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemAmount,\\r\\n        uint redeemTokens\\r\\n    ) external pure virtual;\\r\\n\\r\\n    function borrowAllowed(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function transferAllowed(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint, uint);\\r\\n}\\r\\n\\r\\n// The hooks that were patched out of the comptroller to make room for the supply caps, if we need them\\r\\nabstract contract ComptrollerInterfaceWithAllVerificationHooks is\\r\\n    ComptrollerInterface\\r\\n{\\r\\n    function mintVerify(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount,\\r\\n        uint mintTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    // Included in ComptrollerInterface already\\r\\n    // function redeemVerify(address kToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowVerify(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual;\\r\\n\\r\\n    function repayBorrowVerify(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex\\r\\n    ) external virtual;\\r\\n\\r\\n    function liquidateBorrowVerify(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function seizeVerify(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function transferVerify(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ae39528ead57993b2652575ffa1457cbe8c1021be94cff255293da3e0dfdd39\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./KToken.sol\\\";\\r\\nimport \\\"./oracles/PriceOracle.sol\\\";\\r\\nimport \\\"./rewards/MultiRewardDistributor.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Active brains of Unitroller\\r\\n     */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending brains of Unitroller\\r\\n     */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\\r\\n\\r\\ncontract ComptrollerVXStorage is UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Oracle which gives the price of any given asset\\r\\n     */\\r\\n    PriceOracle public oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n     */\\r\\n    uint public closeFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n     */\\r\\n    uint public liquidationIncentiveMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n     */\\r\\n    mapping(address => KToken[]) public accountAssets;\\r\\n\\r\\n    struct Market {\\r\\n        /// @notice Whether or not this market is listed\\r\\n        bool isListed;\\r\\n        /**\\r\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\r\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n         *  Must be between 0 and 1, and stored as a mantissa.\\r\\n         */\\r\\n        uint collateralFactorMantissa;\\r\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\r\\n        mapping(address => bool) accountMembership;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Official mapping of kTokens -> Market metadata\\r\\n     * @dev Used e.g. to determine if a market is supported\\r\\n     */\\r\\n    mapping(address => Market) public markets;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     *  Actions which allow users to remove their own assets cannot be paused.\\r\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n     */\\r\\n    address public pauseGuardian;\\r\\n    bool public transferGuardianPaused;\\r\\n    bool public seizeGuardianPaused;\\r\\n    mapping(address => bool) public mintGuardianPaused;\\r\\n    mapping(address => bool) public borrowGuardianPaused;\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    KToken[] public allMarkets;\\r\\n\\r\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n    address public borrowCapGuardian;\\r\\n\\r\\n    // @notice Borrow caps enforced by borrowAllowed for each kToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n    mapping(address => uint) public borrowCaps;\\r\\n\\r\\n    struct RewardMarketState {\\r\\n        /// @notice The market's last updated rewardBorrowIndex or rewardSupplyIndex\\r\\n        uint224 index;\\r\\n        /// @notice The block timestamp the index was last updated at\\r\\n        uint32 timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Reentrant status, 0: not entered, 1: entered\\r\\n    uint256 internal _locked;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerVXStorage {\\r\\n    /// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\r\\n    address public supplyCapGuardian;\\r\\n\\r\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\r\\n    mapping(address => uint) public supplyCaps;\\r\\n\\r\\n    /// @notice The Reward distributor used to emit protocol rewards\\r\\n    MultiRewardDistributor public rewardDistributor;\\r\\n}\\r\\n\",\"keccak256\":\"0x47840a0747753364077a2e632250a4126209a5df3359088669b037af236bb60a\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title ERC 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return success Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return success Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n     * @return success Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x68209e670acbc2c74081be63491605aee6665f478b1d324a841230f3a804ee10\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved\\r\\n     * @return success Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return remaining The number of tokens allowed to be spent\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x93af1d53aab720b15cf34b59c36bf6c9f692987f5a8dd4e5f1f133a4394f980c\",\"license\":\"BSD-3-Clause\"},\"contracts/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./CarefulMath.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Kawa\\r\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract Exponential is CarefulMath, ExponentialNoError {\\r\\n    /**\\r\\n     * @dev Creates an exponential from numerator and denominator values.\\r\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\r\\n     *            or if `denom` is zero.\\r\\n     */\\r\\n    function getExp(\\r\\n        uint num,\\r\\n        uint denom\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function addExp(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function subExp(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function mulScalar(\\r\\n        Exp memory a,\\r\\n        uint scalar\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncate(\\r\\n        Exp memory a,\\r\\n        uint scalar\\r\\n    ) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(product));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncateAddUInt(\\r\\n        Exp memory a,\\r\\n        uint scalar,\\r\\n        uint addend\\r\\n    ) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return addUInt(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function divScalar(\\r\\n        Exp memory a,\\r\\n        uint scalar\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\r\\n     */\\r\\n    function divScalarByExp(\\r\\n        uint scalar,\\r\\n        Exp memory divisor\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        /*\\r\\n          We are doing this as:\\r\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\r\\n\\r\\n          How it works:\\r\\n          Exp = a / b;\\r\\n          Scalar = s;\\r\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\r\\n        */\\r\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n        return getExp(numerator, divisor.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function divScalarByExpTruncate(\\r\\n        uint scalar,\\r\\n        Exp memory divisor\\r\\n    ) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(fraction));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(\\r\\n            a.mantissa,\\r\\n            b.mantissa\\r\\n        );\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\r\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\r\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\r\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(\\r\\n            halfExpScale,\\r\\n            doubleScaledProduct\\r\\n        );\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err2, uint product) = divUInt(\\r\\n            doubleScaledProductWithHalfScale,\\r\\n            expScale\\r\\n        );\\r\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\r\\n        assert(err2 == MathError.NO_ERROR);\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(\\r\\n        uint a,\\r\\n        uint b\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies three exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp3(\\r\\n        Exp memory a,\\r\\n        Exp memory b,\\r\\n        Exp memory c\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, ab);\\r\\n        }\\r\\n        return mulExp(ab, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two exponentials, returning a new exponential.\\r\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\r\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\r\\n     */\\r\\n    function divExp(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (MathError, Exp memory) {\\r\\n        return getExp(a.mantissa, b.mantissa);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x43307e10d387848793f3308c7f69753aea6f0ff8ee44ac828ffb9a232130de65\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Kawa\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale / 2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(\\r\\n        Exp memory a,\\r\\n        uint scalar\\r\\n    ) internal pure returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(\\r\\n        Exp memory a,\\r\\n        uint scalar,\\r\\n        uint addend\\r\\n    ) internal pure returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(\\r\\n        Exp memory left,\\r\\n        Exp memory right\\r\\n    ) internal pure returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(\\r\\n        Exp memory left,\\r\\n        Exp memory right\\r\\n    ) internal pure returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(\\r\\n        Exp memory left,\\r\\n        Exp memory right\\r\\n    ) internal pure returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(\\r\\n        uint n,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint224) {\\r\\n        require(n < 2 ** 224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(\\r\\n        uint n,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint32) {\\r\\n        require(n < 2 ** 32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(\\r\\n        Double memory a,\\r\\n        Double memory b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) internal pure returns (uint) {\\r\\n        return add_(a, b, \\\"addition overflow\\\");\\r\\n    }\\r\\n\\r\\n    function add_(\\r\\n        uint a,\\r\\n        uint b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub_(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(\\r\\n        Double memory a,\\r\\n        Double memory b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\r\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub_(\\r\\n        uint a,\\r\\n        uint b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(\\r\\n        Double memory a,\\r\\n        Double memory b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(\\r\\n        Double memory a,\\r\\n        uint b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\r\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul_(\\r\\n        uint a,\\r\\n        uint b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint) {\\r\\n        if (a == 0 || b == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div_(\\r\\n        Exp memory a,\\r\\n        Exp memory b\\r\\n    ) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(\\r\\n        Double memory a,\\r\\n        Double memory b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return\\r\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(\\r\\n        Double memory a,\\r\\n        uint b\\r\\n    ) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) internal pure returns (uint) {\\r\\n        return div_(a, b, \\\"divide by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div_(\\r\\n        uint a,\\r\\n        uint b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x42e9550e50b80723393a3881d433e20cc37eb1f22c19b9dcba63d2673c56eb4d\",\"license\":\"BSD-3-Clause\"},\"contracts/KToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.20;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./KTokenInterfaces.sol\\\";\\nimport \\\"./TokenErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./irm/InterestRateModel.sol\\\";\\n\\n/**\\n * @title Kawa's KToken Contract\\n * @notice Abstract base for KTokens\\n * @author Kawa\\n */\\nabstract contract KToken is KTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(\\n            accrualBlockTimestamp == 0 && borrowIndex == 0,\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(\\n            initialExchangeRateMantissa > 0,\\n            \\\"initial exchange rate must be greater than zero.\\\"\\n        );\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block timestamp and borrow index (block timestamp mocks depend on comptroller being set)\\n        accrualBlockTimestamp = getBlockTimestamp();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block timestamp / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(\\n            err == uint(Error.NO_ERROR),\\n            \\\"setting interest rate model failed\\\"\\n        );\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint tokens\\n    ) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(\\n            address(this),\\n            src,\\n            dst,\\n            tokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.TRANSFER_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return\\n            transferTokens(msg.sender, msg.sender, dst, amount) ==\\n            uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return\\n            transferTokens(msg.sender, src, dst, amount) ==\\n            uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (uint.max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (uint.max means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(\\n        address owner\\n    ) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(\\n            exchangeRate,\\n            accountTokens[owner]\\n        );\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(\\n        address account\\n    ) external view override returns (uint, uint, uint, uint) {\\n        uint kTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (\\n            uint(Error.NO_ERROR),\\n            kTokenBalance,\\n            borrowBalance,\\n            exchangeRateMantissa\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block timestamp\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockTimestamp() internal view virtual returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-timestamp borrow interest rate for this kToken\\n     * @return The borrow interest rate per timestamp, scaled by 1e18\\n     */\\n    function borrowRatePerTimestamp() external view override returns (uint) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current per-timestamp supply interest rate for this kToken\\n     * @return The supply interest rate per timestamp, scaled by 1e18\\n     */\\n    function supplyRatePerTimestamp() external view override returns (uint) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves,\\n                reserveFactorMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint)\\n    {\\n        require(\\n            accrueInterest() == uint(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external override nonReentrant returns (uint) {\\n        require(\\n            accrueInterest() == uint(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(\\n        address account\\n    ) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(\\n            err == MathError.NO_ERROR,\\n            \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\"\\n        );\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(\\n        address account\\n    ) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(\\n            borrowSnapshot.principal,\\n            borrowIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(\\n            principalTimesIndex,\\n            borrowSnapshot.interestIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(\\n            accrueInterest() == uint(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the KToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(\\n            err == MathError.NO_ERROR,\\n            \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\"\\n        );\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the KToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal()\\n        internal\\n        view\\n        virtual\\n        returns (MathError, uint)\\n    {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n                totalCash,\\n                totalBorrows,\\n                totalReserves\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(\\n                cashPlusBorrowsMinusReserves,\\n                _totalSupply\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this kToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public virtual override returns (uint) {\\n        /* Remember the initial block timestamp */\\n        uint currentBlockTimestamp = getBlockTimestamp();\\n        uint accrualBlockTimestampPrior = accrualBlockTimestamp;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockTimestampPrior == currentBlockTimestamp) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n        require(\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\n            \\\"borrow rate is absurdly high\\\"\\n        );\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(\\n            currentBlockTimestamp,\\n            accrualBlockTimestampPrior\\n        );\\n        require(\\n            mathErr == MathError.NO_ERROR,\\n            \\\"could not calculate block delta\\\"\\n        );\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(\\n            Exp({mantissa: borrowRateMantissa}),\\n            blockDelta\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(\\n            simpleInterestFactor,\\n            borrowsPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndexPrior,\\n            borrowIndexPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockTimestamp = currentBlockTimestamp;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(\\n            cashPrior,\\n            interestAccumulated,\\n            borrowIndexNew,\\n            totalBorrowsNew\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives kTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint mintAmount\\n    ) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(\\n            address(this),\\n            minter,\\n            mintAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.MINT_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (\\n                fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK),\\n                0\\n            );\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The kToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the kToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of kTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({mantissa: vars.exchangeRateMantissa})\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\"\\n        );\\n\\n        /*\\n         * We calculate the new total supply of kTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(\\n            totalSupply,\\n            vars.mintTokens\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\"\\n        );\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(\\n            accountTokens[minter],\\n            vars.mintTokens\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\"\\n        );\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems kTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of kTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return\\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(payable(msg.sender), redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems kTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming kTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return\\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(payable(msg.sender), 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems kTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of kTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming kTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n        );\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            if (redeemTokensIn == type(uint).max) {\\n                vars.redeemTokens = accountTokens[redeemer];\\n            } else {\\n                vars.redeemTokens = redeemTokensIn;\\n            }\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({mantissa: vars.exchangeRateMantissa}),\\n                vars.redeemTokens\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return\\n                    failOpaque(\\n                        Error.MATH_ERROR,\\n                        FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n                        uint(vars.mathErr)\\n                    );\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            if (redeemAmountIn == type(uint).max) {\\n                vars.redeemTokens = accountTokens[redeemer];\\n\\n                (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                    Exp({mantissa: vars.exchangeRateMantissa}),\\n                    vars.redeemTokens\\n                );\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return\\n                        failOpaque(\\n                            Error.MATH_ERROR,\\n                            FailureInfo\\n                                .REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n                            uint(vars.mathErr)\\n                        );\\n                }\\n            } else {\\n                vars.redeemAmount = redeemAmountIn;\\n\\n                (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                    redeemAmountIn,\\n                    Exp({mantissa: vars.exchangeRateMantissa})\\n                );\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return\\n                        failOpaque(\\n                            Error.MATH_ERROR,\\n                            FailureInfo\\n                                .REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n                            uint(vars.mathErr)\\n                        );\\n                }\\n            }\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(\\n            address(this),\\n            redeemer,\\n            vars.redeemTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REDEEM_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDEEM_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(\\n            totalSupply,\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(\\n            accountTokens[redeemer],\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(\\n            address(this),\\n            redeemer,\\n            vars.redeemAmount,\\n            vars.redeemTokens\\n        );\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The kToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the kToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return\\n                fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint borrowAmount\\n    ) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(\\n            address(this),\\n            borrower,\\n            borrowAmount\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.BORROW_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.BORROW_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(\\n            vars.accountBorrows,\\n            borrowAmount\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(\\n            totalBorrows,\\n            borrowAmount\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(\\n            borrower,\\n            borrowAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The kToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the kToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(\\n            address(this),\\n            payer,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REPAY_BORROW_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == uint.max, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The kToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the kToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(\\n            vars.accountBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\"\\n        );\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(\\n            totalBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\"\\n        );\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(\\n            payer,\\n            borrower,\\n            vars.actualRepayAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this kToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param kTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        KTokenInterface kTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(kTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify kTokenCollateral market's block timestamp equals current block timestamp */\\n        if (kTokenCollateral.accrualBlockTimestamp() != getBlockTimestamp()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayAmount = uint.max */\\n        if (repayAmount == type(uint).max) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(repayBorrowError),\\n                    FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller\\n            .liquidateCalculateSeizeTokens(\\n                address(this),\\n                address(kTokenCollateral),\\n                actualRepayAmount\\n            );\\n        require(\\n            amountSeizeError == uint(Error.NO_ERROR),\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(\\n            kTokenCollateral.balanceOf(borrower) >= seizeTokens,\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(kTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(\\n                address(this),\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        } else {\\n            seizeError = kTokenCollateral.seize(\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            address(kTokenCollateral),\\n            seizeTokens\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.liquidateBorrowVerify(address(this), address(kTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another kToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed kToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of kTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeInternalLocalVars {\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n        uint liquidatorSeizeTokens;\\n        uint protocolSeizeTokens;\\n        uint protocolSeizeAmount;\\n        uint exchangeRateMantissa;\\n        uint totalReservesNew;\\n        uint totalSupplyNew;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another KToken.\\n     *  Its absolutely critical to use msg.sender as the seizer kToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed kToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of kTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(\\n            address(this),\\n            seizerToken,\\n            liquidator,\\n            borrower,\\n            seizeTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER\\n                );\\n        }\\n\\n        SeizeInternalLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(\\n            accountTokens[borrower],\\n            seizeTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        vars.protocolSeizeTokens = mul_(\\n            seizeTokens,\\n            Exp({mantissa: protocolSeizeShareMantissa})\\n        );\\n        vars.liquidatorSeizeTokens = sub_(\\n            seizeTokens,\\n            vars.protocolSeizeTokens\\n        );\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(\\n            Exp({mantissa: vars.exchangeRateMantissa}),\\n            vars.protocolSeizeTokens\\n        );\\n\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n        vars.totalSupplyNew = sub_(totalSupply, vars.protocolSeizeTokens);\\n\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(\\n            accountTokens[liquidator],\\n            vars.liquidatorSeizeTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n                    uint(vars.mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        totalReserves = vars.totalReservesNew;\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n        emit ReservesAdded(\\n            address(this),\\n            vars.protocolSeizeAmount,\\n            vars.totalReservesNew\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external override returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\n                );\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) public override returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COMPTROLLER_OWNER_CHECK\\n                );\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(\\n        uint newReserveFactorMantissa\\n    ) external override nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(\\n        uint newReserveFactorMantissa\\n    ) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK\\n                );\\n        }\\n\\n        // Verify market's block timestamp equals current block timestamp\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK\\n                );\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return\\n                fail(\\n                    Error.BAD_INPUT,\\n                    FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK\\n                );\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(\\n            oldReserveFactorMantissa,\\n            newReserveFactorMantissa\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(\\n        uint addAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.ADD_RESERVES_FRESH_CHECK\\n                ),\\n                actualAddAmount\\n            );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The kToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the kToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(\\n            totalReservesNew >= totalReserves,\\n            \\\"add reserves unexpected overflow\\\"\\n        );\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(\\n        uint reduceAmount\\n    ) external override nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.REDUCE_RESERVES_ADMIN_CHECK\\n                );\\n        }\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDUCE_RESERVES_FRESH_CHECK\\n                );\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return\\n                fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(\\n            totalReservesNew <= totalReserves,\\n            \\\"reduce reserves unexpected underflow\\\"\\n        );\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) public override returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(\\n        InterestRateModel newInterestRateModel\\n    ) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\\n                );\\n        }\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK\\n                );\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(\\n            newInterestRateModel.isInterestRateModel(),\\n            \\\"marker method returned false\\\"\\n        );\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(\\n            oldInterestRateModel,\\n            newInterestRateModel\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the protocol seize share using _setProtocolSeizeShareFresh\\n     * @dev Admin function to accrue interest and update the protocol seize share\\n     * @param newProtocolSeizeShareMantissa the new protocol seize share to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setProtocolSeizeShare(\\n        uint newProtocolSeizeShareMantissa\\n    ) external override nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of protocol seize share failed\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setProtocolSeizeShareFresh emits protocol-seize-share-update-specific logs on errors, so we don't need to.\\n        return _setProtocolSeizeShareFresh(newProtocolSeizeShareMantissa);\\n    }\\n\\n    /**\\n     * @notice updates the protocol seize share (*requires fresh interest accrual)\\n     * @dev Admin function to update the protocol seize share\\n     * @param newProtocolSeizeShareMantissa the new protocol seize share to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setProtocolSeizeShareFresh(\\n        uint newProtocolSeizeShareMantissa\\n    ) internal returns (uint) {\\n        // Used to store old share for use in the event that is emitted on success\\n        uint oldProtocolSeizeShareMantissa;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK\\n                );\\n        }\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\\n                );\\n        }\\n\\n        // Track the market's current protocol seize share\\n        oldProtocolSeizeShareMantissa = protocolSeizeShareMantissa;\\n\\n        // Set the protocol seize share to newProtocolSeizeShareMantissa\\n        protocolSeizeShareMantissa = newProtocolSeizeShareMantissa;\\n\\n        // Emit NewProtocolSeizeShareMantissa(oldProtocolSeizeShareMantissa, newProtocolSeizeShareMantissa)\\n        emit NewProtocolSeizeShare(\\n            oldProtocolSeizeShareMantissa,\\n            newProtocolSeizeShareMantissa\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint amount\\n    ) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0xc48d8c1c324e0407a32e5469a2cc8fecde0b55c222f6acc51a63625949121b78\",\"license\":\"BSD-3-Clause\"},\"contracts/KTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./irm/InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./TokenErrorReporter.sol\\\";\\r\\n\\r\\ncontract KTokenStorage {\\r\\n    /// @dev Guard variable for re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @notice EIP-20 token name for this token\\r\\n    string public name;\\r\\n\\r\\n    /// @notice EIP-20 token symbol for this token\\r\\n    string public symbol;\\r\\n\\r\\n    /// @notice EIP-20 token decimals for this token\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /// @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    // @notice Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n\\r\\n    /// @notice Pending administrator for this contract\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /// @notice Contract which oversees inter-kToken operations\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /// @notice Model which tells what the current interest rate should be\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // @notice Initial exchange rate used when minting the first KTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /// @notice Fraction of interest currently set aside for reserves\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /// @notice Block number that interest was last accrued at\\r\\n    uint public accrualBlockTimestamp;\\r\\n\\r\\n    /// @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /// @notice Total amount of outstanding borrows of the underlying in this market\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /// @notice Total amount of reserves of the underlying held in this market\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping(address => uint) internal accountTokens;\\r\\n\\r\\n    /// @notice Approved token transfer amounts on behalf of others\\r\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // @notice Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /// @notice Share of seized collateral that is added to reserves\\r\\n    uint public protocolSeizeShareMantissa;\\r\\n}\\r\\n\\r\\nabstract contract KTokenInterface is KTokenStorage {\\r\\n    /// @notice Indicator that this is a KToken contract (for inspection)\\r\\n    bool public constant isKToken = true;\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /// @notice Event emitted when interest is accrued\\r\\n    event AccrueInterest(\\r\\n        uint cashPrior,\\r\\n        uint interestAccumulated,\\r\\n        uint borrowIndex,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when tokens are redeemed\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /// @notice Event emitted when underlying is borrowed\\r\\n    event Borrow(\\r\\n        address borrower,\\r\\n        uint borrowAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is changed\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /// @notice Event emitted when comptroller is changed\\r\\n    event NewComptroller(\\r\\n        ComptrollerInterface oldComptroller,\\r\\n        ComptrollerInterface newComptroller\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when interestRateModel is changed\\r\\n    event NewMarketInterestRateModel(\\r\\n        InterestRateModel oldInterestRateModel,\\r\\n        InterestRateModel newInterestRateModel\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserve factor is changed\\r\\n    event NewReserveFactor(\\r\\n        uint oldReserveFactorMantissa,\\r\\n        uint newReserveFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the protocol seize share is changed\\r\\n    event NewProtocolSeizeShare(\\r\\n        uint oldProtocolSeizeShareMantissa,\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are added\\r\\n    event ReservesAdded(\\r\\n        address benefactor,\\r\\n        uint addAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are reduced\\r\\n    event ReservesReduced(\\r\\n        address admin,\\r\\n        uint reduceAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice EIP20 Transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /// @notice EIP20 Approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view virtual returns (uint);\\r\\n    function balanceOf(address owner) external view virtual returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\r\\n    function getAccountSnapshot(\\r\\n        address account\\r\\n    ) external view virtual returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerTimestamp() external view virtual returns (uint);\\r\\n    function supplyRatePerTimestamp() external view virtual returns (uint);\\r\\n    function totalBorrowsCurrent() external virtual returns (uint);\\r\\n    function borrowBalanceCurrent(\\r\\n        address account\\r\\n    ) external virtual returns (uint);\\r\\n    function borrowBalanceStored(\\r\\n        address account\\r\\n    ) external view virtual returns (uint);\\r\\n    function exchangeRateCurrent() external virtual returns (uint);\\r\\n    function exchangeRateStored() external view virtual returns (uint);\\r\\n    function getCash() external view virtual returns (uint);\\r\\n    function accrueInterest() external virtual returns (uint);\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(\\r\\n        address payable newPendingAdmin\\r\\n    ) external virtual returns (uint);\\r\\n    function _acceptAdmin() external virtual returns (uint);\\r\\n    function _setComptroller(\\r\\n        ComptrollerInterface newComptroller\\r\\n    ) external virtual returns (uint);\\r\\n    function _setReserveFactor(\\r\\n        uint newReserveFactorMantissa\\r\\n    ) external virtual returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\r\\n    function _setInterestRateModel(\\r\\n        InterestRateModel newInterestRateModel\\r\\n    ) external virtual returns (uint);\\r\\n    function _setProtocolSeizeShare(\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\ncontract KErc20Storage {\\r\\n    /// @notice Underlying asset for this KToken\\r\\n    address public underlying;\\r\\n    /// @notice messageHub for this KToken\\r\\n    address public messageHub;\\r\\n}\\r\\n\\r\\nabstract contract KErc20BaseInterface is KErc20Storage {\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\r\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20Interface {\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external virtual returns (uint);\\r\\n    function mintWithPermit(\\r\\n        uint mintAmount,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20CrossChainInterface {\\r\\n    /*** MessageHub Interface ***/\\r\\n\\r\\n    function mint(\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(\\r\\n        address payer,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function redeem(uint redeemTokens) external payable virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external payable virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external payable virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setMessageHub(address newMessageHub) external virtual;\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewMessageHub(\\r\\n        address oldMessageHub,\\r\\n        address messageHub\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract KDelegationStorage {\\r\\n    /// @notice Implementation address for this contract\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract KDelegatorInterface is KDelegationStorage {\\r\\n    /// @notice Emitted when implementation is changed\\r\\n    event NewImplementation(\\r\\n        address oldImplementation,\\r\\n        address newImplementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(\\r\\n        address implementation_,\\r\\n        bool allowResign,\\r\\n        bytes memory becomeImplementationData\\r\\n    ) external virtual;\\r\\n}\\r\\n\\r\\nabstract contract KDelegateInterface is KDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) external virtual;\\r\\n\\r\\n    /// @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n    function _resignImplementation() external virtual;\\r\\n}\\r\\n\\r\\ncontract KClientStorage {\\r\\n\\r\\n    /// @notice MessageHub implementation's address\\r\\n    address public messageHub;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n}\\r\\n\\r\\nabstract contract KClientInterface is KClientStorage {\\r\\n    /*** User Interface ***/\\r\\n    function mint(uint mintAmount) external payable virtual;\\r\\n    function repayBorrow(uint repayAmount) external payable virtual;\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external payable virtual;\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external payable virtual;\\r\\n    function releaseETH(\\r\\n        address payable recipient,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewMessageHub(\\r\\n        address oldMessageHub,\\r\\n        address messageHub\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xc7dc3bdf7a91e815b84afd32d348e97411d48d86457e484d8ddeb5f08d2790b6\",\"license\":\"BSD-3-Clause\"},\"contracts/TokenErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        SET_GAS_AMOUNT_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9214409e0b914b6ff5ef77e03ecefe0c9271d1e23d27c6dada7a8b1a1235ae17\",\"license\":\"BSD-3-Clause\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./TokenErrorReporter.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\n/**\\r\\n * @title ComptrollerCore\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * KTokens should reference this contract as their comptroller.\\r\\n */\\r\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\r\\n    /**\\r\\n     * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n     */\\r\\n    event NewPendingImplementation(\\r\\n        address oldPendingImplementation,\\r\\n        address newPendingImplementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n     */\\r\\n    event NewImplementation(\\r\\n        address oldImplementation,\\r\\n        address newImplementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(\\r\\n        address newPendingImplementation\\r\\n    ) public returns (uint) {\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(\\r\\n            oldPendingImplementation,\\r\\n            pendingComptrollerImplementation\\r\\n        );\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n     * @dev Admin function for new implementation to accept it's role as implementation\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\r\\n        if (\\r\\n            msg.sender != pendingComptrollerImplementation ||\\r\\n            pendingComptrollerImplementation == address(0)\\r\\n        ) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = comptrollerImplementation;\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        comptrollerImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n        emit NewPendingImplementation(\\r\\n            oldPendingImplementation,\\r\\n            pendingComptrollerImplementation\\r\\n        );\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @param newPendingAdmin New pending admin.\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n     * @dev Admin function for pending admin to accept role and update admin\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    fallback() external {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n            let free_mem_ptr := mload(0x40)\\r\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n            switch success\\r\\n            case 0 {\\r\\n                revert(free_mem_ptr, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(free_mem_ptr, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2ae2ec37a2dcc8afabcbf509d5cbc1c0ee7533e32ccd84cd5ba3b57e712711e\",\"license\":\"BSD-3-Clause\"},\"contracts/irm/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Kawa's InterestRateModel Interface\\r\\n * @author Kawa\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @return The borrow rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @param reserveFactorMantissa The current reserve factor the market has\\r\\n     * @return The supply rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves,\\r\\n        uint reserveFactorMantissa\\r\\n    ) external view virtual returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x81db3c2dc31dd9eea2551206086f0c2ab90b150ca9febd1aa2cef5b1f351379d\",\"license\":\"BSD-3-Clause\"},\"contracts/oracles/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"../KToken.sol\\\";\\r\\n\\r\\nabstract contract PriceOracle {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    bool public constant isPriceOracle = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a kToken asset\\r\\n     * @param kToken The kToken to get the underlying price of\\r\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n     *  Zero means the price is unavailable.\\r\\n     */\\r\\n    function getUnderlyingPrice(\\r\\n        KToken kToken\\r\\n    ) external view virtual returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x0af201b6f90a14e3331f45094bc5a4bdbe91bf7e9128b2d29bdf99175bf6029e\",\"license\":\"BSD-3-Clause\"},\"contracts/rewards/MultiRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {KToken} from \\\"../KToken.sol\\\";\\r\\nimport {Comptroller} from \\\"../Comptroller.sol\\\";\\r\\nimport {KTokenInterface} from \\\"../KTokenInterfaces.sol\\\";\\r\\nimport {ExponentialNoError} from \\\"../ExponentialNoError.sol\\\";\\r\\nimport {MultiRewardDistributorCommon} from \\\"./MultiRewardDistributorCommon.sol\\\";\\r\\n\\r\\n/**\\r\\n    @title A multi-asset distributor that tracks kTokens supply/borrows\\r\\n    @author Kawa\\r\\n\\r\\n    This contract integrates with the Kawa Comptroller and manages all reward disbursal and index\\r\\n    calculations both for the global market indices as well as individual user indices on those markets.\\r\\n    It is largely the same logic that compound uses, just generalized (meaning that transfers will not\\r\\n    fail if things can't be sent out, but the excess is accrued on the books to be sent later).\\r\\n\\r\\n    Each market has an array of configs, each with a unique emission token owned by a specific team/user.\\r\\n    That owner can adjust supply and borrow emissions, end times, and\\r\\n\\r\\n    This emitter also supports native assets, but keep in mind that things get complicated with multiple\\r\\n    owners managing a native asset emitter - one owner can drain the contract by increasing their own\\r\\n\\r\\n    Delegates admin control to the comptroller's admin (no internal admin controls).\\r\\n\\r\\n    There is a hard rule that each market should only have 1 config with a specific emission token.\\r\\n\\r\\n    Emission configs are non-removable because they hold the supplier/borrower indices and that would\\r\\n    cause rewards to not be disbursed properly when a config is removed.\\r\\n\\r\\n    There is a pause guardian in this contract that can immediately stop all token emissions. Accruals\\r\\n    still happen but no tokens will be sent out when the circuit breaker is popped. Much like the pause\\r\\n    guardians on the Comptroller, only the comptroller's admin can actually unpause things.\\r\\n*/\\r\\n\\r\\ncontract MultiRewardDistributor is\\r\\n    Pausable,\\r\\n    ReentrancyGuard,\\r\\n    Initializable,\\r\\n    MultiRewardDistributorCommon,\\r\\n    ExponentialNoError\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice The main data storage for this contract, holds a mapping of kToken to array\\r\\n    //          of market configs\\r\\n    mapping(address => MarketEmissionConfig[]) public marketConfigs;\\r\\n\\r\\n    /// @notice Comptroller this distributor is bound to\\r\\n    Comptroller public comptroller; /// we can't make this immutable because we are using proxies\\r\\n\\r\\n    /// @notice The pause guardian for this contract\\r\\n    address public pauseGuardian;\\r\\n\\r\\n    /// @notice The initialIndexConstant, used to initialize indexes, and taken from the Comptroller\\r\\n    uint224 public constant initialIndexConstant = 1e36;\\r\\n\\r\\n    /// @notice The emission cap dictates an upper limit for reward speed emission speed configs\\r\\n    /// @dev By default, is set to 100 1e18 token emissions / sec to avoid unbounded\\r\\n    ///  computation/multiplication overflows\\r\\n    uint256 public emissionCap;\\r\\n\\r\\n    // Some structs we can't move to the interface\\r\\n    struct CurrentMarketData {\\r\\n        uint256 totalKTokens;\\r\\n        uint256 totalBorrows;\\r\\n        Exp marketBorrowIndex;\\r\\n    }\\r\\n\\r\\n    struct CalculatedData {\\r\\n        CurrentMarketData marketData;\\r\\n        MTokenData kTokenInfo;\\r\\n    }\\r\\n\\r\\n    /// construct the logic contract and initialize so that the initialize function is uncallable\\r\\n    /// from the implementation and only callable from the proxy\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _comptroller,\\r\\n        address _pauseGuardian\\r\\n    ) external initializer {\\r\\n        // Sanity check the params\\r\\n        require(\\r\\n            _comptroller != address(0),\\r\\n            \\\"Comptroller can't be the 0 address!\\\"\\r\\n        );\\r\\n        require(\\r\\n            _pauseGuardian != address(0),\\r\\n            \\\"Pause Guardian can't be the 0 address!\\\"\\r\\n        );\\r\\n\\r\\n        comptroller = Comptroller(payable(_comptroller));\\r\\n\\r\\n        require(\\r\\n            comptroller.isComptroller(),\\r\\n            \\\"Can't bind to something that's not a comptroller!\\\"\\r\\n        );\\r\\n\\r\\n        pauseGuardian = _pauseGuardian;\\r\\n        emissionCap = 100e18;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     ACL Modifiers\\r\\n\\r\\n     all modifiers allow for the admin to call in to take actions within this contract, the idea being that\\r\\n     the timelock can act like an owner of the config to set parameters, and act like the comptroller to\\r\\n     kick the reward index updates, and act like a pause guardian to pause things.\\r\\n    ====================================================================================================\\r\\n    */\\r\\n\\r\\n    /// @notice Only allow the comptroller's admin to take an action, usually the timelock\\r\\n    modifier onlyComptrollersAdmin() {\\r\\n        require(\\r\\n            msg.sender == address(comptroller.admin()),\\r\\n            \\\"Only the comptroller's administrator can do this!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the comptroller OR the comptroller's admin to take an action\\r\\n    modifier onlyComptrollerOrAdmin() {\\r\\n        require(\\r\\n            msg.sender == address(comptroller) ||\\r\\n                msg.sender == comptroller.admin(),\\r\\n            \\\"Only the comptroller or comptroller admin can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the emission config owner OR the comptroller's admin to take an action\\r\\n    modifier onlyEmissionConfigOwnerOrAdmin(\\r\\n        KToken _kToken,\\r\\n        address emissionToken\\r\\n    ) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                emissionToken\\r\\n            );\\r\\n        require(\\r\\n            msg.sender == emissionConfig.config.owner ||\\r\\n                msg.sender == comptroller.admin(),\\r\\n            \\\"Only the config owner or comptroller admin can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the pause guardian OR the comptroller's admin to take an action\\r\\n    modifier onlyPauseGuardianOrAdmin() {\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == comptroller.admin(),\\r\\n            \\\"Only the pause guardian or comptroller admin can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     External/publicly accessible API\\r\\n\\r\\n     The main public API for the contract, generally focused on getting a user's outstanding rewards or\\r\\n     pulling down specific configs. Users should call `claimRewards` on the comptroller as usual to recv\\r\\n     their rewards.\\r\\n    ====================================================================================================\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current owner of a config\\r\\n     * @param _kToken The market to get a config for\\r\\n     * @param _emissionToken The reward token address\\r\\n     */\\r\\n    function getCurrentOwner(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken\\r\\n    ) external view returns (address) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n        return emissionConfig.config.owner;\\r\\n    }\\r\\n\\r\\n    /// @notice A view to enumerate all configs for a given market, does not include index data\\r\\n    function getAllMarketConfigs(\\r\\n        KToken _kToken\\r\\n    ) external view returns (MarketConfig[] memory) {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        MarketConfig[] memory outputMarketConfigs = new MarketConfig[](\\r\\n            configs.length\\r\\n        );\\r\\n\\r\\n        // Pop out the MarketConfigs to return them\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n            outputMarketConfigs[index] = emissionConfig.config;\\r\\n        }\\r\\n\\r\\n        return outputMarketConfigs;\\r\\n    }\\r\\n\\r\\n    /// @notice A view to get a config for a specific market/emission token pair\\r\\n    function getConfigForMarket(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken\\r\\n    ) external view returns (MarketConfig memory) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n        return emissionConfig.config;\\r\\n    }\\r\\n\\r\\n    /// @notice A view to enumerate a user's rewards across all markets and all emission tokens\\r\\n    function getOutstandingRewardsForUser(\\r\\n        address _user\\r\\n    ) external view returns (RewardWithMToken[] memory) {\\r\\n        KToken[] memory markets = comptroller.getAllMarkets();\\r\\n\\r\\n        RewardWithMToken[] memory outputData = new RewardWithMToken[](\\r\\n            markets.length\\r\\n        );\\r\\n\\r\\n        for (uint256 index = 0; index < markets.length; index++) {\\r\\n            RewardInfo[] memory rewardInfo = getOutstandingRewardsForUser(\\r\\n                markets[index],\\r\\n                _user\\r\\n            );\\r\\n\\r\\n            outputData[index] = RewardWithMToken(\\r\\n                address(markets[index]),\\r\\n                rewardInfo\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return outputData;\\r\\n    }\\r\\n\\r\\n    /// @notice A view to enumerate a user's rewards across a specified market and all emission tokens for that market\\r\\n    function getOutstandingRewardsForUser(\\r\\n        KToken _kToken,\\r\\n        address _user\\r\\n    ) public view returns (RewardInfo[] memory) {\\r\\n        // Global config for this kToken\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        // Output var\\r\\n        RewardInfo[] memory outputRewardData = new RewardInfo[](configs.length);\\r\\n\\r\\n        // Code golf to avoid too many local vars :rolling-eyes:\\r\\n        CalculatedData memory calcData = CalculatedData({\\r\\n            marketData: CurrentMarketData({\\r\\n                totalKTokens: _kToken.totalSupply(),\\r\\n                totalBorrows: _kToken.totalBorrows(),\\r\\n                marketBorrowIndex: Exp({mantissa: _kToken.borrowIndex()})\\r\\n            }),\\r\\n            kTokenInfo: MTokenData({\\r\\n                kTokenBalance: _kToken.balanceOf(_user),\\r\\n                borrowBalanceStored: _kToken.borrowBalanceStored(_user)\\r\\n            })\\r\\n        });\\r\\n\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n\\r\\n            // Calculate our new global supply index\\r\\n            IndexUpdate memory supplyUpdate = calculateNewIndex(\\r\\n                emissionConfig.config.supplyEmissionsPerSec,\\r\\n                emissionConfig.config.supplyGlobalTimestamp,\\r\\n                emissionConfig.config.supplyGlobalIndex,\\r\\n                emissionConfig.config.endTime,\\r\\n                calcData.marketData.totalKTokens\\r\\n            );\\r\\n\\r\\n            // Calculate our new global borrow index\\r\\n            IndexUpdate memory borrowUpdate = calculateNewIndex(\\r\\n                emissionConfig.config.borrowEmissionsPerSec,\\r\\n                emissionConfig.config.borrowGlobalTimestamp,\\r\\n                emissionConfig.config.borrowGlobalIndex,\\r\\n                emissionConfig.config.endTime,\\r\\n                div_(\\r\\n                    calcData.marketData.totalBorrows,\\r\\n                    calcData.marketData.marketBorrowIndex\\r\\n                )\\r\\n            );\\r\\n\\r\\n            // Calculate outstanding supplier side rewards\\r\\n            uint256 supplierRewardsAccrued = calculateSupplyRewardsForUser(\\r\\n                emissionConfig,\\r\\n                supplyUpdate.newIndex,\\r\\n                calcData.kTokenInfo.kTokenBalance,\\r\\n                _user\\r\\n            );\\r\\n\\r\\n            uint256 borrowerRewardsAccrued = calculateBorrowRewardsForUser(\\r\\n                emissionConfig,\\r\\n                borrowUpdate.newIndex,\\r\\n                calcData.marketData.marketBorrowIndex,\\r\\n                calcData.kTokenInfo,\\r\\n                _user\\r\\n            );\\r\\n\\r\\n            outputRewardData[index] = RewardInfo({\\r\\n                emissionToken: emissionConfig.config.emissionToken,\\r\\n                totalAmount: borrowerRewardsAccrued + supplierRewardsAccrued,\\r\\n                supplySide: supplierRewardsAccrued,\\r\\n                borrowSide: borrowerRewardsAccrued\\r\\n            });\\r\\n        }\\r\\n\\r\\n        return outputRewardData;\\r\\n    }\\r\\n\\r\\n    /// @notice A view to get the current emission caps\\r\\n    function getCurrentEmissionCap() external view returns (uint256) {\\r\\n        return emissionCap;\\r\\n    }\\r\\n\\r\\n    /// @notice view to get the cached global supply index for an kToken and emission index\\r\\n    /// @param kToken The market to get a config for\\r\\n    /// @param index The index of the config to get\\r\\n    function getGlobalSupplyIndex(\\r\\n        address kToken,\\r\\n        uint256 index\\r\\n    ) public view returns (uint256) {\\r\\n        MarketEmissionConfig storage emissionConfig = marketConfigs[kToken][\\r\\n            index\\r\\n        ];\\r\\n\\r\\n        // Set the new values in storage\\r\\n        return emissionConfig.config.supplyGlobalIndex;\\r\\n    }\\r\\n\\r\\n    /// @notice view to get the cached global borrow index for an kToken and emission index\\r\\n    /// @param kToken The market to get a config for\\r\\n    /// @param index The index of the config to get\\r\\n    function getGlobalBorrowIndex(\\r\\n        address kToken,\\r\\n        uint256 index\\r\\n    ) public view returns (uint256) {\\r\\n        MarketEmissionConfig storage emissionConfig = marketConfigs[kToken][\\r\\n            index\\r\\n        ];\\r\\n\\r\\n        // Set the new values in storage\\r\\n        return emissionConfig.config.borrowGlobalIndex;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     Administrative API\\r\\n\\r\\n     Should be only callable by the comptroller's admin (usually the timelock), this is the only way\\r\\n     to add new configurations to the markets. There's also a rescue assets function that will sweep\\r\\n     tokens out of this contract and to the timelock, the thought being that rescuing accidentally sent\\r\\n     funds or sweeping existing tokens to a new distributor is possible.\\r\\n    ====================================================================================================\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new emission configuration for a specific market\\r\\n     * @dev Emission config must not already exist for the specified market (unique to the emission token)\\r\\n     */\\r\\n    function _addEmissionConfig(\\r\\n        KToken _kToken,\\r\\n        address _owner,\\r\\n        address _emissionToken,\\r\\n        uint256 _supplyEmissionPerSec,\\r\\n        uint256 _borrowEmissionsPerSec,\\r\\n        uint256 _endTime\\r\\n    ) external onlyComptrollersAdmin {\\r\\n        // Ensure market is listed in the comptroller before accepting a config for it (should always be checked\\r\\n        // in the comptroller first, but never hurts to codify that assertion/requirement here.\\r\\n        (bool tokenIsListed, ) = comptroller.markets(address(_kToken));\\r\\n        require(\\r\\n            tokenIsListed,\\r\\n            \\\"The market requested to be added is un-listed!\\\"\\r\\n        );\\r\\n\\r\\n        // Sanity check emission speeds are below emissionCap\\r\\n        require(\\r\\n            _supplyEmissionPerSec < emissionCap,\\r\\n            \\\"Cannot set a supply reward speed higher than the emission cap!\\\"\\r\\n        );\\r\\n        require(\\r\\n            _borrowEmissionsPerSec < emissionCap,\\r\\n            \\\"Cannot set a borrow reward speed higher than the emission cap!\\\"\\r\\n        );\\r\\n\\r\\n        // Sanity check end time is some time in the future\\r\\n        require(\\r\\n            _endTime > block.timestamp + 1,\\r\\n            \\\"The _endTime parameter must be in the future!\\\"\\r\\n        );\\r\\n\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        // Sanity check to ensure that the emission token doesn't already exist in a config\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage kTokenConfig = configs[index];\\r\\n            require(\\r\\n                kTokenConfig.config.emissionToken != _emissionToken,\\r\\n                \\\"Emission token already listed!\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Things look good, create a config\\r\\n        MarketConfig memory config = MarketConfig({\\r\\n            // Set the owner of the reward distributor config\\r\\n            owner: _owner,\\r\\n            // Set the emission token address\\r\\n            emissionToken: _emissionToken,\\r\\n            // Set the time that the emission campaign should end at\\r\\n            endTime: _endTime,\\r\\n            // Initialize the global supply\\r\\n            supplyGlobalTimestamp: safe32(\\r\\n                block.timestamp,\\r\\n                \\\"block timestamp exceeds 32 bits\\\"\\r\\n            ),\\r\\n            supplyGlobalIndex: initialIndexConstant,\\r\\n            // Initialize the global borrow index + timestamp\\r\\n            borrowGlobalTimestamp: safe32(\\r\\n                block.timestamp,\\r\\n                \\\"block timestamp exceeds 32 bits\\\"\\r\\n            ),\\r\\n            borrowGlobalIndex: initialIndexConstant,\\r\\n            // Set supply and reward borrow speeds\\r\\n            supplyEmissionsPerSec: _supplyEmissionPerSec,\\r\\n            borrowEmissionsPerSec: _borrowEmissionsPerSec\\r\\n        });\\r\\n\\r\\n        emit NewConfigCreated(\\r\\n            _kToken,\\r\\n            _owner,\\r\\n            _emissionToken,\\r\\n            _supplyEmissionPerSec,\\r\\n            _borrowEmissionsPerSec,\\r\\n            _endTime\\r\\n        );\\r\\n\\r\\n        // Go push in our new config\\r\\n        MarketEmissionConfig storage newConfig = configs.push();\\r\\n        newConfig.config = config;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sweep ERC-20 tokens from the comptroller to the admin\\r\\n     * @param _tokenAddress The address of the token to transfer\\r\\n     * @param _amount The amount of tokens to sweep, uint256.max means everything\\r\\n     */\\r\\n    function _rescueFunds(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external onlyComptrollersAdmin {\\r\\n        IERC20 token = IERC20(_tokenAddress);\\r\\n        // Similar to kTokens, if this is uint256.max that means \\\"transfer everything\\\"\\r\\n        if (_amount == type(uint256).max) {\\r\\n            token.safeTransfer(\\r\\n                comptroller.admin(),\\r\\n                token.balanceOf(address(this))\\r\\n            );\\r\\n        } else {\\r\\n            token.safeTransfer(comptroller.admin(), _amount);\\r\\n        }\\r\\n\\r\\n        emit FundsRescued(_tokenAddress, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new pause guardian, callable by the CURRENT pause guardian or comptroller's admin\\r\\n     * @param _newPauseGuardian The new pause guardian\\r\\n     */\\r\\n    function _setPauseGuardian(\\r\\n        address _newPauseGuardian\\r\\n    ) external onlyPauseGuardianOrAdmin {\\r\\n        require(\\r\\n            _newPauseGuardian != address(0),\\r\\n            \\\"Pause Guardian can't be the 0 address!\\\"\\r\\n        );\\r\\n\\r\\n        address currentPauseGuardian = pauseGuardian;\\r\\n\\r\\n        pauseGuardian = _newPauseGuardian;\\r\\n\\r\\n        emit NewPauseGuardian(currentPauseGuardian, _newPauseGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new emission cap for supply/borrow speeds\\r\\n     * @param _newEmissionCap The new emission cap\\r\\n     */\\r\\n    function _setEmissionCap(\\r\\n        uint256 _newEmissionCap\\r\\n    ) external onlyComptrollersAdmin {\\r\\n        uint256 oldEmissionCap = emissionCap;\\r\\n\\r\\n        emissionCap = _newEmissionCap;\\r\\n\\r\\n        emit NewEmissionCap(oldEmissionCap, _newEmissionCap);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     Comptroller specific API\\r\\n\\r\\n     This is the main integration points with the Kawa Comptroller. Within the `allowMint`/`allowBorrow`/etc\\r\\n     hooks, the comptroller will reach out to kick the global index update (updateMarketIndex) as well as update\\r\\n     the supplier's/borrower's token specific distribution indices for that market\\r\\n    ====================================================================================================\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the supply indices for a given market\\r\\n     * @param _kToken The market to update\\r\\n     */\\r\\n    function updateMarketSupplyIndex(\\r\\n        KToken _kToken\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        updateMarketSupplyIndexInternal(_kToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the deltas in indices between this user's index and the global supplier index for all configs,\\r\\n     *         and accrue any owed emissions to their supplierRewardsAccrued for this market's configs\\r\\n     * @param _kToken The market to update\\r\\n     * @param _supplier The supplier whose index will be updated\\r\\n     * @param _sendTokens Whether to send tokens as part of calculating owed rewards\\r\\n     */\\r\\n    function disburseSupplierRewards(\\r\\n        KToken _kToken,\\r\\n        address _supplier,\\r\\n        bool _sendTokens\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        disburseSupplierRewardsInternal(_kToken, _supplier, _sendTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Combine the above 2 functions into one that will update the global and user supplier indexes and\\r\\n     *         disburse rewards\\r\\n     * @param _kToken The market to update\\r\\n     * @param _supplier The supplier whose index will be updated\\r\\n     * @param _sendTokens Whether to send tokens as part of calculating owed rewards\\r\\n     */\\r\\n    function updateMarketSupplyIndexAndDisburseSupplierRewards(\\r\\n        KToken _kToken,\\r\\n        address _supplier,\\r\\n        bool _sendTokens\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        updateMarketSupplyIndexInternal(_kToken);\\r\\n        disburseSupplierRewardsInternal(_kToken, _supplier, _sendTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the borrow indices for a given market\\r\\n     * @param _kToken The market to update\\r\\n     */\\r\\n    function updateMarketBorrowIndex(\\r\\n        KToken _kToken\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        updateMarketBorrowIndexInternal(_kToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the deltas in indices between this user's index and the global borrower index for all configs,\\r\\n     *         and accrue any owed emissions to their borrowerRewardsAccrued for this market's configs\\r\\n     * @param _kToken The market to update\\r\\n     * @param _borrower The borrower whose index will be updated\\r\\n     * @param _sendTokens Whether to send tokens as part of calculating owed rewards\\r\\n     */\\r\\n    function disburseBorrowerRewards(\\r\\n        KToken _kToken,\\r\\n        address _borrower,\\r\\n        bool _sendTokens\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        disburseBorrowerRewardsInternal(_kToken, _borrower, _sendTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Combine the above 2 functions into one that will update the global and user borrower indexes and\\r\\n     *         disburse rewards\\r\\n     * @param _kToken The market to update\\r\\n     * @param _borrower The borrower whose index will be updated\\r\\n     * @param _sendTokens Whether to send tokens as part of calculating owed rewards\\r\\n     */\\r\\n    function updateMarketBorrowIndexAndDisburseBorrowerRewards(\\r\\n        KToken _kToken,\\r\\n        address _borrower,\\r\\n        bool _sendTokens\\r\\n    ) external onlyComptrollerOrAdmin {\\r\\n        updateMarketBorrowIndexInternal(_kToken);\\r\\n        disburseBorrowerRewardsInternal(_kToken, _borrower, _sendTokens);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     Pause Guardian API\\r\\n\\r\\n     The pause guardian tooling is responsible for toggling on and off actual reward emissions. Things\\r\\n     will still be accrued as normal, but the `sendRewards` function will simply not attempt to transfer\\r\\n     any tokens out.\\r\\n\\r\\n     Similarly to the pause guardians in the Comptroller, when the pause guardian pops this circuit\\r\\n     breaker, only the comptroller's admin is able to unpause things and get tokens emitting again.\\r\\n    ====================================================================================================\\r\\n     */\\r\\n\\r\\n    /// @notice Pauses reward sending *but not accrual*\\r\\n    function _pauseRewards() external onlyPauseGuardianOrAdmin {\\r\\n        _pause();\\r\\n\\r\\n        emit RewardsPaused();\\r\\n    }\\r\\n\\r\\n    /// @notice Unpauses and allows reward sending once again\\r\\n    function _unpauseRewards() external onlyComptrollersAdmin {\\r\\n        _unpause();\\r\\n\\r\\n        emit RewardsUnpaused();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     Configuration Owner API\\r\\n\\r\\n     This is a set of APIs for external parties/emission config owners to update their configs. They're\\r\\n     able to transfer ownership, update emission speeds, and update the end time for a campaign. Worth\\r\\n     noting, if the endTime is hit, no more rewards will be accrued, BUT you can call `_updateEndTime`\\r\\n     to extend the specified campaign - if the campaign has ended already, then rewards will start\\r\\n     accruing from the time of reactivation.\\r\\n    ====================================================================================================\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Update the supply emissions for a given kToken + emission token pair.\\r\\n     * @param _kToken The market to change a config for\\r\\n     * @param _emissionToken The underlying reward token address\\r\\n     * @param _newSupplySpeed The supply side emission speed denoted in the underlying emission token's decimals\\r\\n     */\\r\\n    function _updateSupplySpeed(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken,\\r\\n        uint256 _newSupplySpeed\\r\\n    ) external onlyEmissionConfigOwnerOrAdmin(_kToken, _emissionToken) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n\\r\\n        uint256 currentSupplySpeed = emissionConfig\\r\\n            .config\\r\\n            .supplyEmissionsPerSec;\\r\\n\\r\\n        require(\\r\\n            _newSupplySpeed != currentSupplySpeed,\\r\\n            \\\"Can't set new supply emissions to be equal to current!\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newSupplySpeed < emissionCap,\\r\\n            \\\"Cannot set a supply reward speed higher than the emission cap!\\\"\\r\\n        );\\r\\n\\r\\n        // Make sure we update our indices before setting the new speed\\r\\n        updateMarketSupplyIndexInternal(_kToken);\\r\\n\\r\\n        // Update supply speed\\r\\n        emissionConfig.config.supplyEmissionsPerSec = _newSupplySpeed;\\r\\n\\r\\n        emit NewSupplyRewardSpeed(\\r\\n            _kToken,\\r\\n            _emissionToken,\\r\\n            currentSupplySpeed,\\r\\n            _newSupplySpeed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the borrow emissions for a given kToken + emission token pair.\\r\\n     * @param _kToken The market to change a config for\\r\\n     * @param _emissionToken The underlying reward token address\\r\\n     * @param _newBorrowSpeed The borrow side emission speed denoted in the underlying emission token's decimals\\r\\n     */\\r\\n    function _updateBorrowSpeed(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken,\\r\\n        uint256 _newBorrowSpeed\\r\\n    ) external onlyEmissionConfigOwnerOrAdmin(_kToken, _emissionToken) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n\\r\\n        uint256 currentBorrowSpeed = emissionConfig\\r\\n            .config\\r\\n            .borrowEmissionsPerSec;\\r\\n\\r\\n        require(\\r\\n            _newBorrowSpeed != currentBorrowSpeed,\\r\\n            \\\"Can't set new borrow emissions to be equal to current!\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newBorrowSpeed < emissionCap,\\r\\n            \\\"Cannot set a borrow reward speed higher than the emission cap!\\\"\\r\\n        );\\r\\n\\r\\n        // Make sure we update our indices before setting the new speed\\r\\n        updateMarketBorrowIndexInternal(_kToken);\\r\\n\\r\\n        // Update borrow speed\\r\\n        emissionConfig.config.borrowEmissionsPerSec = _newBorrowSpeed;\\r\\n\\r\\n        emit NewBorrowRewardSpeed(\\r\\n            _kToken,\\r\\n            _emissionToken,\\r\\n            currentBorrowSpeed,\\r\\n            _newBorrowSpeed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the owner of a config\\r\\n     * @param _kToken The market to change a config for\\r\\n     * @param _emissionToken The underlying reward token address\\r\\n     * @param _newOwner The new owner for this config\\r\\n     */\\r\\n    function _updateOwner(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken,\\r\\n        address _newOwner\\r\\n    ) external onlyEmissionConfigOwnerOrAdmin(_kToken, _emissionToken) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n\\r\\n        address currentOwner = emissionConfig.config.owner;\\r\\n\\r\\n        emissionConfig.config.owner = _newOwner;\\r\\n        emit NewEmissionConfigOwner(\\r\\n            _kToken,\\r\\n            _emissionToken,\\r\\n            currentOwner,\\r\\n            _newOwner\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the end time for an emission campaign, must be in the future\\r\\n     * @param _kToken The market to change a config for\\r\\n     * @param _emissionToken The underlying reward token address\\r\\n     * @param _newEndTime The new desired end time\\r\\n     */\\r\\n    function _updateEndTime(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken,\\r\\n        uint256 _newEndTime\\r\\n    ) external onlyEmissionConfigOwnerOrAdmin(_kToken, _emissionToken) {\\r\\n        MarketEmissionConfig\\r\\n            storage emissionConfig = fetchConfigByEmissionToken(\\r\\n                _kToken,\\r\\n                _emissionToken\\r\\n            );\\r\\n\\r\\n        uint256 currentEndTime = emissionConfig.config.endTime;\\r\\n\\r\\n        // Must be older than our existing end time AND the current block\\r\\n        require(\\r\\n            _newEndTime > currentEndTime,\\r\\n            \\\"_newEndTime MUST be > currentEndTime\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newEndTime > block.timestamp,\\r\\n            \\\"_newEndTime MUST be > block.timestamp\\\"\\r\\n        );\\r\\n\\r\\n        // Update both global indices before setting the new end time. If rewards are off this just updates the\\r\\n        // global block timestamp to the current second\\r\\n        updateMarketBorrowIndexInternal(_kToken);\\r\\n        updateMarketSupplyIndexInternal(_kToken);\\r\\n\\r\\n        emissionConfig.config.endTime = _newEndTime;\\r\\n        emit NewRewardEndTime(\\r\\n            _kToken,\\r\\n            _emissionToken,\\r\\n            currentEndTime,\\r\\n            _newEndTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================================================================\\r\\n     Internal functions\\r\\n\\r\\n     Internal functions used by other parts of this contract, views first then mutation functions\\r\\n    ====================================================================================================\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @notice An internal view to calculate the total owed supplier rewards for a given supplier address\\r\\n     * @param _emissionConfig The emission config to read index data from\\r\\n     * @param _globalSupplyIndex The global supply index for a market\\r\\n     * @param _supplierTokens The amount of this market's kTokens owned by a user\\r\\n     * @param _supplier The address of the supplier\\r\\n     */\\r\\n    function calculateSupplyRewardsForUser(\\r\\n        MarketEmissionConfig storage _emissionConfig,\\r\\n        uint224 _globalSupplyIndex,\\r\\n        uint256 _supplierTokens,\\r\\n        address _supplier\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 userSupplyIndex = _emissionConfig.supplierIndices[_supplier];\\r\\n\\r\\n        // If our user's index isn't set yet, set to the current global supply index\\r\\n        if (\\r\\n            userSupplyIndex == 0 && _globalSupplyIndex >= initialIndexConstant\\r\\n        ) {\\r\\n            userSupplyIndex = initialIndexConstant; //_globalSupplyIndex;\\r\\n        }\\r\\n\\r\\n        // Calculate change in the cumulative sum of the reward per cToken accrued\\r\\n        Double memory deltaIndex = Double({\\r\\n            mantissa: sub_(_globalSupplyIndex, userSupplyIndex)\\r\\n        });\\r\\n\\r\\n        // Calculate reward accrued: cTokenAmount * accruedPerCToken\\r\\n        uint256 supplierDelta = mul_(_supplierTokens, deltaIndex);\\r\\n\\r\\n        return\\r\\n            add_(\\r\\n                _emissionConfig.supplierRewardsAccrued[_supplier],\\r\\n                supplierDelta\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal view to calculate the total owed borrower rewards for a given borrower address\\r\\n     * @param _emissionConfig The emission config to read index data from\\r\\n     * @param _globalBorrowIndex The global borrow index for a market\\r\\n     * @param _marketBorrowIndex The kToken's borrowIndex\\r\\n     * @param _kTokenData A struct holding a borrower's\\r\\n     * @param _borrower The address of the supplier kToken balance and borrowed balance\\r\\n     */\\r\\n    function calculateBorrowRewardsForUser(\\r\\n        MarketEmissionConfig storage _emissionConfig,\\r\\n        uint224 _globalBorrowIndex,\\r\\n        Exp memory _marketBorrowIndex,\\r\\n        MTokenData memory _kTokenData,\\r\\n        address _borrower\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 userBorrowIndex = _emissionConfig.borrowerIndices[_borrower];\\r\\n\\r\\n        // If our user's index isn't set yet, set to the current global borrow index\\r\\n        if (\\r\\n            userBorrowIndex == 0 && _globalBorrowIndex >= initialIndexConstant\\r\\n        ) {\\r\\n            userBorrowIndex = initialIndexConstant; //userBorrowIndex = _globalBorrowIndex;\\r\\n        }\\r\\n\\r\\n        // Calculate change in the cumulative sum of the reward per cToken accrued\\r\\n        Double memory deltaIndex = Double({\\r\\n            mantissa: sub_(_globalBorrowIndex, userBorrowIndex)\\r\\n        });\\r\\n\\r\\n        uint borrowerAmount = div_(\\r\\n            _kTokenData.borrowBalanceStored,\\r\\n            _marketBorrowIndex\\r\\n        );\\r\\n\\r\\n        // Calculate reward accrued: kTokenAmount * accruedPerMToken\\r\\n        uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n\\r\\n        return\\r\\n            add_(\\r\\n                _emissionConfig.borrowerRewardsAccrued[_borrower],\\r\\n                borrowerDelta\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal view to calculate the global reward indices while taking into account emissions end times.\\r\\n     * @dev Denominator here is whatever fractional denominator is used to calculate the index. On the supply side\\r\\n     *      it's simply kToken.totalSupply(), while on the borrow side it's (kToken.totalBorrows() / kToken.borrowIndex())\\r\\n     * @param _emissionsPerSecond The configured emissions per second for this index\\r\\n     * @param _currentTimestamp The current index timestamp\\r\\n     * @param _currentIndex The current index\\r\\n     * @param _rewardEndTime The end time for this reward config\\r\\n     * @param _denominator The denominator used in the calculation (supply side == kToken.totalSupply,\\r\\n     *        borrow side is (kToken.totalBorrows() / kToken.borrowIndex()).\\r\\n     */\\r\\n    function calculateNewIndex(\\r\\n        uint256 _emissionsPerSecond,\\r\\n        uint32 _currentTimestamp,\\r\\n        uint224 _currentIndex,\\r\\n        uint256 _rewardEndTime,\\r\\n        uint256 _denominator\\r\\n    ) internal view returns (IndexUpdate memory) {\\r\\n        uint32 blockTimestamp = safe32(\\r\\n            block.timestamp,\\r\\n            \\\"block timestamp exceeds 32 bits\\\"\\r\\n        );\\r\\n        uint256 deltaTimestamps = sub_(\\r\\n            blockTimestamp,\\r\\n            uint256(_currentTimestamp)\\r\\n        );\\r\\n\\r\\n        // If our current block timestamp is newer than our emission end time, we need to halt\\r\\n        // reward emissions by stinting the growth of the global index, but importantly not\\r\\n        // the global timestamp. Should not be gte because the equivalent case makes a\\r\\n        // 0 deltaTimestamp which doesn't accrue the last bit of rewards properly.\\r\\n        if (blockTimestamp > _rewardEndTime) {\\r\\n            // If our current index timestamp is less than our end time it means this\\r\\n            // is the first time the endTime threshold has been breached, and we have\\r\\n            // some left over rewards to accrue, so clamp deltaTimestamps to the whatever\\r\\n            // window of rewards still remains.\\r\\n            if (_currentTimestamp < _rewardEndTime) {\\r\\n                deltaTimestamps = sub_(_rewardEndTime, _currentTimestamp);\\r\\n            } else {\\r\\n                // Otherwise just set deltaTimestamps to 0 to ensure that we short circuit\\r\\n                // in the next step\\r\\n                deltaTimestamps = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Short circuit to update the timestamp but *not* the index if there's nothing\\r\\n        // to calculate\\r\\n        if (deltaTimestamps == 0 || _emissionsPerSecond == 0) {\\r\\n            return\\r\\n                IndexUpdate({\\r\\n                    newIndex: _currentIndex,\\r\\n                    newTimestamp: blockTimestamp\\r\\n                });\\r\\n        }\\r\\n\\r\\n        // At this point we know we have to calculate a new index, so do so\\r\\n        uint256 tokenAccrued = mul_(deltaTimestamps, _emissionsPerSecond);\\r\\n\\r\\n        Double memory ratio = _denominator > 0\\r\\n            ? fraction(tokenAccrued, _denominator)\\r\\n            : Double({mantissa: 0});\\r\\n\\r\\n        uint224 newIndex = safe224(\\r\\n            add_(Double({mantissa: _currentIndex}), ratio).mantissa,\\r\\n            \\\"new index exceeds 224 bits\\\"\\r\\n        );\\r\\n\\r\\n        return IndexUpdate({newIndex: newIndex, newTimestamp: blockTimestamp});\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal view to find a config for a given market given a specific emission token\\r\\n     * @dev Reverts if the mtoken + emission token combo could not be found.\\r\\n     * @param _kToken The market to fetch a config for\\r\\n     * @param _emissionToken The emission token to fetch a config for\\r\\n     */\\r\\n    function fetchConfigByEmissionToken(\\r\\n        KToken _kToken,\\r\\n        address _emissionToken\\r\\n    ) internal view returns (MarketEmissionConfig storage) {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n            if (emissionConfig.config.emissionToken == _emissionToken) {\\r\\n                return emissionConfig;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"Unable to find emission token in kToken configs\\\");\\r\\n    }\\r\\n\\r\\n    //\\r\\n    // Internal mutable functions\\r\\n    //\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to update the global supply index for a given kToken\\r\\n     * @param _kToken The market to update the global supply index for\\r\\n     */\\r\\n    function updateMarketSupplyIndexInternal(KToken _kToken) internal {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        uint256 totalKTokens = KTokenInterface(_kToken).totalSupply();\\r\\n\\r\\n        // Iterate over all market configs and update their indexes + timestamps\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n\\r\\n            // Go calculate our new values\\r\\n            IndexUpdate memory supplyUpdate = calculateNewIndex(\\r\\n                emissionConfig.config.supplyEmissionsPerSec,\\r\\n                emissionConfig.config.supplyGlobalTimestamp,\\r\\n                emissionConfig.config.supplyGlobalIndex,\\r\\n                emissionConfig.config.endTime,\\r\\n                totalKTokens\\r\\n            );\\r\\n\\r\\n            // Set the new values in storage\\r\\n            emissionConfig.config.supplyGlobalIndex = supplyUpdate.newIndex;\\r\\n            emissionConfig.config.supplyGlobalTimestamp = supplyUpdate\\r\\n                .newTimestamp;\\r\\n            emit GlobalSupplyIndexUpdated(\\r\\n                _kToken,\\r\\n                emissionConfig.config.emissionToken,\\r\\n                supplyUpdate.newIndex,\\r\\n                supplyUpdate.newTimestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to disburse rewards for the supplier side of a a specific kToken\\r\\n     * @dev will only send tokens when _sendTokens == true, otherwise just accrue rewards\\r\\n     * @param _kToken The market to update the global supply index for\\r\\n     * @param _supplier The supplier to disburse rewards for\\r\\n     * @param _sendTokens Whether to actually send tokens instead of just accruing\\r\\n     */\\r\\n    function disburseSupplierRewardsInternal(\\r\\n        KToken _kToken,\\r\\n        address _supplier,\\r\\n        bool _sendTokens\\r\\n    ) internal {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        uint256 supplierTokens = _kToken.balanceOf(_supplier);\\r\\n\\r\\n        // Iterate over all market configs and update their indexes + timestamps\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n\\r\\n            uint256 totalRewardsOwed = calculateSupplyRewardsForUser(\\r\\n                emissionConfig,\\r\\n                emissionConfig.config.supplyGlobalIndex,\\r\\n                supplierTokens,\\r\\n                _supplier\\r\\n            );\\r\\n\\r\\n            // Update user's index to match global index\\r\\n            emissionConfig.supplierIndices[_supplier] = emissionConfig\\r\\n                .config\\r\\n                .supplyGlobalIndex;\\r\\n            // Update the user's total rewards owed\\r\\n            emissionConfig.supplierRewardsAccrued[_supplier] = totalRewardsOwed;\\r\\n\\r\\n            emit DisbursedSupplierRewards(\\r\\n                _kToken,\\r\\n                _supplier,\\r\\n                emissionConfig.config.emissionToken,\\r\\n                emissionConfig.supplierRewardsAccrued[_supplier]\\r\\n            );\\r\\n\\r\\n            // SendRewards will attempt to send only if it has enough emission tokens to do so,\\r\\n            // and if it doesn't have enough it emits a InsufficientTokensToEmit event and returns\\r\\n            // the rewards that couldn't be sent, which are the total of what a user is owed, so we\\r\\n            // store it in supplierRewardsAccrued to make sure we don't lose rewards accrual if there's\\r\\n            // not enough funds in the rewarder\\r\\n            if (_sendTokens) {\\r\\n                // Emit rewards for this token/pair\\r\\n                uint256 unsendableRewards = sendReward(\\r\\n                    payable(_supplier),\\r\\n                    emissionConfig.supplierRewardsAccrued[_supplier],\\r\\n                    emissionConfig.config.emissionToken\\r\\n                );\\r\\n\\r\\n                emissionConfig.supplierRewardsAccrued[\\r\\n                    _supplier\\r\\n                ] = unsendableRewards;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to update the global borrow index for a given kToken\\r\\n     * @param _kToken The market to update the global borrow index for\\r\\n     */\\r\\n    function updateMarketBorrowIndexInternal(KToken _kToken) internal {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        Exp memory marketBorrowIndex = Exp({\\r\\n            mantissa: KToken(_kToken).borrowIndex()\\r\\n        });\\r\\n        uint256 totalBorrows = KToken(_kToken).totalBorrows();\\r\\n\\r\\n        // Iterate over all market configs and update their indexes + timestamps\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n\\r\\n            // Go calculate our new borrow index\\r\\n            IndexUpdate memory borrowIndexUpdate = calculateNewIndex(\\r\\n                emissionConfig.config.borrowEmissionsPerSec,\\r\\n                emissionConfig.config.borrowGlobalTimestamp,\\r\\n                emissionConfig.config.borrowGlobalIndex,\\r\\n                emissionConfig.config.endTime,\\r\\n                div_(totalBorrows, marketBorrowIndex)\\r\\n            );\\r\\n\\r\\n            // Set the new values in storage\\r\\n            emissionConfig.config.borrowGlobalIndex = borrowIndexUpdate\\r\\n                .newIndex;\\r\\n            emissionConfig.config.borrowGlobalTimestamp = borrowIndexUpdate\\r\\n                .newTimestamp;\\r\\n\\r\\n            // Emit an update\\r\\n            emit GlobalBorrowIndexUpdated(\\r\\n                _kToken,\\r\\n                emissionConfig.config.emissionToken,\\r\\n                emissionConfig.config.borrowGlobalIndex,\\r\\n                emissionConfig.config.borrowGlobalTimestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to disburse rewards for the borrower side of a a specific kToken\\r\\n     * @dev will only send tokens when _sendTokens == true, otherwise just accrue rewards\\r\\n     * @param _kToken The market to update the global borrow index for\\r\\n     * @param _borrower The borrower to disburse rewards for\\r\\n     * @param _sendTokens Whether to actually send tokens instead of just accruing\\r\\n     */\\r\\n    function disburseBorrowerRewardsInternal(\\r\\n        KToken _kToken,\\r\\n        address _borrower,\\r\\n        bool _sendTokens\\r\\n    ) internal {\\r\\n        MarketEmissionConfig[] storage configs = marketConfigs[\\r\\n            address(_kToken)\\r\\n        ];\\r\\n\\r\\n        Exp memory marketBorrowIndex = Exp({mantissa: _kToken.borrowIndex()});\\r\\n        MTokenData memory kTokenData = MTokenData({\\r\\n            kTokenBalance: _kToken.balanceOf(_borrower),\\r\\n            borrowBalanceStored: _kToken.borrowBalanceStored(_borrower)\\r\\n        });\\r\\n\\r\\n        // Iterate over all market configs and update their indexes + timestamps\\r\\n        for (uint256 index = 0; index < configs.length; index++) {\\r\\n            MarketEmissionConfig storage emissionConfig = configs[index];\\r\\n\\r\\n            // Go calculate the total outstanding rewards for this user\\r\\n            uint256 owedRewards = calculateBorrowRewardsForUser(\\r\\n                emissionConfig,\\r\\n                emissionConfig.config.borrowGlobalIndex,\\r\\n                marketBorrowIndex,\\r\\n                kTokenData,\\r\\n                _borrower\\r\\n            );\\r\\n\\r\\n            // Update user's index to global index\\r\\n            emissionConfig.borrowerIndices[_borrower] = emissionConfig\\r\\n                .config\\r\\n                .borrowGlobalIndex;\\r\\n\\r\\n            // Update the accrued borrow side rewards for this user\\r\\n            emissionConfig.borrowerRewardsAccrued[_borrower] = owedRewards;\\r\\n\\r\\n            emit DisbursedBorrowerRewards(\\r\\n                _kToken,\\r\\n                _borrower,\\r\\n                emissionConfig.config.emissionToken,\\r\\n                emissionConfig.borrowerRewardsAccrued[_borrower]\\r\\n            );\\r\\n\\r\\n            // If we are instructed to send out rewards, do so and update the borrowerRewardsAccrued to\\r\\n            // 0 if it was successful, or to `pendingRewards` if there was insufficient balance to send\\r\\n            if (_sendTokens) {\\r\\n                // Emit rewards for this token/pair\\r\\n                uint256 pendingRewards = sendReward(\\r\\n                    payable(_borrower),\\r\\n                    emissionConfig.borrowerRewardsAccrued[_borrower],\\r\\n                    emissionConfig.config.emissionToken\\r\\n                );\\r\\n\\r\\n                emissionConfig.borrowerRewardsAccrued[\\r\\n                    _borrower\\r\\n                ] = pendingRewards;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An internal function to send rewards to a user\\r\\n     * @dev Non-reentrant and returns the amount of tokens that were successfully sent\\r\\n     * @param _user The user address to send tokens to\\r\\n     * @param _amount The amount of tokens to send\\r\\n     * @param _rewardToken The reward token to send\\r\\n     */\\r\\n    function sendReward(\\r\\n        address payable _user,\\r\\n        uint256 _amount,\\r\\n        address _rewardToken\\r\\n    ) internal nonReentrant returns (uint256) {\\r\\n        // Short circuit if we don't have anything to send out\\r\\n        if (_amount == 0) {\\r\\n            return _amount;\\r\\n        }\\r\\n\\r\\n        // If pause guardian is active, bypass all token transfers, but still accrue to local tally\\r\\n        if (paused()) {\\r\\n            return _amount;\\r\\n        }\\r\\n\\r\\n        IERC20 token = IERC20(_rewardToken);\\r\\n\\r\\n        // Get the distributor's current balance\\r\\n        uint256 currentTokenHoldings = token.balanceOf(address(this));\\r\\n\\r\\n        // Only transfer out if we have enough of a balance to cover it (otherwise just accrue without sending)\\r\\n        if (_amount > 0 && _amount <= currentTokenHoldings) {\\r\\n            // Ensure we use SafeERC20 to revert even if the reward token isn't ERC20 compliant\\r\\n            token.safeTransfer(_user, _amount);\\r\\n            return 0;\\r\\n        } else {\\r\\n            // If we've hit here it means we weren't able to emit the reward and we should emit an event\\r\\n            // instead of failing.\\r\\n            emit InsufficientTokensToEmit(_user, _rewardToken, _amount);\\r\\n\\r\\n            // By default, return the same amount as what's left over to send, we accrue reward but don't send them out\\r\\n            return _amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe23b83c3d136ae8c15324bf6593909e0eed335382c810a3a0681aa74dc9941cf\",\"license\":\"BSD-3-Clause\"},\"contracts/rewards/MultiRewardDistributorCommon.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"../KToken.sol\\\";\\r\\n\\r\\n// The commonly structures and events for the MultiRewardDistributor\\r\\ninterface MultiRewardDistributorCommon {\\r\\n    struct MarketConfig {\\r\\n        // The owner/admin of the emission config\\r\\n        address owner;\\r\\n        // The emission token\\r\\n        address emissionToken;\\r\\n        // Scheduled to end at this time\\r\\n        uint endTime;\\r\\n        // Supplier global state\\r\\n        uint224 supplyGlobalIndex;\\r\\n        uint32 supplyGlobalTimestamp;\\r\\n        // Borrower global state\\r\\n        uint224 borrowGlobalIndex;\\r\\n        uint32 borrowGlobalTimestamp;\\r\\n        uint supplyEmissionsPerSec;\\r\\n        uint borrowEmissionsPerSec;\\r\\n    }\\r\\n\\r\\n    struct MarketEmissionConfig {\\r\\n        MarketConfig config;\\r\\n        mapping(address => uint) supplierIndices;\\r\\n        mapping(address => uint) supplierRewardsAccrued;\\r\\n        mapping(address => uint) borrowerIndices;\\r\\n        mapping(address => uint) borrowerRewardsAccrued;\\r\\n    }\\r\\n\\r\\n    struct RewardInfo {\\r\\n        address emissionToken;\\r\\n        uint totalAmount;\\r\\n        uint supplySide;\\r\\n        uint borrowSide;\\r\\n    }\\r\\n\\r\\n    struct IndexUpdate {\\r\\n        uint224 newIndex;\\r\\n        uint32 newTimestamp;\\r\\n    }\\r\\n\\r\\n    struct MTokenData {\\r\\n        uint kTokenBalance;\\r\\n        uint borrowBalanceStored;\\r\\n    }\\r\\n\\r\\n    struct RewardWithMToken {\\r\\n        address kToken;\\r\\n        RewardInfo[] rewards;\\r\\n    }\\r\\n\\r\\n    // Global index updates\\r\\n    event GlobalSupplyIndexUpdated(\\r\\n        KToken kToken,\\r\\n        address emissionToken,\\r\\n        uint newSupplyIndex,\\r\\n        uint32 newSupplyGlobalTimestamp\\r\\n    );\\r\\n    event GlobalBorrowIndexUpdated(\\r\\n        KToken kToken,\\r\\n        address emissionToken,\\r\\n        uint newIndex,\\r\\n        uint32 newTimestamp\\r\\n    );\\r\\n\\r\\n    // Reward Disbursal\\r\\n    event DisbursedSupplierRewards(\\r\\n        KToken indexed kToken,\\r\\n        address indexed supplier,\\r\\n        address indexed emissionToken,\\r\\n        uint totalAccrued\\r\\n    );\\r\\n    event DisbursedBorrowerRewards(\\r\\n        KToken indexed kToken,\\r\\n        address indexed borrower,\\r\\n        address indexed emissionToken,\\r\\n        uint totalAccrued\\r\\n    );\\r\\n\\r\\n    // Admin update events\\r\\n    event NewConfigCreated(\\r\\n        KToken indexed kToken,\\r\\n        address indexed owner,\\r\\n        address indexed emissionToken,\\r\\n        uint supplySpeed,\\r\\n        uint borrowSpeed,\\r\\n        uint endTime\\r\\n    );\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n    event NewEmissionCap(uint oldEmissionCap, uint newEmissionCap);\\r\\n    event NewEmissionConfigOwner(\\r\\n        KToken indexed kToken,\\r\\n        address indexed emissionToken,\\r\\n        address currentOwner,\\r\\n        address newOwner\\r\\n    );\\r\\n    event NewRewardEndTime(\\r\\n        KToken indexed kToken,\\r\\n        address indexed emissionToken,\\r\\n        uint currentEndTime,\\r\\n        uint newEndTime\\r\\n    );\\r\\n    event NewSupplyRewardSpeed(\\r\\n        KToken indexed kToken,\\r\\n        address indexed emissionToken,\\r\\n        uint oldRewardSpeed,\\r\\n        uint newRewardSpeed\\r\\n    );\\r\\n    event NewBorrowRewardSpeed(\\r\\n        KToken indexed kToken,\\r\\n        address indexed emissionToken,\\r\\n        uint oldRewardSpeed,\\r\\n        uint newRewardSpeed\\r\\n    );\\r\\n    event FundsRescued(address token, uint amount);\\r\\n\\r\\n    // Pause guardian stuff\\r\\n    event RewardsPaused();\\r\\n    event RewardsUnpaused();\\r\\n\\r\\n    // Errors\\r\\n    event InsufficientTokensToEmit(\\r\\n        address payable user,\\r\\n        address rewardToken,\\r\\n        uint amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xb942ff65acd11470c9ce2035b70b39ec45e144c68aa2589bd2da81acdae74694\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556144b1806100326000396000f3fe608060405234801561001057600080fd5b50600436106103985760003560e01c80636d154ea5116101e9578063bb82aa5e1161010f578063dbc7779b116100ad578063e87554461161007c578063e87554461461089c578063eabe7d91146108a5578063ede4edd0146108b8578063f851a440146108cb57600080fd5b8063dbc7779b14610850578063dce1544914610863578063dcfbc0c714610876578063e4028eee1461088957600080fd5b8063c488847b116100e9578063c488847b146107ef578063d02f735114610817578063d279c1911461082a578063da3d454c1461083d57600080fd5b8063bb82aa5e146107a9578063bdcdc258146107bc578063c2998238146107cf57600080fd5b8063929fe9a111610187578063ac0b0bb711610156578063ac0b0bb714610772578063acc2166a14610786578063b0772d0b14610799578063b88a802f146107a157600080fd5b8063929fe9a1146106eb578063a76b3fda1461072c578063a979f0c51461073f578063abfceffc1461075257600080fd5b80637dc0d1d0116101c35780637dc0d1d01461066d57806387f76303146106805780638e8f294b146106945780638ebf6364146106d857600080fd5b80636d154ea514610621578063731f0c2b14610644578063796b89b91461066757600080fd5b80633bcf7ec1116102ce57806351dff9891161026c5780635ec88c791161023b5780635ec88c79146105d55780635f5af1aa146105e85780635fc7e71e146105fb578063607ef6c11461060e57600080fd5b806351dff9891461058957806352d84d1e1461059c57806355ee1fe1146105af5780635c254d11146105c257600080fd5b80634e79238f116102a85780634e79238f146105225780634ef4c3e1146105505780634fd42e171461056357806351a485e41461057657600080fd5b80633bcf7ec1146104e65780634a584432146104f95780634ada90af1461051957600080fd5b806324a3d6221161033b578063317b0b7711610315578063317b0b771461049a5780633685ffe7146104ad57806338b8f4c3146104c0578063391957d7146104d357600080fd5b806324a3d6221461046157806326782247146104745780632d70db781461048757600080fd5b806318c882a51161037757806318c882a5146103fd5780631d504dc61461041057806321af45691461042357806324008a621461044e57600080fd5b80627e3dd21461039d57806302c3bcbb146103ba578063114b9d19146103e8575b600080fd5b6103a5600181565b60405190151581526020015b60405180910390f35b6103da6103c8366004613c1d565b60116020526000908152604090205481565b6040519081526020016103b1565b6103fb6103f6366004613d8b565b6108de565b005b6103a561040b366004613e14565b610c0c565b6103fb61041e366004613c1d565b610d45565b600d54610436906001600160a01b031681565b6040516001600160a01b0390911681526020016103b1565b6103da61045c366004613e4d565b610ec3565b600954610436906001600160a01b031681565b600154610436906001600160a01b031681565b6103a5610495366004613e9e565b610f01565b6103da6104a8366004613ebb565b610ff1565b6103fb6104bb366004613ed4565b611098565b6103fb6104ce366004613c1d565b611100565b6103fb6104e1366004613c1d565b6111cb565b6103a56104f4366004613e14565b61128e565b6103da610507366004613c1d565b600e6020526000908152604090205481565b6103da60065481565b610535610530366004613f24565b6113b8565b604080519384526020840192909252908201526060016103b1565b6103da61055e366004613f6a565b6113f8565b6103da610571366004613ebb565b61165d565b6103fb610584366004613ff7565b6116ba565b6103fb610597366004613f24565b611898565b6104366105aa366004613ebb565b6118ed565b6103da6105bd366004613c1d565b611917565b6103fb6105d0366004613c1d565b611990565b6105356105e3366004613c1d565b611a33565b6103da6105f6366004613c1d565b611a6e565b6103da610609366004614063565b611ae7565b6103fb61061c366004613ff7565b611c41565b6103a561062f366004613c1d565b600b6020526000908152604090205460ff1681565b6103a5610652366004613c1d565b600a6020526000908152604090205460ff1681565b426103da565b600454610436906001600160a01b031681565b6009546103a590600160a01b900460ff1681565b6106c16106a2366004613c1d565b6008602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016103b1565b6103a56106e6366004613e9e565b611e16565b6103a56106f93660046140c7565b6001600160a01b038082166000908152600860209081526040808320938616835260029093019052205460ff1692915050565b6103da61073a366004613c1d565b611efd565b601054610436906001600160a01b031681565b610765610760366004613c1d565b612058565b6040516103b191906140f5565b6009546103a590600160a81b900460ff1681565b601254610436906001600160a01b031681565b6107656120ce565b6103fb612130565b600254610436906001600160a01b031681565b6103da6107ca366004613e4d565b612196565b6107e26107dd366004614142565b612224565b6040516103b19190614177565b6108026107fd366004613f6a565b6122ec565b604080519283526020830191909152016103b1565b6103da610825366004614063565b61250a565b6103fb610838366004613c1d565b612692565b6103da61084b366004613f6a565b6126f4565b6103fb61085e3660046141af565b612a48565b6104366108713660046141af565b612bba565b600354610436906001600160a01b031681565b6103da6108973660046141af565b612bf2565b6103da60055481565b6103da6108b3366004613f6a565b612d84565b6103da6108c6366004613c1d565b612da1565b600054610436906001600160a01b031681565b6012546001600160a01b03166109455760405162461bcd60e51b815260206004820152602160248201527f4e6f20726577617264206469737472696275746f7220636f6e666967757265646044820152602160f81b60648201526084015b60405180910390fd5b60005b8351811015610c05576000848281518110610965576109656141db565b6020908102919091018101516001600160a01b0381166000908152600890925260409091205490915060ff166109d55760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b604482015260640161093c565b821515600103610ae457601254604051638220d7cf60e01b81526001600160a01b03838116600483015290911690638220d7cf90602401600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b5050505060005b8651811015610ae25760125487516001600160a01b03909116906310d47dc79084908a9085908110610a7557610a756141db565b602002602001015160016040518463ffffffff1660e01b8152600401610a9d939291906141f1565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050508080610ada9061422b565b915050610a41565b505b831515600103610bf25760125460405162c823eb60e11b81526001600160a01b0383811660048301529091169063019047d690602401600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b5050505060005b8651811015610bf05760125487516001600160a01b03909116906314f557739084908a9085908110610b8357610b836141db565b602002602001015160016040518463ffffffff1660e01b8152600401610bab939291906141f1565b600060405180830381600087803b158015610bc557600080fd5b505af1158015610bd9573d6000803e3d6000fd5b505050508080610be89061422b565b915050610b4f565b505b5080610bfd8161422b565b915050610948565b5050505050565b6001600160a01b03821660009081526008602052604081205460ff16610c445760405162461bcd60e51b815260040161093c90614244565b6009546001600160a01b0316331480610c6757506000546001600160a01b031633145b610c835760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480610c9e57506001821515145b610cba5760405162461bcd60e51b815260040161093c906142d3565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da79190614303565b6001600160a01b0316336001600160a01b031614610e175760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b606482015260840161093c565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b9190614320565b15610ec05760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015260640161093c565b50565b6001600160a01b03841660009081526008602052604081205460ff16610eeb57506009610ef9565b610ef58584613106565b5060005b949350505050565b6009546000906001600160a01b0316331480610f2757506000546001600160a01b031633145b610f435760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480610f5e57506001821515145b610f7a5760405162461bcd60e51b815260040161093c906142d3565b60098054831515600160a81b0260ff60a81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de090610fe59084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b0316331461104c5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f7200604482015260640161093c565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110ce576110ce6141db565b60200260200101906001600160a01b031690816001600160a01b0316815250506110fb81836001806108de565b505050565b6000546001600160a01b031633146111695760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420737570706c792063617020677560448201526530b93234b0b760d11b606482015260840161093c565b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fb0d3622c24ac9bd967d8f37a25808b3e668fe7ed4f3075bbe82842d3e287c04491015b60405180910390a15050565b6000546001600160a01b031633146112345760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b606482015260840161093c565b600d80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e2991016111bf565b6001600160a01b03821660009081526008602052604081205460ff166112c65760405162461bcd60e51b815260040161093c90614244565b6009546001600160a01b03163314806112e957506000546001600160a01b031633145b6113055760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b031633148061132057506001821515145b61133c5760405162461bcd60e51b815260040161093c906142d3565b6001600160a01b0383166000818152600a6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610d34565b6000806000806000806113cd8a8a8a8a613183565b9250925092508260118111156113e5576113e5614339565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600a602052604081205460ff16156114525760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b604482015260640161093c565b6001600160a01b03841660009081526008602052604090205460ff1661147c5760095b9050611091565b6001600160a01b0384166000908152601160205260409020548015611647576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190614320565b90506000866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190614320565b90506000876001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190614320565b905060006115e26115dc85856134b3565b836134e9565b905060006115f082896134b3565b90508581106116415760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015260640161093c565b50505050505b6116518585613523565b60005b95945050505050565b600080546001600160a01b0316331461167c57610d3f6001600b613569565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169101611086565b6000546001600160a01b03163314806116dd57506010546001600160a01b031633145b6117475760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220737570706c792063617020677561726469616044820152746e2063616e2073657420737570706c79206361707360581b606482015260840161093c565b8281811580159061175757508082145b6117935760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015260640161093c565b60005b8281101561188f578484828181106117b0576117b06141db565b90506020020135601160008989858181106117cd576117cd6141db565b90506020020160208101906117e29190613c1d565b6001600160a01b0316815260208101919091526040016000205586868281811061180e5761180e6141db565b90506020020160208101906118239190613c1d565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061185f5761185f6141db565b9050602002013560405161187591815260200190565b60405180910390a2806118878161422b565b915050611796565b50505050505050565b801580156118a65750600082115b156118e75760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015260640161093c565b50505050565b600c81815481106118fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461193657610d3f60016010613569565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e229101611086565b6000546001600160a01b031633146119d95760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161093c565b601280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f8ddca872a7a62d68235cff1a03badc845dc3007cfaa6145379f7bf3452ecb9b991016111bf565b600080600080600080611a4a876000806000613183565b925092509250826011811115611a6257611a62614339565b97919650945092505050565b600080546001600160a01b03163314611a8d57610d3f60016013613569565b600980546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9101611086565b6001600160a01b03851660009081526008602052604081205460ff161580611b2857506001600160a01b03851660009081526008602052604090205460ff16155b15611b375760095b9050611654565b600080611b43856135e2565b91935090915060009050826011811115611b5f57611b5f614339565b14611b7f57816011811115611b7657611b76614339565b92505050611654565b80600003611b8e576003611b76565b6040516395dd919360e01b81526001600160a01b038681166004830152600091908a16906395dd919390602401602060405180830381865afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190614320565b90506000611c1a604051806020016040528060055481525083613602565b905080861115611c31576011945050505050611654565b5060009998505050505050505050565b6000546001600160a01b0316331480611c645750600d546001600160a01b031633145b611cce5760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b606482015260840161093c565b82818115801590611cde57508082145b611d1a5760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015260640161093c565b60005b8281101561188f57848482818110611d3757611d376141db565b90506020020135600e6000898985818110611d5457611d546141db565b9050602002016020810190611d699190613c1d565b6001600160a01b03168152602081019190915260400160002055868682818110611d9557611d956141db565b9050602002016020810190611daa9190613c1d565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611de657611de66141db565b90506020020135604051611dfc91815260200190565b60405180910390a280611e0e8161422b565b915050611d1d565b6009546000906001600160a01b0316331480611e3c57506000546001600160a01b031633145b611e585760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480611e7357506001821515145b611e8f5760405162461bcd60e51b815260040161093c906142d3565b60098054831515600160a01b0260ff60a01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de090610fe59084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b600080546001600160a01b03163314611f1c57610d3f60016012613569565b6001600160a01b03821660009081526008602052604090205460ff1615611f4957610d3f600a6011613569565b816001600160a01b03166329d9109c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab919061434f565b611feb5760405162461bcd60e51b815260206004820152601160248201527026bab9ba1031329030b71025aa37b5b2b760791b604482015260640161093c565b6001600160a01b0382166000908152600860205260408120805460ff19166001908117825581019190915561201f8361361a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f90602001611086565b6001600160a01b03811660009081526007602090815260408083208054825181850281018501909352808352606094938301828280156120c157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120a3575b5093979650505050505050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561212657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612108575b5050505050905090565b61219433600c80548060200260200160405190810160405280929190818152602001828054801561218a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161216c575b5050505050611098565b565b600954600090600160a01b900460ff16156121e85760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b604482015260640161093c565b60006121f5868685613702565b90508015612204579050610ef9565b61220e8686613523565b6122188685613523565b60009695505050505050565b805160609060008167ffffffffffffffff81111561224457612244613c3a565b60405190808252806020026020018201604052801561226d578160200160208202803683370190505b50905060005b828110156122e457600085828151811061228f5761228f6141db565b602002602001015190506122a381336137ba565b60118111156122b4576122b4614339565b8383815181106122c6576122c66141db565b602090810291909101015250806122dc8161422b565b915050612273565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa15801561233f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123639190614320565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190614320565b90508115806123e6575080155b156123fa57600d6000935093505050612502565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245e9190614320565b905060006124786040518060200160405280600081525090565b6040805160208082018352600080835283518083018552908152835180830185526006548152845192830190945288825291926124b4916138ae565b92506124dc6040518060200160405280888152506040518060200160405280888152506138ae565b91506124e883836138f6565b90506124f4818b613602565b600099509750505050505050505b935093915050565b600954600090600160a81b900460ff16156125595760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b604482015260640161093c565b6001600160a01b03861660009081526008602052604090205460ff16158061259a57506001600160a01b03851660009081526008602052604090205460ff16155b156125a6576009611b30565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126089190614303565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561264f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126739190614303565b6001600160a01b031614612688576002611b30565b61220e8684613523565b610ec081600c80548060200260200160405190810160405280929190818152602001828054801561218a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161216c575050505050611098565b6001600160a01b0383166000908152600b602052604081205460ff16156127505760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b604482015260640161093c565b6001600160a01b03841660009081526008602052604090205460ff16612777576009611475565b6001600160a01b038085166000908152600860209081526040808320938716835260029093019052205460ff1661287457336001600160a01b038516146127f85760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329035aa37b5b2b760591b604482015260640161093c565b600061280433856137ba565b9050600081601181111561281a5761281a614339565b146128395780601181111561283157612831614339565b915050611091565b6001600160a01b038086166000908152600860209081526040808320938816835260029093019052205460ff166128725761287261436c565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa1580156128c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e49190614320565b6000036128f257600d611475565b6001600160a01b0384166000908152600e602052604090205480156129d7576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129759190614320565b9050600061298382866134b3565b90508281106129d45760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015260640161093c565b50505b6000806129e78688600088613183565b91935090915060009050826011811115612a0357612a03614339565b14612a2457816011811115612a1a57612a1a614339565b9350505050611091565b8015612a31576004612a1a565b612a3b8787613106565b6000979650505050505050565b6000546001600160a01b03163314612a915760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161093c565b8160018201612b81576000546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a0823190602401602060405180830381865afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190614320565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b6020604051808303816000875af1158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061434f565b60005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529082169063a9059cbb90604401612b3e565b60076020528160005260406000208181548110612bd657600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b03163314612c1857612c1160016006613569565b9050610d3f565b6001600160a01b0383166000908152600860205260409020805460ff16612c4d57612c4560096007613569565b915050610d3f565b60408051602080820183528582528251908101909252670c7d713b49da0000825290612c7b81835190511090565b15612c9657612c8c60066008613569565b9350505050610d3f565b8415801590612d1257506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d109190614320565b155b15612d2357612c8c600d6009613569565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b600080612d92858585613702565b90508015611647579050611091565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015612df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e149190614382565b5092509250925082600014612e795760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b606482015260840161093c565b8015612e9557612e8b600c6002613569565b9695505050505050565b6000612ea2873385613702565b90508015612ec257612eb7600e600383613930565b979650505050505050565b6001600160a01b0385166000908152600860209081526040808320338452600281019092529091205460ff16612f0057600098975050505050505050565b3360009081526002820160209081526040808320805460ff191690556007825280832080548251818502810185019093528083529192909190830182828015612f7257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f54575b5050835193945083925060009150505b82811015612fd657896001600160a01b0316848281518110612fa657612fa66141db565b60200260200101516001600160a01b031603612fc457809150612fd6565b80612fce8161422b565b915050612f82565b50818110612fe657612fe661436c565b33600090815260076020526040902080548190613005906001906143b8565b81548110613015576130156141db565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110613045576130456141db565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613083576130836143cb565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906130ec908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b6012546001600160a01b03161561317f576012546040516356e3af2960e11b81526001600160a01b039091169063adc75e529061314c90859085906000906004016141f1565b600060405180830381600087803b15801561316657600080fd5b505af115801561317a573d6000803e3d6000fd5b505050505b5050565b6000806000613190613b66565b6001600160a01b0388166000908152600760209081526040808320805482518185028101850190935280835284938301828280156131f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116131d9575b5050505050905060005b815181101561345d57600082828151811061321e5761321e6141db565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132979190614382565b608089015260608801526040870152935083156132c357600f60008097509750975050505050506113ee565b60408051602080820183526001600160a01b0384811660008181526008845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c9190614320565b60a0860181905260000361338f57600d60008097509750975050505050506113ee565b604080516020810190915260a0860151815261010086015260c085015160e08601516133c9916133be916138ae565b8661010001516138ae565b6101208601819052604086015186516133e39291906139a8565b8552610100850151606086015160208701516134009291906139a8565b60208601526001600160a01b03808c169082160361344a5761342c8561012001518b87602001516139a8565b60208601819052610100860151613444918b906139a8565b60208601525b50806134558161422b565b915050613201565b5060208301518351111561348e576020830151835160009161347e916143b8565b60009550955095505050506113ee565b600080846000015185602001516134a591906143b8565b9550955095505050506113ee565b60006110918383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506139c9565b60006110918383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250613a03565b6012546001600160a01b03161561317f57601254604051637076c88b60e11b81526001600160a01b039091169063e0ed91169061314c90859085906000906004016141f1565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561359e5761359e614339565b8360148111156135b0576135b0614339565b60408051928352602083019190915260009082015260600160405180910390a182601181111561109157611091614339565b60008060006135f5846000806000613183565b9250925092509193909250565b60008061360f8484613a32565b9050610ef981613a5a565b60005b600c548110156136af57816001600160a01b0316600c8281548110613644576136446141db565b6000918252602090912001546001600160a01b03160361369d5760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015260640161093c565b806136a78161422b565b91505061361d565b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526008602052604081205460ff16613729576009611475565b6001600160a01b038085166000908152600860209081526040808320938716835260029093019052205460ff16613761576000611475565b6000806137718587866000613183565b9193509091506000905082601181111561378d5761378d614339565b146137ad578160118111156137a4576137a4614339565b92505050611091565b80156122185760046137a4565b6001600160a01b0382166000908152600860205260408120805460ff166137e5576009915050610d3f565b6001600160a01b038316600090815260028201602052604090205460ff161515600103613816576000915050610d3f565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600783528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a76400006138e386600001518660000151613a72565b6138ed91906143e1565b90529392505050565b60408051602081019091526000815260405180602001604052806138ed6139298660000151670de0b6b3a7640000613a72565b8551613ab4565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111561396557613965614339565b84601481111561397757613977614339565b604080519283526020830191909152810184905260600160405180910390a1836011811115610ef957610ef9614339565b6000806139b58585613a32565b90506116546139c382613a5a565b846134b3565b6000806139d68486614403565b905082858210156139fa5760405162461bcd60e51b815260040161093c9190614416565b50949350505050565b60008184841115613a275760405162461bcd60e51b815260040161093c9190614416565b50610ef983856143b8565b60408051602081019091526000815260405180602001604052806138ed856000015185613a72565b8051600090610d3f90670de0b6b3a7640000906143e1565b600061109183836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613ae7565b600061109183836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613b3a565b6000831580613af4575082155b15613b0157506000611091565b6000613b0d8486614464565b905083613b1a86836143e1565b1483906139fa5760405162461bcd60e51b815260040161093c9190614416565b60008183613b5b5760405162461bcd60e51b815260040161093c9190614416565b50610ef983856143e1565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001613bb26040518060200160405280600081525090565b8152602001613bcd6040518060200160405280600081525090565b8152602001613be86040518060200160405280600081525090565b8152602001613c036040518060200160405280600081525090565b905290565b6001600160a01b0381168114610ec057600080fd5b600060208284031215613c2f57600080fd5b813561109181613c08565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613c7957613c79613c3a565b604052919050565b600067ffffffffffffffff821115613c9b57613c9b613c3a565b5060051b60200190565b600082601f830112613cb657600080fd5b81356020613ccb613cc683613c81565b613c50565b82815260059290921b84018101918181019086841115613cea57600080fd5b8286015b84811015613d0e578035613d0181613c08565b8352918301918301613cee565b509695505050505050565b600082601f830112613d2a57600080fd5b81356020613d3a613cc683613c81565b82815260059290921b84018101918181019086841115613d5957600080fd5b8286015b84811015613d0e578035613d7081613c08565b8352918301918301613d5d565b8015158114610ec057600080fd5b60008060008060808587031215613da157600080fd5b843567ffffffffffffffff80821115613db957600080fd5b613dc588838901613ca5565b95506020870135915080821115613ddb57600080fd5b50613de887828801613d19565b9350506040850135613df981613d7d565b91506060850135613e0981613d7d565b939692955090935050565b60008060408385031215613e2757600080fd5b8235613e3281613c08565b91506020830135613e4281613d7d565b809150509250929050565b60008060008060808587031215613e6357600080fd5b8435613e6e81613c08565b93506020850135613e7e81613c08565b92506040850135613e8e81613c08565b9396929550929360600135925050565b600060208284031215613eb057600080fd5b813561109181613d7d565b600060208284031215613ecd57600080fd5b5035919050565b60008060408385031215613ee757600080fd5b8235613ef281613c08565b9150602083013567ffffffffffffffff811115613f0e57600080fd5b613f1a85828601613d19565b9150509250929050565b60008060008060808587031215613f3a57600080fd5b8435613f4581613c08565b93506020850135613f5581613c08565b93969395505050506040820135916060013590565b600080600060608486031215613f7f57600080fd5b8335613f8a81613c08565b92506020840135613f9a81613c08565b929592945050506040919091013590565b60008083601f840112613fbd57600080fd5b50813567ffffffffffffffff811115613fd557600080fd5b6020830191508360208260051b8501011115613ff057600080fd5b9250929050565b6000806000806040858703121561400d57600080fd5b843567ffffffffffffffff8082111561402557600080fd5b61403188838901613fab565b9096509450602087013591508082111561404a57600080fd5b5061405787828801613fab565b95989497509550505050565b600080600080600060a0868803121561407b57600080fd5b853561408681613c08565b9450602086013561409681613c08565b935060408601356140a681613c08565b925060608601356140b681613c08565b949793965091946080013592915050565b600080604083850312156140da57600080fd5b82356140e581613c08565b91506020830135613e4281613c08565b6020808252825182820181905260009190848201906040850190845b818110156141365783516001600160a01b031683529284019291840191600101614111565b50909695505050505050565b60006020828403121561415457600080fd5b813567ffffffffffffffff81111561416b57600080fd5b610ef984828501613ca5565b6020808252825182820181905260009190848201906040850190845b8181101561413657835183529284019291840191600101614193565b600080604083850312156141c257600080fd5b82356141cd81613c08565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152901515604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001820161423d5761423d614215565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561431557600080fd5b815161109181613c08565b60006020828403121561433257600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561436157600080fd5b815161109181613d7d565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561439857600080fd5b505082516020840151604085015160609095015191969095509092509050565b81810381811115610d3f57610d3f614215565b634e487b7160e01b600052603160045260246000fd5b6000826143fe57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d3f57610d3f614215565b600060208083528351808285015260005b8181101561444357858101830151858201604001528201614427565b506000604082860101526040601f19601f8301168501019250505092915050565b8082028115828204841417610d3f57610d3f61421556fea2646970667358221220f319bb7d0eb0e589289a0dfaac9f5455134b56819e5f08aa62492ef5c265ec5a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103985760003560e01c80636d154ea5116101e9578063bb82aa5e1161010f578063dbc7779b116100ad578063e87554461161007c578063e87554461461089c578063eabe7d91146108a5578063ede4edd0146108b8578063f851a440146108cb57600080fd5b8063dbc7779b14610850578063dce1544914610863578063dcfbc0c714610876578063e4028eee1461088957600080fd5b8063c488847b116100e9578063c488847b146107ef578063d02f735114610817578063d279c1911461082a578063da3d454c1461083d57600080fd5b8063bb82aa5e146107a9578063bdcdc258146107bc578063c2998238146107cf57600080fd5b8063929fe9a111610187578063ac0b0bb711610156578063ac0b0bb714610772578063acc2166a14610786578063b0772d0b14610799578063b88a802f146107a157600080fd5b8063929fe9a1146106eb578063a76b3fda1461072c578063a979f0c51461073f578063abfceffc1461075257600080fd5b80637dc0d1d0116101c35780637dc0d1d01461066d57806387f76303146106805780638e8f294b146106945780638ebf6364146106d857600080fd5b80636d154ea514610621578063731f0c2b14610644578063796b89b91461066757600080fd5b80633bcf7ec1116102ce57806351dff9891161026c5780635ec88c791161023b5780635ec88c79146105d55780635f5af1aa146105e85780635fc7e71e146105fb578063607ef6c11461060e57600080fd5b806351dff9891461058957806352d84d1e1461059c57806355ee1fe1146105af5780635c254d11146105c257600080fd5b80634e79238f116102a85780634e79238f146105225780634ef4c3e1146105505780634fd42e171461056357806351a485e41461057657600080fd5b80633bcf7ec1146104e65780634a584432146104f95780634ada90af1461051957600080fd5b806324a3d6221161033b578063317b0b7711610315578063317b0b771461049a5780633685ffe7146104ad57806338b8f4c3146104c0578063391957d7146104d357600080fd5b806324a3d6221461046157806326782247146104745780632d70db781461048757600080fd5b806318c882a51161037757806318c882a5146103fd5780631d504dc61461041057806321af45691461042357806324008a621461044e57600080fd5b80627e3dd21461039d57806302c3bcbb146103ba578063114b9d19146103e8575b600080fd5b6103a5600181565b60405190151581526020015b60405180910390f35b6103da6103c8366004613c1d565b60116020526000908152604090205481565b6040519081526020016103b1565b6103fb6103f6366004613d8b565b6108de565b005b6103a561040b366004613e14565b610c0c565b6103fb61041e366004613c1d565b610d45565b600d54610436906001600160a01b031681565b6040516001600160a01b0390911681526020016103b1565b6103da61045c366004613e4d565b610ec3565b600954610436906001600160a01b031681565b600154610436906001600160a01b031681565b6103a5610495366004613e9e565b610f01565b6103da6104a8366004613ebb565b610ff1565b6103fb6104bb366004613ed4565b611098565b6103fb6104ce366004613c1d565b611100565b6103fb6104e1366004613c1d565b6111cb565b6103a56104f4366004613e14565b61128e565b6103da610507366004613c1d565b600e6020526000908152604090205481565b6103da60065481565b610535610530366004613f24565b6113b8565b604080519384526020840192909252908201526060016103b1565b6103da61055e366004613f6a565b6113f8565b6103da610571366004613ebb565b61165d565b6103fb610584366004613ff7565b6116ba565b6103fb610597366004613f24565b611898565b6104366105aa366004613ebb565b6118ed565b6103da6105bd366004613c1d565b611917565b6103fb6105d0366004613c1d565b611990565b6105356105e3366004613c1d565b611a33565b6103da6105f6366004613c1d565b611a6e565b6103da610609366004614063565b611ae7565b6103fb61061c366004613ff7565b611c41565b6103a561062f366004613c1d565b600b6020526000908152604090205460ff1681565b6103a5610652366004613c1d565b600a6020526000908152604090205460ff1681565b426103da565b600454610436906001600160a01b031681565b6009546103a590600160a01b900460ff1681565b6106c16106a2366004613c1d565b6008602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016103b1565b6103a56106e6366004613e9e565b611e16565b6103a56106f93660046140c7565b6001600160a01b038082166000908152600860209081526040808320938616835260029093019052205460ff1692915050565b6103da61073a366004613c1d565b611efd565b601054610436906001600160a01b031681565b610765610760366004613c1d565b612058565b6040516103b191906140f5565b6009546103a590600160a81b900460ff1681565b601254610436906001600160a01b031681565b6107656120ce565b6103fb612130565b600254610436906001600160a01b031681565b6103da6107ca366004613e4d565b612196565b6107e26107dd366004614142565b612224565b6040516103b19190614177565b6108026107fd366004613f6a565b6122ec565b604080519283526020830191909152016103b1565b6103da610825366004614063565b61250a565b6103fb610838366004613c1d565b612692565b6103da61084b366004613f6a565b6126f4565b6103fb61085e3660046141af565b612a48565b6104366108713660046141af565b612bba565b600354610436906001600160a01b031681565b6103da6108973660046141af565b612bf2565b6103da60055481565b6103da6108b3366004613f6a565b612d84565b6103da6108c6366004613c1d565b612da1565b600054610436906001600160a01b031681565b6012546001600160a01b03166109455760405162461bcd60e51b815260206004820152602160248201527f4e6f20726577617264206469737472696275746f7220636f6e666967757265646044820152602160f81b60648201526084015b60405180910390fd5b60005b8351811015610c05576000848281518110610965576109656141db565b6020908102919091018101516001600160a01b0381166000908152600890925260409091205490915060ff166109d55760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b604482015260640161093c565b821515600103610ae457601254604051638220d7cf60e01b81526001600160a01b03838116600483015290911690638220d7cf90602401600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b5050505060005b8651811015610ae25760125487516001600160a01b03909116906310d47dc79084908a9085908110610a7557610a756141db565b602002602001015160016040518463ffffffff1660e01b8152600401610a9d939291906141f1565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050508080610ada9061422b565b915050610a41565b505b831515600103610bf25760125460405162c823eb60e11b81526001600160a01b0383811660048301529091169063019047d690602401600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b5050505060005b8651811015610bf05760125487516001600160a01b03909116906314f557739084908a9085908110610b8357610b836141db565b602002602001015160016040518463ffffffff1660e01b8152600401610bab939291906141f1565b600060405180830381600087803b158015610bc557600080fd5b505af1158015610bd9573d6000803e3d6000fd5b505050508080610be89061422b565b915050610b4f565b505b5080610bfd8161422b565b915050610948565b5050505050565b6001600160a01b03821660009081526008602052604081205460ff16610c445760405162461bcd60e51b815260040161093c90614244565b6009546001600160a01b0316331480610c6757506000546001600160a01b031633145b610c835760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480610c9e57506001821515145b610cba5760405162461bcd60e51b815260040161093c906142d3565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da79190614303565b6001600160a01b0316336001600160a01b031614610e175760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b606482015260840161093c565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b9190614320565b15610ec05760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015260640161093c565b50565b6001600160a01b03841660009081526008602052604081205460ff16610eeb57506009610ef9565b610ef58584613106565b5060005b949350505050565b6009546000906001600160a01b0316331480610f2757506000546001600160a01b031633145b610f435760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480610f5e57506001821515145b610f7a5760405162461bcd60e51b815260040161093c906142d3565b60098054831515600160a81b0260ff60a81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de090610fe59084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b0316331461104c5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f7200604482015260640161093c565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110ce576110ce6141db565b60200260200101906001600160a01b031690816001600160a01b0316815250506110fb81836001806108de565b505050565b6000546001600160a01b031633146111695760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420737570706c792063617020677560448201526530b93234b0b760d11b606482015260840161093c565b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fb0d3622c24ac9bd967d8f37a25808b3e668fe7ed4f3075bbe82842d3e287c04491015b60405180910390a15050565b6000546001600160a01b031633146112345760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b606482015260840161093c565b600d80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e2991016111bf565b6001600160a01b03821660009081526008602052604081205460ff166112c65760405162461bcd60e51b815260040161093c90614244565b6009546001600160a01b03163314806112e957506000546001600160a01b031633145b6113055760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b031633148061132057506001821515145b61133c5760405162461bcd60e51b815260040161093c906142d3565b6001600160a01b0383166000818152600a6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610d34565b6000806000806000806113cd8a8a8a8a613183565b9250925092508260118111156113e5576113e5614339565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600a602052604081205460ff16156114525760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b604482015260640161093c565b6001600160a01b03841660009081526008602052604090205460ff1661147c5760095b9050611091565b6001600160a01b0384166000908152601160205260409020548015611647576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190614320565b90506000866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190614320565b90506000876001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190614320565b905060006115e26115dc85856134b3565b836134e9565b905060006115f082896134b3565b90508581106116415760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015260640161093c565b50505050505b6116518585613523565b60005b95945050505050565b600080546001600160a01b0316331461167c57610d3f6001600b613569565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169101611086565b6000546001600160a01b03163314806116dd57506010546001600160a01b031633145b6117475760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220737570706c792063617020677561726469616044820152746e2063616e2073657420737570706c79206361707360581b606482015260840161093c565b8281811580159061175757508082145b6117935760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015260640161093c565b60005b8281101561188f578484828181106117b0576117b06141db565b90506020020135601160008989858181106117cd576117cd6141db565b90506020020160208101906117e29190613c1d565b6001600160a01b0316815260208101919091526040016000205586868281811061180e5761180e6141db565b90506020020160208101906118239190613c1d565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061185f5761185f6141db565b9050602002013560405161187591815260200190565b60405180910390a2806118878161422b565b915050611796565b50505050505050565b801580156118a65750600082115b156118e75760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015260640161093c565b50505050565b600c81815481106118fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461193657610d3f60016010613569565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e229101611086565b6000546001600160a01b031633146119d95760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161093c565b601280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f8ddca872a7a62d68235cff1a03badc845dc3007cfaa6145379f7bf3452ecb9b991016111bf565b600080600080600080611a4a876000806000613183565b925092509250826011811115611a6257611a62614339565b97919650945092505050565b600080546001600160a01b03163314611a8d57610d3f60016013613569565b600980546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9101611086565b6001600160a01b03851660009081526008602052604081205460ff161580611b2857506001600160a01b03851660009081526008602052604090205460ff16155b15611b375760095b9050611654565b600080611b43856135e2565b91935090915060009050826011811115611b5f57611b5f614339565b14611b7f57816011811115611b7657611b76614339565b92505050611654565b80600003611b8e576003611b76565b6040516395dd919360e01b81526001600160a01b038681166004830152600091908a16906395dd919390602401602060405180830381865afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190614320565b90506000611c1a604051806020016040528060055481525083613602565b905080861115611c31576011945050505050611654565b5060009998505050505050505050565b6000546001600160a01b0316331480611c645750600d546001600160a01b031633145b611cce5760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b606482015260840161093c565b82818115801590611cde57508082145b611d1a5760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015260640161093c565b60005b8281101561188f57848482818110611d3757611d376141db565b90506020020135600e6000898985818110611d5457611d546141db565b9050602002016020810190611d699190613c1d565b6001600160a01b03168152602081019190915260400160002055868682818110611d9557611d956141db565b9050602002016020810190611daa9190613c1d565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611de657611de66141db565b90506020020135604051611dfc91815260200190565b60405180910390a280611e0e8161422b565b915050611d1d565b6009546000906001600160a01b0316331480611e3c57506000546001600160a01b031633145b611e585760405162461bcd60e51b815260040161093c9061428c565b6000546001600160a01b0316331480611e7357506001821515145b611e8f5760405162461bcd60e51b815260040161093c906142d3565b60098054831515600160a01b0260ff60a01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de090610fe59084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b600080546001600160a01b03163314611f1c57610d3f60016012613569565b6001600160a01b03821660009081526008602052604090205460ff1615611f4957610d3f600a6011613569565b816001600160a01b03166329d9109c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab919061434f565b611feb5760405162461bcd60e51b815260206004820152601160248201527026bab9ba1031329030b71025aa37b5b2b760791b604482015260640161093c565b6001600160a01b0382166000908152600860205260408120805460ff19166001908117825581019190915561201f8361361a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f90602001611086565b6001600160a01b03811660009081526007602090815260408083208054825181850281018501909352808352606094938301828280156120c157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120a3575b5093979650505050505050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561212657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612108575b5050505050905090565b61219433600c80548060200260200160405190810160405280929190818152602001828054801561218a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161216c575b5050505050611098565b565b600954600090600160a01b900460ff16156121e85760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b604482015260640161093c565b60006121f5868685613702565b90508015612204579050610ef9565b61220e8686613523565b6122188685613523565b60009695505050505050565b805160609060008167ffffffffffffffff81111561224457612244613c3a565b60405190808252806020026020018201604052801561226d578160200160208202803683370190505b50905060005b828110156122e457600085828151811061228f5761228f6141db565b602002602001015190506122a381336137ba565b60118111156122b4576122b4614339565b8383815181106122c6576122c66141db565b602090810291909101015250806122dc8161422b565b915050612273565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa15801561233f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123639190614320565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190614320565b90508115806123e6575080155b156123fa57600d6000935093505050612502565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245e9190614320565b905060006124786040518060200160405280600081525090565b6040805160208082018352600080835283518083018552908152835180830185526006548152845192830190945288825291926124b4916138ae565b92506124dc6040518060200160405280888152506040518060200160405280888152506138ae565b91506124e883836138f6565b90506124f4818b613602565b600099509750505050505050505b935093915050565b600954600090600160a81b900460ff16156125595760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b604482015260640161093c565b6001600160a01b03861660009081526008602052604090205460ff16158061259a57506001600160a01b03851660009081526008602052604090205460ff16155b156125a6576009611b30565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126089190614303565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561264f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126739190614303565b6001600160a01b031614612688576002611b30565b61220e8684613523565b610ec081600c80548060200260200160405190810160405280929190818152602001828054801561218a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161216c575050505050611098565b6001600160a01b0383166000908152600b602052604081205460ff16156127505760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b604482015260640161093c565b6001600160a01b03841660009081526008602052604090205460ff16612777576009611475565b6001600160a01b038085166000908152600860209081526040808320938716835260029093019052205460ff1661287457336001600160a01b038516146127f85760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329035aa37b5b2b760591b604482015260640161093c565b600061280433856137ba565b9050600081601181111561281a5761281a614339565b146128395780601181111561283157612831614339565b915050611091565b6001600160a01b038086166000908152600860209081526040808320938816835260029093019052205460ff166128725761287261436c565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa1580156128c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e49190614320565b6000036128f257600d611475565b6001600160a01b0384166000908152600e602052604090205480156129d7576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129759190614320565b9050600061298382866134b3565b90508281106129d45760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015260640161093c565b50505b6000806129e78688600088613183565b91935090915060009050826011811115612a0357612a03614339565b14612a2457816011811115612a1a57612a1a614339565b9350505050611091565b8015612a31576004612a1a565b612a3b8787613106565b6000979650505050505050565b6000546001600160a01b03163314612a915760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161093c565b8160018201612b81576000546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a0823190602401602060405180830381865afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190614320565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b6020604051808303816000875af1158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061434f565b60005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529082169063a9059cbb90604401612b3e565b60076020528160005260406000208181548110612bd657600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b03163314612c1857612c1160016006613569565b9050610d3f565b6001600160a01b0383166000908152600860205260409020805460ff16612c4d57612c4560096007613569565b915050610d3f565b60408051602080820183528582528251908101909252670c7d713b49da0000825290612c7b81835190511090565b15612c9657612c8c60066008613569565b9350505050610d3f565b8415801590612d1257506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d109190614320565b155b15612d2357612c8c600d6009613569565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b600080612d92858585613702565b90508015611647579050611091565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015612df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e149190614382565b5092509250925082600014612e795760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b606482015260840161093c565b8015612e9557612e8b600c6002613569565b9695505050505050565b6000612ea2873385613702565b90508015612ec257612eb7600e600383613930565b979650505050505050565b6001600160a01b0385166000908152600860209081526040808320338452600281019092529091205460ff16612f0057600098975050505050505050565b3360009081526002820160209081526040808320805460ff191690556007825280832080548251818502810185019093528083529192909190830182828015612f7257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f54575b5050835193945083925060009150505b82811015612fd657896001600160a01b0316848281518110612fa657612fa66141db565b60200260200101516001600160a01b031603612fc457809150612fd6565b80612fce8161422b565b915050612f82565b50818110612fe657612fe661436c565b33600090815260076020526040902080548190613005906001906143b8565b81548110613015576130156141db565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110613045576130456141db565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613083576130836143cb565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906130ec908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b6012546001600160a01b03161561317f576012546040516356e3af2960e11b81526001600160a01b039091169063adc75e529061314c90859085906000906004016141f1565b600060405180830381600087803b15801561316657600080fd5b505af115801561317a573d6000803e3d6000fd5b505050505b5050565b6000806000613190613b66565b6001600160a01b0388166000908152600760209081526040808320805482518185028101850190935280835284938301828280156131f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116131d9575b5050505050905060005b815181101561345d57600082828151811061321e5761321e6141db565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132979190614382565b608089015260608801526040870152935083156132c357600f60008097509750975050505050506113ee565b60408051602080820183526001600160a01b0384811660008181526008845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c9190614320565b60a0860181905260000361338f57600d60008097509750975050505050506113ee565b604080516020810190915260a0860151815261010086015260c085015160e08601516133c9916133be916138ae565b8661010001516138ae565b6101208601819052604086015186516133e39291906139a8565b8552610100850151606086015160208701516134009291906139a8565b60208601526001600160a01b03808c169082160361344a5761342c8561012001518b87602001516139a8565b60208601819052610100860151613444918b906139a8565b60208601525b50806134558161422b565b915050613201565b5060208301518351111561348e576020830151835160009161347e916143b8565b60009550955095505050506113ee565b600080846000015185602001516134a591906143b8565b9550955095505050506113ee565b60006110918383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506139c9565b60006110918383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250613a03565b6012546001600160a01b03161561317f57601254604051637076c88b60e11b81526001600160a01b039091169063e0ed91169061314c90859085906000906004016141f1565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561359e5761359e614339565b8360148111156135b0576135b0614339565b60408051928352602083019190915260009082015260600160405180910390a182601181111561109157611091614339565b60008060006135f5846000806000613183565b9250925092509193909250565b60008061360f8484613a32565b9050610ef981613a5a565b60005b600c548110156136af57816001600160a01b0316600c8281548110613644576136446141db565b6000918252602090912001546001600160a01b03160361369d5760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015260640161093c565b806136a78161422b565b91505061361d565b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526008602052604081205460ff16613729576009611475565b6001600160a01b038085166000908152600860209081526040808320938716835260029093019052205460ff16613761576000611475565b6000806137718587866000613183565b9193509091506000905082601181111561378d5761378d614339565b146137ad578160118111156137a4576137a4614339565b92505050611091565b80156122185760046137a4565b6001600160a01b0382166000908152600860205260408120805460ff166137e5576009915050610d3f565b6001600160a01b038316600090815260028201602052604090205460ff161515600103613816576000915050610d3f565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600783528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a76400006138e386600001518660000151613a72565b6138ed91906143e1565b90529392505050565b60408051602081019091526000815260405180602001604052806138ed6139298660000151670de0b6b3a7640000613a72565b8551613ab4565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111561396557613965614339565b84601481111561397757613977614339565b604080519283526020830191909152810184905260600160405180910390a1836011811115610ef957610ef9614339565b6000806139b58585613a32565b90506116546139c382613a5a565b846134b3565b6000806139d68486614403565b905082858210156139fa5760405162461bcd60e51b815260040161093c9190614416565b50949350505050565b60008184841115613a275760405162461bcd60e51b815260040161093c9190614416565b50610ef983856143b8565b60408051602081019091526000815260405180602001604052806138ed856000015185613a72565b8051600090610d3f90670de0b6b3a7640000906143e1565b600061109183836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613ae7565b600061109183836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613b3a565b6000831580613af4575082155b15613b0157506000611091565b6000613b0d8486614464565b905083613b1a86836143e1565b1483906139fa5760405162461bcd60e51b815260040161093c9190614416565b60008183613b5b5760405162461bcd60e51b815260040161093c9190614416565b50610ef983856143e1565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001613bb26040518060200160405280600081525090565b8152602001613bcd6040518060200160405280600081525090565b8152602001613be86040518060200160405280600081525090565b8152602001613c036040518060200160405280600081525090565b905290565b6001600160a01b0381168114610ec057600080fd5b600060208284031215613c2f57600080fd5b813561109181613c08565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613c7957613c79613c3a565b604052919050565b600067ffffffffffffffff821115613c9b57613c9b613c3a565b5060051b60200190565b600082601f830112613cb657600080fd5b81356020613ccb613cc683613c81565b613c50565b82815260059290921b84018101918181019086841115613cea57600080fd5b8286015b84811015613d0e578035613d0181613c08565b8352918301918301613cee565b509695505050505050565b600082601f830112613d2a57600080fd5b81356020613d3a613cc683613c81565b82815260059290921b84018101918181019086841115613d5957600080fd5b8286015b84811015613d0e578035613d7081613c08565b8352918301918301613d5d565b8015158114610ec057600080fd5b60008060008060808587031215613da157600080fd5b843567ffffffffffffffff80821115613db957600080fd5b613dc588838901613ca5565b95506020870135915080821115613ddb57600080fd5b50613de887828801613d19565b9350506040850135613df981613d7d565b91506060850135613e0981613d7d565b939692955090935050565b60008060408385031215613e2757600080fd5b8235613e3281613c08565b91506020830135613e4281613d7d565b809150509250929050565b60008060008060808587031215613e6357600080fd5b8435613e6e81613c08565b93506020850135613e7e81613c08565b92506040850135613e8e81613c08565b9396929550929360600135925050565b600060208284031215613eb057600080fd5b813561109181613d7d565b600060208284031215613ecd57600080fd5b5035919050565b60008060408385031215613ee757600080fd5b8235613ef281613c08565b9150602083013567ffffffffffffffff811115613f0e57600080fd5b613f1a85828601613d19565b9150509250929050565b60008060008060808587031215613f3a57600080fd5b8435613f4581613c08565b93506020850135613f5581613c08565b93969395505050506040820135916060013590565b600080600060608486031215613f7f57600080fd5b8335613f8a81613c08565b92506020840135613f9a81613c08565b929592945050506040919091013590565b60008083601f840112613fbd57600080fd5b50813567ffffffffffffffff811115613fd557600080fd5b6020830191508360208260051b8501011115613ff057600080fd5b9250929050565b6000806000806040858703121561400d57600080fd5b843567ffffffffffffffff8082111561402557600080fd5b61403188838901613fab565b9096509450602087013591508082111561404a57600080fd5b5061405787828801613fab565b95989497509550505050565b600080600080600060a0868803121561407b57600080fd5b853561408681613c08565b9450602086013561409681613c08565b935060408601356140a681613c08565b925060608601356140b681613c08565b949793965091946080013592915050565b600080604083850312156140da57600080fd5b82356140e581613c08565b91506020830135613e4281613c08565b6020808252825182820181905260009190848201906040850190845b818110156141365783516001600160a01b031683529284019291840191600101614111565b50909695505050505050565b60006020828403121561415457600080fd5b813567ffffffffffffffff81111561416b57600080fd5b610ef984828501613ca5565b6020808252825182820181905260009190848201906040850190845b8181101561413657835183529284019291840191600101614193565b600080604083850312156141c257600080fd5b82356141cd81613c08565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152901515604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001820161423d5761423d614215565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561431557600080fd5b815161109181613c08565b60006020828403121561433257600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561436157600080fd5b815161109181613d7d565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561439857600080fd5b505082516020840151604085015160609095015191969095509092509050565b81810381811115610d3f57610d3f614215565b634e487b7160e01b600052603160045260246000fd5b6000826143fe57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d3f57610d3f614215565b600060208083528351808285015260005b8181101561444357858101830151858201604001528201614427565b506000604082860101526040601f19601f8301168501019250505092915050565b8082028115828204841417610d3f57610d3f61421556fea2646970667358221220f319bb7d0eb0e589289a0dfaac9f5455134b56819e5f08aa62492ef5c265ec5a64736f6c63430008140033",
  "devdoc": {
    "author": "Kawa",
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_rescueFunds(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to sweep, uint.max means everything",
          "_tokenAddress": "The address of the token to transfer"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "kToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "kTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.",
        "params": {
          "kTokens": "The addresses of the markets (tokens) to change the supply caps for",
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setRewardDistributor(address)": {
        "params": {
          "newRewardDistributor": "The address of the new Reward Distributor"
        }
      },
      "_setSupplyCapGuardian(address)": {
        "params": {
          "newSupplyCapGuardian": "The address of the new Supply Cap Guardian"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "kToken": "The address of the market (token) to list"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "kToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "kToken": "The kToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "claimReward(address)": {
        "params": {
          "holder": "The address to claim rewards for"
        }
      },
      "claimReward(address,address[])": {
        "params": {
          "holder": "The address to claim rewards for",
          "kTokens": "The list of markets to claim rewards in"
        }
      },
      "claimReward(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim earned by borrowing",
          "holders": "The addresses to claim for",
          "kTokens": "The list of markets to claim in",
          "suppliers": "Whether or not to claim earned by supplying"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "kTokens": "The list of addresses of the kToken markets to be enabled"
        },
        "returns": {
          "_0": "Success indicator for whether each corresponding market was entered"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "kTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "kTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "kTokenBorrowed": "Asset which was borrowed by the borrower",
          "kTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in kToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of kTokenBorrowed underlying to convert into kTokenCollateral tokens",
          "kTokenBorrowed": "The address of the borrowed kToken",
          "kTokenCollateral": "The address of the collateral kToken"
        },
        "returns": {
          "_0": "(errorCode, number of kTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "kToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "kToken": "The market to verify the redeem against",
          "redeemTokens": "The number of kTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "kToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "kToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "kTokenBorrowed": "Asset which was borrowed by the borrower",
          "kTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "kToken": "The market to verify the transfer against",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of kTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      }
    },
    "title": "Kawa's Comptroller Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "MarketExited(address,address)": {
        "notice": "Emitted when an account exits a market"
      },
      "MarketListed(address)": {
        "notice": "Emitted when an admin supports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a kToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor is changed by admin"
      },
      "NewLiquidationIncentive(uint256,uint256)": {
        "notice": "Emitted when liquidation incentive is changed by admin"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      },
      "NewRewardDistributor(address,address)": {
        "notice": "Emitted when reward distributor is changed"
      },
      "NewSupplyCap(address,uint256)": {
        "notice": "Emitted when supply cap for a kToken is changed"
      },
      "NewSupplyCapGuardian(address,address)": {
        "notice": "Emitted when supply cap guardian is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_rescueFunds(address,uint256)": {
        "notice": "Sweep ERC-20 tokens from the comptroller to the admin"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given kToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given kToken markets. Supplying that brings total supplies to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setRewardDistributor(address)": {
        "notice": "Admin function to change the Reward Distributor"
      },
      "_setSupplyCapGuardian(address)": {
        "notice": "Admin function to change the Supply Cap Guardian"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimReward()": {
        "notice": "Claim all the WELL accrued by holder in all markets"
      },
      "claimReward(address)": {
        "notice": "Claim all the rewards accrued by specified holder in all markets"
      },
      "claimReward(address,address[])": {
        "notice": "Claim all the rewards accrued by holder in the specified markets"
      },
      "claimReward(address[],address[],bool,bool)": {
        "notice": "Claim all rewards for a specified group of users, tokens, and market sides"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of kTokens -> Market metadata"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "rewardDistributor()": {
        "notice": "The Reward distributor used to emit protocol rewards"
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "supplyCapGuardian()": {
        "notice": "The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market."
      },
      "supplyCaps(address)": {
        "notice": "Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6414,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6417,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6420,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6423,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6430,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)18081"
      },
      {
        "astId": 6433,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6436,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6443,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_contract(KToken)15310)dyn_storage)"
      },
      {
        "astId": 6461,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Market)6455_storage)"
      },
      {
        "astId": 6464,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6466,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 6468,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 21,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 6472,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6476,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6481,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_contract(KToken)15310)dyn_storage"
      },
      {
        "astId": 6483,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 6487,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6497,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_locked",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6503,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "supplyCapGuardian",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 6508,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6512,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "rewardDistributor",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(MultiRewardDistributor)20398"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(KToken)15310)dyn_storage": {
        "base": "t_contract(KToken)15310",
        "encoding": "dynamic_array",
        "label": "contract KToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(KToken)15310": {
        "encoding": "inplace",
        "label": "contract KToken",
        "numberOfBytes": "20"
      },
      "t_contract(MultiRewardDistributor)20398": {
        "encoding": "inplace",
        "label": "contract MultiRewardDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)18081": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(KToken)15310)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract KToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(KToken)15310)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Market)6455_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerVXStorage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)6455_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)6455_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerVXStorage.Market",
        "members": [
          {
            "astId": 6446,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6449,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6454,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}