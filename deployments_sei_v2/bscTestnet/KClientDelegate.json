{
  "address": "0x154Bc88E42586c5958C02eF027e67035AeB50204",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "kTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldClientHub",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientHub",
          "type": "address"
        }
      ],
      "name": "NewCentralHub",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resignImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCentralHub",
          "type": "address"
        }
      ],
      "name": "_setCentralHub",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "centralHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract KTokenInterface",
          "name": "kTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x56482bfdf79d0ebf59936603b7ef40c0444dce29ae84f72f88b8488aa1538c37",
  "receipt": {
    "to": null,
    "from": "0x42f97fE9Eae657604d57C72A1362ab8a68088Afe",
    "contractAddress": "0x154Bc88E42586c5958C02eF027e67035AeB50204",
    "transactionIndex": 1,
    "gasUsed": "541702",
    "logsBloom": "0x
    "blockHash": "0xadd3e0292dd5c05634abe84e2f64fc70581713021bae81e4aae78a9f5376bdf4",
    "transactionHash": "0x56482bfdf79d0ebf59936603b7ef40c0444dce29ae84f72f88b8488aa1538c37",
    "logs": [],
    "blockNumber": 46791578,
    "cumulativeGasUsed": "634483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9daac8c254a967988052af59b161ce5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldClientHub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientHub\",\"type\":\"address\"}],\"name\":\"NewCentralHub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCentralHub\",\"type\":\"address\"}],\"name\":\"_setCentralHub\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"centralHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract KTokenInterface\",\"name\":\"kTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kawa\",\"kind\":\"dev\",\"methods\":{\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}}},\"title\":\"Kawa's KClientDelegate Contract\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewCentralHub(address,address)\":{\"notice\":\"Event emitted when the message hub is changed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"}},\"kind\":\"user\",\"methods\":{\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"centralHub()\":{\"notice\":\"MessageHub implementation's address\"},\"constructor\":{\"notice\":\"Construct an empty delegate\"},\"implementation()\":{\"notice\":\"Implementation address for this contract\"}},\"notice\":\"KTokens which wrap an EIP-20 underlying and are delegated to\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KClientDelegate.sol\":\"KClientDelegate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CentralHub/MessageInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract MessageInterface {\\r\\n    function sendMessage(\\r\\n        address sender,\\r\\n        bytes calldata payload\\r\\n    ) external payable virtual;\\r\\n\\r\\n    function calculateGas(\\r\\n        bytes memory payload\\r\\n    ) external view virtual returns (uint cost);\\r\\n}\\r\\n\\r\\nabstract contract CentralHubInterfae is MessageInterface {\\r\\n    function receiveMessage(\\r\\n        bytes calldata payload\\r\\n    ) external virtual;\\r\\n}\",\"keccak256\":\"0xb3dca3ca15b168e5c75ed6f75e5823fd4d2654cf3d3aba0bb17f1cbc2cccb3af\",\"license\":\"UNLICENSED\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(\\r\\n        address[] calldata kTokens\\r\\n    ) external virtual returns (uint[] memory);\\r\\n    function exitMarket(address kToken) external virtual returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function redeemAllowed(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    // Do not remove, still used by KToken\\r\\n    function redeemVerify(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemAmount,\\r\\n        uint redeemTokens\\r\\n    ) external pure virtual;\\r\\n\\r\\n    function borrowAllowed(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function transferAllowed(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint, uint);\\r\\n}\\r\\n\\r\\n// The hooks that were patched out of the comptroller to make room for the supply caps, if we need them\\r\\nabstract contract ComptrollerInterfaceWithAllVerificationHooks is\\r\\n    ComptrollerInterface\\r\\n{\\r\\n    function mintVerify(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount,\\r\\n        uint mintTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    // Included in ComptrollerInterface already\\r\\n    // function redeemVerify(address kToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowVerify(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual;\\r\\n\\r\\n    function repayBorrowVerify(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex\\r\\n    ) external virtual;\\r\\n\\r\\n    function liquidateBorrowVerify(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function seizeVerify(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function transferVerify(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ae39528ead57993b2652575ffa1457cbe8c1021be94cff255293da3e0dfdd39\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved\\r\\n     * @return success Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return remaining The number of tokens allowed to be spent\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x93af1d53aab720b15cf34b59c36bf6c9f692987f5a8dd4e5f1f133a4394f980c\",\"license\":\"BSD-3-Clause\"},\"contracts/KClient.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"./CentralHub/MessageInterfaces.sol\\\";\\r\\nimport \\\"./KTokenInterfaces.sol\\\";\\r\\n\\r\\n\\r\\ncontract KClient is KClientInterface {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external payable override {\\r\\n        bytes memory payload = abi.encode(\\r\\n            KErc20CrossChainInterface.mint.selector,\\r\\n            msg.sender,\\r\\n            mintAmount\\r\\n        );\\r\\n        MessageInterface(centralHub).sendMessage{value: msg.value - mintAmount}(\\r\\n            msg.sender,\\r\\n            payload\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function repayBorrow(uint repayAmount) external payable override {\\r\\n        bytes memory payload = abi.encode(\\r\\n            KErc20CrossChainInterface.repayBorrow.selector,\\r\\n            msg.sender,\\r\\n            repayAmount\\r\\n        );\\r\\n        MessageInterface(centralHub).sendMessage{value: msg.value - repayAmount}(\\r\\n            msg.sender,\\r\\n            payload\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external payable override {\\r\\n        bytes memory payload = abi.encode(\\r\\n            KErc20CrossChainInterface.repayBorrowBehalf.selector,\\r\\n            msg.sender,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        MessageInterface(centralHub).sendMessage{value: msg.value - repayAmount}(\\r\\n            msg.sender,\\r\\n            payload\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external payable override {\\r\\n        bytes memory payload = abi.encode(\\r\\n            KErc20CrossChainInterface.liquidateBorrow.selector,\\r\\n            msg.sender,\\r\\n            borrower,\\r\\n            repayAmount,\\r\\n            kTokenCollateral\\r\\n        );\\r\\n        MessageInterface(centralHub).sendMessage{value: msg.value - repayAmount}(\\r\\n            msg.sender,\\r\\n            payload\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** CentralHub Interface ***/\\r\\n\\r\\n    function releaseETH(\\r\\n        address payable recipient,\\r\\n        uint amount\\r\\n    ) external override returns (bool){\\r\\n        require(msg.sender == centralHub, \\\"Unauthorized\\\");\\r\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setCentralHub(address newCentralHub) external returns (bool){\\r\\n        require(msg.sender == admin, \\\"Unauthorized\\\");\\r\\n\\r\\n        address oldCentralHub = centralHub;\\r\\n        centralHub = newCentralHub;\\r\\n\\r\\n        emit NewCentralHub(\\r\\n            oldCentralHub,\\r\\n            centralHub\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x326da475cdba1ac634d736cfd98b23dd8b906720f455f9d9be1e4e95ad071142\",\"license\":\"AGPL-3.0\"},\"contracts/KClientDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./KTokenInterfaces.sol\\\";\\r\\nimport \\\"./KClient.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Kawa's KClientDelegate Contract\\r\\n * @notice KTokens which wrap an EIP-20 underlying and are delegated to\\r\\n * @author Kawa\\r\\n */\\r\\ncontract KClientDelegate is KClient, KDelegateInterface {\\r\\n    /**\\r\\n     * @notice Construct an empty delegate\\r\\n     */\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) public virtual override {\\r\\n        // Shh -- currently unused\\r\\n        data;\\r\\n\\r\\n        // Shh -- we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            implementation = address(0);\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            msg.sender == admin,\\r\\n            \\\"only the admin may call _becomeImplementation\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() public virtual override {\\r\\n        // Shh -- we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            implementation = address(0);\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            msg.sender == admin,\\r\\n            \\\"only the admin may call _resignImplementation\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeef90fc88f8735b4071e60b5f29a4cbabf92f64d337e4574d3f0d3911fb567fa\",\"license\":\"BSD-3-Clause\"},\"contracts/KTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./irm/InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./TokenErrorReporter.sol\\\";\\r\\n\\r\\ncontract KTokenStorage {\\r\\n    /// @dev Guard variable for re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @notice EIP-20 token name for this token\\r\\n    string public name;\\r\\n\\r\\n    /// @notice EIP-20 token symbol for this token\\r\\n    string public symbol;\\r\\n\\r\\n    /// @notice EIP-20 token decimals for this token\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /// @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    // @notice Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n\\r\\n    /// @notice Pending administrator for this contract\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /// @notice Contract which oversees inter-kToken operations\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /// @notice Model which tells what the current interest rate should be\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // @notice Initial exchange rate used when minting the first KTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /// @notice Fraction of interest currently set aside for reserves\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /// @notice Block number that interest was last accrued at\\r\\n    uint public accrualBlockTimestamp;\\r\\n\\r\\n    /// @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /// @notice Total amount of outstanding borrows of the underlying in this market\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /// @notice Total amount of reserves of the underlying held in this market\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping(address => uint) internal accountTokens;\\r\\n\\r\\n    /// @notice Approved token transfer amounts on behalf of others\\r\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // @notice Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /// @notice Share of seized collateral that is added to reserves\\r\\n    uint public protocolSeizeShareMantissa;\\r\\n}\\r\\n\\r\\nabstract contract KTokenInterface is KTokenStorage {\\r\\n    /// @notice Indicator that this is a KToken contract (for inspection)\\r\\n    bool public constant isKToken = true;\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /// @notice Event emitted when interest is accrued\\r\\n    event AccrueInterest(\\r\\n        uint cashPrior,\\r\\n        uint interestAccumulated,\\r\\n        uint borrowIndex,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when tokens are redeemed\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /// @notice Event emitted when underlying is borrowed\\r\\n    event Borrow(\\r\\n        address borrower,\\r\\n        uint borrowAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is changed\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /// @notice Event emitted when comptroller is changed\\r\\n    event NewComptroller(\\r\\n        ComptrollerInterface oldComptroller,\\r\\n        ComptrollerInterface newComptroller\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when interestRateModel is changed\\r\\n    event NewMarketInterestRateModel(\\r\\n        InterestRateModel oldInterestRateModel,\\r\\n        InterestRateModel newInterestRateModel\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserve factor is changed\\r\\n    event NewReserveFactor(\\r\\n        uint oldReserveFactorMantissa,\\r\\n        uint newReserveFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the protocol seize share is changed\\r\\n    event NewProtocolSeizeShare(\\r\\n        uint oldProtocolSeizeShareMantissa,\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are added\\r\\n    event ReservesAdded(\\r\\n        address benefactor,\\r\\n        uint addAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are reduced\\r\\n    event ReservesReduced(\\r\\n        address admin,\\r\\n        uint reduceAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice EIP20 Transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /// @notice EIP20 Approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view virtual returns (uint);\\r\\n    function balanceOf(address owner) external view virtual returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\r\\n    function getAccountSnapshot(\\r\\n        address account\\r\\n    ) external view virtual returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerTimestamp() external view virtual returns (uint);\\r\\n    function supplyRatePerTimestamp() external view virtual returns (uint);\\r\\n    function totalBorrowsCurrent() external virtual returns (uint);\\r\\n    function borrowBalanceCurrent(\\r\\n        address account\\r\\n    ) external virtual returns (uint);\\r\\n    function borrowBalanceStored(\\r\\n        address account\\r\\n    ) external view virtual returns (uint);\\r\\n    function exchangeRateCurrent() external virtual returns (uint);\\r\\n    function exchangeRateStored() external view virtual returns (uint);\\r\\n    function getCash() external view virtual returns (uint);\\r\\n    function accrueInterest() external virtual returns (uint);\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(\\r\\n        address payable newPendingAdmin\\r\\n    ) external virtual returns (uint);\\r\\n    function _acceptAdmin() external virtual returns (uint);\\r\\n    function _setComptroller(\\r\\n        ComptrollerInterface newComptroller\\r\\n    ) external virtual returns (uint);\\r\\n    function _setReserveFactor(\\r\\n        uint newReserveFactorMantissa\\r\\n    ) external virtual returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\r\\n    function _setInterestRateModel(\\r\\n        InterestRateModel newInterestRateModel\\r\\n    ) external virtual returns (uint);\\r\\n    function _setProtocolSeizeShare(\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\ncontract KErc20Storage {\\r\\n    /// @notice Underlying asset for this KToken\\r\\n    address public underlying;\\r\\n    /// @notice centralHub for this KToken\\r\\n    address public centralHub;\\r\\n}\\r\\n\\r\\nabstract contract KErc20BaseInterface is KErc20Storage {\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\r\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20Interface {\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external virtual returns (uint);\\r\\n    function mintWithPermit(\\r\\n        uint mintAmount,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20CrossChainInterface {\\r\\n    /*** MessageHub Interface ***/\\r\\n\\r\\n    function mint(\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(\\r\\n        address payer,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function redeem(uint redeemTokens) external payable virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external payable virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external payable virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setCentralHub(address newCentralHub) external virtual;\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewCentralHub(\\r\\n        address oldCentralHub,\\r\\n        address centralHub\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract KDelegationStorage {\\r\\n    /// @notice Implementation address for this contract\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract KDelegatorInterface is KDelegationStorage {\\r\\n    /// @notice Emitted when implementation is changed\\r\\n    event NewImplementation(\\r\\n        address oldImplementation,\\r\\n        address newImplementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(\\r\\n        address implementation_,\\r\\n        bool allowResign,\\r\\n        bytes memory becomeImplementationData\\r\\n    ) external virtual;\\r\\n}\\r\\n\\r\\nabstract contract KDelegateInterface is KDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) external virtual;\\r\\n\\r\\n    /// @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n    function _resignImplementation() external virtual;\\r\\n}\\r\\n\\r\\ncontract KClientStorage {\\r\\n\\r\\n    /// @notice MessageHub implementation's address\\r\\n    address public centralHub;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n}\\r\\n\\r\\nabstract contract KClientInterface is KClientStorage {\\r\\n    /*** User Interface ***/\\r\\n    function mint(uint mintAmount) external payable virtual;\\r\\n    function repayBorrow(uint repayAmount) external payable virtual;\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external payable virtual;\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external payable virtual;\\r\\n    function releaseETH(\\r\\n        address payable recipient,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewCentralHub(\\r\\n        address oldClientHub,\\r\\n        address clientHub\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x798baf2bb60e4247ce557443c9daa77a82d58968ffa675400cd9a0f739ff555c\",\"license\":\"BSD-3-Clause\"},\"contracts/TokenErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        SET_GAS_AMOUNT_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9214409e0b914b6ff5ef77e03ecefe0c9271d1e23d27c6dada7a8b1a1235ae17\",\"license\":\"BSD-3-Clause\"},\"contracts/irm/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Kawa's InterestRateModel Interface\\r\\n * @author Kawa\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @return The borrow rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @param reserveFactorMantissa The current reserve factor the market has\\r\\n     * @return The supply rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves,\\r\\n        uint reserveFactorMantissa\\r\\n    ) external view virtual returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x81db3c2dc31dd9eea2551206086f0c2ab90b150ca9febd1aa2cef5b1f351379d\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108d6806100206000396000f3fe6080604052600436106100a05760003560e01c8063897d69cc11610064578063897d69cc14610146578063a0712d6814610176578063a9fe66e714610189578063e8e71f0c146101a9578063f5e3c462146101c9578063f851a440146101dc57600080fd5b80630e752702146100ac578063153ab505146100c15780632608f818146100d657806356e67728146100e95780635c60da1b1461010957600080fd5b366100a757005b600080fd5b6100bf6100ba36600461066f565b6101fc565b005b3480156100cd57600080fd5b506100bf61029e565b6100bf6100e436600461069d565b610315565b3480156100f557600080fd5b506100bf6101043660046106df565b6103c0565b34801561011557600080fd5b50600254610129906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015257600080fd5b50610166610161366004610790565b610433565b604051901515815260200161013d565b6100bf61018436600461066f565b6104e5565b34801561019557600080fd5b50600054610129906001600160a01b031681565b3480156101b557600080fd5b506101666101c436600461069d565b610504565b6100bf6101d73660046107b4565b6105ad565b3480156101e857600080fd5b50600154610129906001600160a01b031681565b60405160009061021b9063157b6bd560e31b90339085906020016107f6565b60408051601f198184030181529190526000549091506001600160a01b031663bb5ddb0f6102498434610821565b33846040518463ffffffff1660e01b8152600401610268929190610842565b6000604051808303818588803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146103135760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084015b60405180910390fd5b565b60408051632c84352f60e11b602082015233818301526001600160a01b03848116606083015260808083018590528351808403909101815260a090920190925260005490911663bb5ddb0f61036a8434610821565b33846040518463ffffffff1660e01b8152600401610389929190610842565b6000604051808303818588803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b5050505050505050565b6001546001600160a01b031633146104305760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b606482015260840161030a565b50565b6001546000906001600160a01b0316331461047f5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161030a565b600080546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f240a204f75d8cd32854ef4f656ccf7e999a5f3192fbeaeb6a195c78a4cd56801910160405180910390a150600192915050565b60405160009061021b906340c10f1960e01b90339085906020016107f6565b600080546001600160a01b0316331461054e5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161030a565b6000836001600160a01b03168360405160006040518083038185875af1925050503d806000811461059b576040519150601f19603f3d011682016040523d82523d6000602084013e6105a0565b606091505b5090925050505b92915050565b60408051630c9fae0f60e31b602082015233918101919091526001600160a01b03808516606083015260808201849052821660a082015260009060c00160408051601f198184030181529190526000549091506001600160a01b031663bb5ddb0f6106188534610821565b33846040518463ffffffff1660e01b8152600401610637929190610842565b6000604051808303818588803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050505050505050565b60006020828403121561068157600080fd5b5035919050565b6001600160a01b038116811461043057600080fd5b600080604083850312156106b057600080fd5b82356106bb81610688565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156106f157600080fd5b813567ffffffffffffffff8082111561070957600080fd5b818401915084601f83011261071d57600080fd5b81358181111561072f5761072f6106c9565b604051601f8201601f19908116603f01168101908382118183101715610757576107576106c9565b8160405282815287602084870101111561077057600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156107a257600080fd5b81356107ad81610688565b9392505050565b6000806000606084860312156107c957600080fd5b83356107d481610688565b92506020840135915060408401356107eb81610688565b809150509250925092565b6001600160e01b03199390931683526001600160a01b03919091166020830152604082015260600190565b818103818111156105a757634e487b7160e01b600052601160045260246000fd5b60018060a01b038316815260006020604081840152835180604085015260005b8181101561087e57858101830151858201606001528201610862565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220dd1dc5f9f39374186a5b587365bf88387448e6dd2b2eaaf1ccb87b130e63bbcb64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063897d69cc11610064578063897d69cc14610146578063a0712d6814610176578063a9fe66e714610189578063e8e71f0c146101a9578063f5e3c462146101c9578063f851a440146101dc57600080fd5b80630e752702146100ac578063153ab505146100c15780632608f818146100d657806356e67728146100e95780635c60da1b1461010957600080fd5b366100a757005b600080fd5b6100bf6100ba36600461066f565b6101fc565b005b3480156100cd57600080fd5b506100bf61029e565b6100bf6100e436600461069d565b610315565b3480156100f557600080fd5b506100bf6101043660046106df565b6103c0565b34801561011557600080fd5b50600254610129906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015257600080fd5b50610166610161366004610790565b610433565b604051901515815260200161013d565b6100bf61018436600461066f565b6104e5565b34801561019557600080fd5b50600054610129906001600160a01b031681565b3480156101b557600080fd5b506101666101c436600461069d565b610504565b6100bf6101d73660046107b4565b6105ad565b3480156101e857600080fd5b50600154610129906001600160a01b031681565b60405160009061021b9063157b6bd560e31b90339085906020016107f6565b60408051601f198184030181529190526000549091506001600160a01b031663bb5ddb0f6102498434610821565b33846040518463ffffffff1660e01b8152600401610268929190610842565b6000604051808303818588803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146103135760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084015b60405180910390fd5b565b60408051632c84352f60e11b602082015233818301526001600160a01b03848116606083015260808083018590528351808403909101815260a090920190925260005490911663bb5ddb0f61036a8434610821565b33846040518463ffffffff1660e01b8152600401610389929190610842565b6000604051808303818588803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b5050505050505050565b6001546001600160a01b031633146104305760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b606482015260840161030a565b50565b6001546000906001600160a01b0316331461047f5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161030a565b600080546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f240a204f75d8cd32854ef4f656ccf7e999a5f3192fbeaeb6a195c78a4cd56801910160405180910390a150600192915050565b60405160009061021b906340c10f1960e01b90339085906020016107f6565b600080546001600160a01b0316331461054e5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161030a565b6000836001600160a01b03168360405160006040518083038185875af1925050503d806000811461059b576040519150601f19603f3d011682016040523d82523d6000602084013e6105a0565b606091505b5090925050505b92915050565b60408051630c9fae0f60e31b602082015233918101919091526001600160a01b03808516606083015260808201849052821660a082015260009060c00160408051601f198184030181529190526000549091506001600160a01b031663bb5ddb0f6106188534610821565b33846040518463ffffffff1660e01b8152600401610637929190610842565b6000604051808303818588803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050505050505050565b60006020828403121561068157600080fd5b5035919050565b6001600160a01b038116811461043057600080fd5b600080604083850312156106b057600080fd5b82356106bb81610688565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156106f157600080fd5b813567ffffffffffffffff8082111561070957600080fd5b818401915084601f83011261071d57600080fd5b81358181111561072f5761072f6106c9565b604051601f8201601f19908116603f01168101908382118183101715610757576107576106c9565b8160405282815287602084870101111561077057600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156107a257600080fd5b81356107ad81610688565b9392505050565b6000806000606084860312156107c957600080fd5b83356107d481610688565b92506020840135915060408401356107eb81610688565b809150509250925092565b6001600160e01b03199390931683526001600160a01b03919091166020830152604082015260600190565b818103818111156105a757634e487b7160e01b600052601160045260246000fd5b60018060a01b038316815260006020604081840152835180604085015260005b8181101561087e57858101830151858201606001528201610862565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220dd1dc5f9f39374186a5b587365bf88387448e6dd2b2eaaf1ccb87b130e63bbcb64736f6c63430008140033",
  "devdoc": {
    "author": "Kawa",
    "kind": "dev",
    "methods": {
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      }
    },
    "title": "Kawa's KClientDelegate Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewCentralHub(address,address)": {
        "notice": "Event emitted when the message hub is changed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      }
    },
    "kind": "user",
    "methods": {
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_resignImplementation()": {
        "notice": "Called by the delegator on a delegate to forfeit its responsibility"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "centralHub()": {
        "notice": "MessageHub implementation's address"
      },
      "constructor": {
        "notice": "Construct an empty delegate"
      },
      "implementation()": {
        "notice": "Implementation address for this contract"
      }
    },
    "notice": "KTokens which wrap an EIP-20 underlying and are delegated to",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21722,
        "contract": "contracts/KClientDelegate.sol:KClientDelegate",
        "label": "centralHub",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21725,
        "contract": "contracts/KClientDelegate.sol:KClientDelegate",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 21685,
        "contract": "contracts/KClientDelegate.sol:KClientDelegate",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      }
    }
  }
}