{
  "language": "Solidity",
  "sources": {
    "contracts/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\nabstract contract ComptrollerInterface {\r\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n    bool public constant isComptroller = true;\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    function enterMarkets(\r\n        address[] calldata kTokens\r\n    ) external virtual returns (uint[] memory);\r\n    function exitMarket(address kToken) external virtual returns (uint);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(\r\n        address kToken,\r\n        address minter,\r\n        uint mintAmount\r\n    ) external virtual returns (uint);\r\n\r\n    function redeemAllowed(\r\n        address kToken,\r\n        address redeemer,\r\n        uint redeemTokens\r\n    ) external virtual returns (uint);\r\n\r\n    // Do not remove, still used by KToken\r\n    function redeemVerify(\r\n        address kToken,\r\n        address redeemer,\r\n        uint redeemAmount,\r\n        uint redeemTokens\r\n    ) external pure virtual;\r\n\r\n    function borrowAllowed(\r\n        address kToken,\r\n        address borrower,\r\n        uint borrowAmount\r\n    ) external virtual returns (uint);\r\n\r\n    function repayBorrowAllowed(\r\n        address kToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external virtual returns (uint);\r\n\r\n    function liquidateBorrowAllowed(\r\n        address kTokenBorrowed,\r\n        address kTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external view virtual returns (uint);\r\n\r\n    function seizeAllowed(\r\n        address kTokenCollateral,\r\n        address kTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens\r\n    ) external virtual returns (uint);\r\n\r\n    function transferAllowed(\r\n        address kToken,\r\n        address src,\r\n        address dst,\r\n        uint transferTokens\r\n    ) external virtual returns (uint);\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address kTokenBorrowed,\r\n        address kTokenCollateral,\r\n        uint repayAmount\r\n    ) external view virtual returns (uint, uint);\r\n}\r\n\r\n// The hooks that were patched out of the comptroller to make room for the supply caps, if we need them\r\nabstract contract ComptrollerInterfaceWithAllVerificationHooks is\r\n    ComptrollerInterface\r\n{\r\n    function mintVerify(\r\n        address kToken,\r\n        address minter,\r\n        uint mintAmount,\r\n        uint mintTokens\r\n    ) external virtual;\r\n\r\n    // Included in ComptrollerInterface already\r\n    // function redeemVerify(address kToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\r\n\r\n    function borrowVerify(\r\n        address kToken,\r\n        address borrower,\r\n        uint borrowAmount\r\n    ) external virtual;\r\n\r\n    function repayBorrowVerify(\r\n        address kToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex\r\n    ) external virtual;\r\n\r\n    function liquidateBorrowVerify(\r\n        address kTokenBorrowed,\r\n        address kTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens\r\n    ) external virtual;\r\n\r\n    function seizeVerify(\r\n        address kTokenCollateral,\r\n        address kTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens\r\n    ) external virtual;\r\n\r\n    function transferVerify(\r\n        address kToken,\r\n        address src,\r\n        address dst,\r\n        uint transferTokens\r\n    ) external virtual;\r\n}\r\n"
    },
    "contracts/EIP20NonStandardInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @title EIP20NonStandardInterface\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface EIP20NonStandardInterface {\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     */\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved\r\n     * @return success Whether or not the approval succeeded\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return remaining The number of tokens allowed to be spent\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n}\r\n"
    },
    "contracts/irm/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @title Kawa's InterestRateModel Interface\r\n * @author Kawa\r\n */\r\nabstract contract InterestRateModel {\r\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n    bool public constant isInterestRateModel = true;\r\n\r\n    /**\r\n     * @notice Calculates the current borrow interest rate per timestamp\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @return The borrow rate per timestamp (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getBorrowRate(\r\n        uint cash,\r\n        uint borrows,\r\n        uint reserves\r\n    ) external view virtual returns (uint);\r\n\r\n    /**\r\n     * @notice Calculates the current supply interest rate per timestamp\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @param reserveFactorMantissa The current reserve factor the market has\r\n     * @return The supply rate per timestamp (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getSupplyRate(\r\n        uint cash,\r\n        uint borrows,\r\n        uint reserves,\r\n        uint reserveFactorMantissa\r\n    ) external view virtual returns (uint);\r\n}\r\n"
    },
    "contracts/KClientDelegator.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\nimport \"./KTokenInterfaces.sol\";\r\n\r\n/**\r\n * @title Kawa's KClientDelegator.sol Contract\r\n * @notice KTokens which wrap an EIP-20 underlying and delegate to an implementation\r\n * @author Kawa\r\n */\r\ncontract KClientDelegator is KClientInterface, KDelegatorInterface {\r\n\r\n    constructor(\r\n        address messageHub_,\r\n        address payable admin_,\r\n        address implementation_,\r\n        bytes memory becomeImplementationData\r\n    ) {\r\n        // Creator of the contract is admin during initialization\r\n        admin = payable(msg.sender);\r\n\r\n        // First delegate gets to set message hub to the delegator\r\n        delegateTo(\r\n            implementation_,\r\n            abi.encodeWithSignature(\r\n                \"_setMessageHub(address)\",\r\n                messageHub_\r\n            )\r\n        );\r\n\r\n        // New implementations always get set via the settor (post-initialize)\r\n        _setImplementation(implementation_, false, becomeImplementationData);\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives kTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     */\r\n    function mint(\r\n        uint mintAmount\r\n    ) external payable override {\r\n//        bytes memory data =\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"mint(uint256)\",\r\n                mintAmount\r\n            )\r\n        );\r\n//        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or uint.max for the full outstanding amount\r\n     */\r\n    function repayBorrow(\r\n        uint repayAmount\r\n    ) external payable override {\r\n//        bytes memory data =\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"repayBorrow(uint256)\",\r\n                repayAmount\r\n            )\r\n        );\r\n//        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or uint.max for the full outstanding amount\r\n     */\r\n    function repayBorrowBehalf(\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external payable override {\r\n//        bytes memory data =\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"repayBorrowBehalf(address,uint256)\",\r\n                borrower,\r\n                repayAmount\r\n            )\r\n        );\r\n//        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this kToken to be liquidated\r\n     * @param kTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     */\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint repayAmount,\r\n        KTokenInterface kTokenCollateral\r\n    ) external payable override {\r\n//        bytes memory data =\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"liquidateBorrow(address,uint256,address)\",\r\n                borrower,\r\n                repayAmount,\r\n                kTokenCollateral\r\n            )\r\n        );\r\n//        return abi.decode(data, (uint));\r\n    }\r\n\r\n    function releaseETH(\r\n        address payable recipient,\r\n        uint amount\r\n    ) external override returns (bool) {\r\n        bytes memory data = delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"releaseETH(address,uint256)\",\r\n                recipient,\r\n                amount\r\n            )\r\n        );\r\n        return abi.decode(data, (bool));\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(\r\n        address implementation_,\r\n        bool allowResign,\r\n        bytes memory becomeImplementationData\r\n    ) public override {\r\n        require(\r\n            msg.sender == admin,\r\n            \"KClientDelegator::_setImplementation: Caller must be admin\"\r\n        );\r\n\r\n        if (allowResign) {\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\"_resignImplementation()\")\r\n            );\r\n        }\r\n\r\n        address oldImplementation = implementation;\r\n        implementation = implementation_;\r\n\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"_becomeImplementation(bytes)\",\r\n                becomeImplementationData\r\n            )\r\n        );\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @param newPendingAdmin New pending admin.\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setPendingAdmin(\r\n        address payable newPendingAdmin\r\n    ) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"_setPendingAdmin(address)\",\r\n                newPendingAdmin\r\n            )\r\n        );\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n     * @dev Admin function for pending admin to accept role and update admin\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _acceptAdmin() external returns (uint) {\r\n        bytes memory data = delegateToImplementation(\r\n            abi.encodeWithSignature(\"_acceptAdmin()\")\r\n        );\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    function _setMessageHub(address newMessageHub) external returns (uint)  {\r\n        bytes memory data = delegateToImplementation(\r\n            abi.encodeWithSignature(\"_setMessageHub(address)\", newMessageHub)\r\n        );\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Internal method to delegate execution to another contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param callee The contract to delegatecall\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateTo(\r\n        address callee,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToImplementation(\r\n        bytes memory data\r\n    ) public returns (bytes memory) {\r\n        return delegateTo(implementation, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToViewImplementation(\r\n        bytes memory data\r\n    ) public view returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = address(this).staticcall(\r\n            abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data)\r\n        );\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return abi.decode(returnData, (bytes));\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     */\r\n    fallback() external payable {\r\n        require(\r\n            msg.value == 0,\r\n            \"KClientDelegator:fallback: cannot send value to fallback\"\r\n        );\r\n\r\n        // delegate all other functions to current implementation\r\n        (bool success,) = implementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize())\r\n\r\n            switch success\r\n            case 0 {\r\n                revert(free_mem_ptr, returndatasize())\r\n            }\r\n            default {\r\n                return (free_mem_ptr, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/KTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./irm/InterestRateModel.sol\";\r\nimport \"./EIP20NonStandardInterface.sol\";\r\nimport \"./TokenErrorReporter.sol\";\r\n\r\ncontract KTokenStorage {\r\n    /// @dev Guard variable for re-entrancy checks\r\n    bool internal _notEntered;\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    string public name;\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public symbol;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public decimals;\r\n\r\n    /// @notice Maximum borrow rate that can ever be applied (.0005% / block)\r\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n    // @notice Maximum fraction of interest that can be set aside for reserves\r\n    uint internal constant reserveFactorMaxMantissa = 1e18;\r\n\r\n    /// @notice Administrator for this contract\r\n    address payable public admin;\r\n\r\n    /// @notice Pending administrator for this contract\r\n    address payable public pendingAdmin;\r\n\r\n    /// @notice Contract which oversees inter-kToken operations\r\n    ComptrollerInterface public comptroller;\r\n\r\n    /// @notice Model which tells what the current interest rate should be\r\n    InterestRateModel public interestRateModel;\r\n\r\n    // @notice Initial exchange rate used when minting the first KTokens (used when totalSupply = 0)\r\n    uint internal initialExchangeRateMantissa;\r\n\r\n    /// @notice Fraction of interest currently set aside for reserves\r\n    uint public reserveFactorMantissa;\r\n\r\n    /// @notice Block number that interest was last accrued at\r\n    uint public accrualBlockTimestamp;\r\n\r\n    /// @notice Accumulator of the total earned interest rate since the opening of the market\r\n    uint public borrowIndex;\r\n\r\n    /// @notice Total amount of outstanding borrows of the underlying in this market\r\n    uint public totalBorrows;\r\n\r\n    /// @notice Total amount of reserves of the underlying held in this market\r\n    uint public totalReserves;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping(address => uint) internal accountTokens;\r\n\r\n    /// @notice Approved token transfer amounts on behalf of others\r\n    mapping(address => mapping(address => uint)) internal transferAllowances;\r\n\r\n\r\n    /**\r\n     * @notice Container for borrow balance information\r\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n     */\r\n    struct BorrowSnapshot {\r\n        uint principal;\r\n        uint interestIndex;\r\n    }\r\n\r\n    // @notice Mapping of account addresses to outstanding borrow balances\r\n    mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n    /// @notice Share of seized collateral that is added to reserves\r\n    uint public protocolSeizeShareMantissa;\r\n}\r\n\r\nabstract contract KTokenInterface is KTokenStorage {\r\n    /// @notice Indicator that this is a KToken contract (for inspection)\r\n    bool public constant isKToken = true;\r\n\r\n    /*** Market Events ***/\r\n\r\n    /// @notice Event emitted when interest is accrued\r\n    event AccrueInterest(\r\n        uint cashPrior,\r\n        uint interestAccumulated,\r\n        uint borrowIndex,\r\n        uint totalBorrows\r\n    );\r\n\r\n    /// @notice Event emitted when tokens are minted\r\n    event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n    /// @notice Event emitted when tokens are redeemed\r\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\r\n\r\n    /// @notice Event emitted when underlying is borrowed\r\n    event Borrow(\r\n        address borrower,\r\n        uint borrowAmount,\r\n        uint accountBorrows,\r\n        uint totalBorrows\r\n    );\r\n\r\n    /// @notice Event emitted when a borrow is repaid\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint accountBorrows,\r\n        uint totalBorrows\r\n    );\r\n\r\n    /// @notice Event emitted when a borrow is liquidated\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        address kTokenCollateral,\r\n        uint seizeTokens\r\n    );\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /// @notice Event emitted when pendingAdmin is changed\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /// @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /// @notice Event emitted when comptroller is changed\r\n    event NewComptroller(\r\n        ComptrollerInterface oldComptroller,\r\n        ComptrollerInterface newComptroller\r\n    );\r\n\r\n    /// @notice Event emitted when interestRateModel is changed\r\n    event NewMarketInterestRateModel(\r\n        InterestRateModel oldInterestRateModel,\r\n        InterestRateModel newInterestRateModel\r\n    );\r\n\r\n    /// @notice Event emitted when the reserve factor is changed\r\n    event NewReserveFactor(\r\n        uint oldReserveFactorMantissa,\r\n        uint newReserveFactorMantissa\r\n    );\r\n\r\n    /// @notice Event emitted when the protocol seize share is changed\r\n    event NewProtocolSeizeShare(\r\n        uint oldProtocolSeizeShareMantissa,\r\n        uint newProtocolSeizeShareMantissa\r\n    );\r\n\r\n    /// @notice Event emitted when the reserves are added\r\n    event ReservesAdded(\r\n        address benefactor,\r\n        uint addAmount,\r\n        uint newTotalReserves\r\n    );\r\n\r\n    /// @notice Event emitted when the reserves are reduced\r\n    event ReservesReduced(\r\n        address admin,\r\n        uint reduceAmount,\r\n        uint newTotalReserves\r\n    );\r\n\r\n    /// @notice EIP20 Transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /// @notice EIP20 Approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    /*** User Interface ***/\r\n\r\n    function transfer(address dst, uint amount) external virtual returns (bool);\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint amount\r\n    ) external virtual returns (bool);\r\n    function approve(\r\n        address spender,\r\n        uint amount\r\n    ) external virtual returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view virtual returns (uint);\r\n    function balanceOf(address owner) external view virtual returns (uint);\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\r\n    function getAccountSnapshot(\r\n        address account\r\n    ) external view virtual returns (uint, uint, uint, uint);\r\n    function borrowRatePerTimestamp() external view virtual returns (uint);\r\n    function supplyRatePerTimestamp() external view virtual returns (uint);\r\n    function totalBorrowsCurrent() external virtual returns (uint);\r\n    function borrowBalanceCurrent(\r\n        address account\r\n    ) external virtual returns (uint);\r\n    function borrowBalanceStored(\r\n        address account\r\n    ) external view virtual returns (uint);\r\n    function exchangeRateCurrent() external virtual returns (uint);\r\n    function exchangeRateStored() external view virtual returns (uint);\r\n    function getCash() external view virtual returns (uint);\r\n    function accrueInterest() external virtual returns (uint);\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens\r\n    ) external virtual returns (uint);\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _setPendingAdmin(\r\n        address payable newPendingAdmin\r\n    ) external virtual returns (uint);\r\n    function _acceptAdmin() external virtual returns (uint);\r\n    function _setComptroller(\r\n        ComptrollerInterface newComptroller\r\n    ) external virtual returns (uint);\r\n    function _setReserveFactor(\r\n        uint newReserveFactorMantissa\r\n    ) external virtual returns (uint);\r\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\r\n    function _setInterestRateModel(\r\n        InterestRateModel newInterestRateModel\r\n    ) external virtual returns (uint);\r\n    function _setProtocolSeizeShare(\r\n        uint newProtocolSeizeShareMantissa\r\n    ) external virtual returns (uint);\r\n}\r\n\r\ncontract KErc20Storage {\r\n    /// @notice Underlying asset for this KToken\r\n    address public underlying;\r\n    /// @notice messageHub for this KToken\r\n    address public messageHub;\r\n}\r\n\r\nabstract contract KErc20BaseInterface is KErc20Storage {\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\r\n    function _addReserves(uint addAmount) external virtual returns (uint);\r\n}\r\n\r\nabstract contract KErc20Interface {\r\n    /*** User Interface ***/\r\n\r\n    function mint(uint mintAmount) external virtual returns (uint);\r\n    function mintWithPermit(\r\n        uint mintAmount,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual returns (uint);\r\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\r\n    function repayBorrowBehalf(\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external virtual returns (uint);\r\n    function redeem(uint redeemTokens) external virtual returns (uint);\r\n    function redeemUnderlying(\r\n        uint redeemAmount\r\n    ) external virtual returns (uint);\r\n    function borrow(uint borrowAmount) external virtual returns (uint);\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint repayAmount,\r\n        KTokenInterface kTokenCollateral\r\n    ) external virtual returns (uint);\r\n}\r\n\r\nabstract contract KErc20CrossChainInterface {\r\n    /*** MessageHub Interface ***/\r\n\r\n    function mint(\r\n        address minter,\r\n        uint mintAmount\r\n    ) external virtual returns (uint);\r\n    function repayBorrow(\r\n        address payer,\r\n        uint repayAmount\r\n    ) external virtual returns (uint);\r\n    function repayBorrowBehalf(\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external virtual returns (uint);\r\n    function liquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        KTokenInterface kTokenCollateral\r\n    ) external virtual returns (uint);\r\n\r\n    /*** User Interface ***/\r\n\r\n    function redeem(uint redeemTokens) external payable virtual returns (uint);\r\n    function redeemUnderlying(\r\n        uint redeemAmount\r\n    ) external payable virtual returns (uint);\r\n    function borrow(uint borrowAmount) external payable virtual returns (uint);\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _setMessageHub(address newMessageHub) external virtual;\r\n\r\n    /// @notice Event emitted when the message hub is changed\r\n    event NewMessageHub(\r\n        address oldMessageHub,\r\n        address messageHub\r\n    );\r\n}\r\n\r\ncontract KDelegationStorage {\r\n    /// @notice Implementation address for this contract\r\n    address public implementation;\r\n}\r\n\r\nabstract contract KDelegatorInterface is KDelegationStorage {\r\n    /// @notice Emitted when implementation is changed\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(\r\n        address implementation_,\r\n        bool allowResign,\r\n        bytes memory becomeImplementationData\r\n    ) external virtual;\r\n}\r\n\r\nabstract contract KDelegateInterface is KDelegationStorage {\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) external virtual;\r\n\r\n    /// @notice Called by the delegator on a delegate to forfeit its responsibility\r\n    function _resignImplementation() external virtual;\r\n}\r\n\r\ncontract KClientStorage {\r\n\r\n    /// @notice MessageHub implementation's address\r\n    address public messageHub;\r\n\r\n    /// @notice Administrator for this contract\r\n    address payable public admin;\r\n\r\n    /// @notice Prevents re-initialization\r\n    bool private initialized;\r\n}\r\n\r\nabstract contract KClientInterface is KClientStorage {\r\n    /*** User Interface ***/\r\n    function mint(uint mintAmount) external payable virtual;\r\n    function repayBorrow(uint repayAmount) external payable virtual;\r\n    function repayBorrowBehalf(\r\n        address borrower,\r\n        uint repayAmount\r\n    ) external payable virtual;\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint repayAmount,\r\n        KTokenInterface kTokenCollateral\r\n    ) external payable virtual;\r\n    function releaseETH(\r\n        address payable recipient,\r\n        uint amount\r\n    ) external virtual returns (bool);\r\n\r\n    /// @notice Event emitted when tokens are minted\r\n    event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n    /// @notice Event emitted when a borrow is repaid\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint accountBorrows,\r\n        uint totalBorrows\r\n    );\r\n\r\n    /// @notice Event emitted when a borrow is liquidated\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        address kTokenCollateral,\r\n        uint seizeTokens\r\n    );\r\n\r\n    /// @notice Event emitted when the message hub is changed\r\n    event NewMessageHub(\r\n        address oldMessageHub,\r\n        address messageHub\r\n    );\r\n}\r\n"
    },
    "contracts/TokenErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\ncontract ComptrollerErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        COMPTROLLER_MISMATCH,\r\n        INSUFFICIENT_SHORTFALL,\r\n        INSUFFICIENT_LIQUIDITY,\r\n        INVALID_CLOSE_FACTOR,\r\n        INVALID_COLLATERAL_FACTOR,\r\n        INVALID_LIQUIDATION_INCENTIVE,\r\n        MARKET_NOT_ENTERED, // no longer possible\r\n        MARKET_NOT_LISTED,\r\n        MARKET_ALREADY_LISTED,\r\n        MATH_ERROR,\r\n        NONZERO_BORROW_BALANCE,\r\n        PRICE_ERROR,\r\n        REJECTION,\r\n        SNAPSHOT_ERROR,\r\n        TOO_MANY_ASSETS,\r\n        TOO_MUCH_REPAY\r\n    }\r\n\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n        EXIT_MARKET_BALANCE_OWED,\r\n        EXIT_MARKET_REJECTION,\r\n        SET_CLOSE_FACTOR_OWNER_CHECK,\r\n        SET_CLOSE_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n        SET_COLLATERAL_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n        SET_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n        SET_MAX_ASSETS_OWNER_CHECK,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_PRICE_ORACLE_OWNER_CHECK,\r\n        SUPPORT_MARKET_EXISTS,\r\n        SUPPORT_MARKET_OWNER_CHECK,\r\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\r\n        SET_GAS_AMOUNT_OWNER_CHECK\r\n    }\r\n\r\n    /**\r\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n     **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n     */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n     */\r\n    function failOpaque(\r\n        Error err,\r\n        FailureInfo info,\r\n        uint opaqueError\r\n    ) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        BAD_INPUT,\r\n        COMPTROLLER_REJECTION,\r\n        COMPTROLLER_CALCULATION_ERROR,\r\n        INTEREST_RATE_MODEL_ERROR,\r\n        INVALID_ACCOUNT_PAIR,\r\n        INVALID_CLOSE_AMOUNT_REQUESTED,\r\n        INVALID_COLLATERAL_FACTOR,\r\n        MATH_ERROR,\r\n        MARKET_NOT_FRESH,\r\n        MARKET_NOT_LISTED,\r\n        TOKEN_INSUFFICIENT_ALLOWANCE,\r\n        TOKEN_INSUFFICIENT_BALANCE,\r\n        TOKEN_INSUFFICIENT_CASH,\r\n        TOKEN_TRANSFER_IN_FAILED,\r\n        TOKEN_TRANSFER_OUT_FAILED\r\n    }\r\n\r\n    /*\r\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\r\n     *       This is because FailureInfo grows significantly faster, and\r\n     *       the order of Error has some meaning, while the order of FailureInfo\r\n     *       is entirely arbitrary.\r\n     */\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\r\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        BORROW_ACCRUE_INTEREST_FAILED,\r\n        BORROW_CASH_NOT_AVAILABLE,\r\n        BORROW_FRESHNESS_CHECK,\r\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n        BORROW_MARKET_NOT_LISTED,\r\n        BORROW_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\r\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\r\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\r\n        LIQUIDATE_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\r\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\r\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\r\n        LIQUIDATE_FRESHNESS_CHECK,\r\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\r\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\r\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\r\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\r\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\r\n        LIQUIDATE_SEIZE_TOO_MUCH,\r\n        MINT_ACCRUE_INTEREST_FAILED,\r\n        MINT_COMPTROLLER_REJECTION,\r\n        MINT_EXCHANGE_CALCULATION_FAILED,\r\n        MINT_EXCHANGE_RATE_READ_FAILED,\r\n        MINT_FRESHNESS_CHECK,\r\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        MINT_TRANSFER_IN_FAILED,\r\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\r\n        REDEEM_ACCRUE_INTEREST_FAILED,\r\n        REDEEM_COMPTROLLER_REJECTION,\r\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\r\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\r\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\r\n        REDEEM_FRESHNESS_CHECK,\r\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\r\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\r\n        REDUCE_RESERVES_ADMIN_CHECK,\r\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\r\n        REDUCE_RESERVES_FRESH_CHECK,\r\n        REDUCE_RESERVES_VALIDATION,\r\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\r\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\r\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_COMPTROLLER_REJECTION,\r\n        REPAY_BORROW_FRESHNESS_CHECK,\r\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\r\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n        SET_COLLATERAL_FACTOR_VALIDATION,\r\n        SET_COMPTROLLER_OWNER_CHECK,\r\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\r\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\r\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\r\n        SET_MAX_ASSETS_OWNER_CHECK,\r\n        SET_ORACLE_MARKET_NOT_LISTED,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\r\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\r\n        SET_RESERVE_FACTOR_FRESH_CHECK,\r\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\r\n        TRANSFER_COMPTROLLER_REJECTION,\r\n        TRANSFER_NOT_ALLOWED,\r\n        TRANSFER_NOT_ENOUGH,\r\n        TRANSFER_TOO_MUCH,\r\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\r\n        ADD_RESERVES_FRESH_CHECK,\r\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\r\n        SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED,\r\n        SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK,\r\n        SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\r\n    }\r\n\r\n    /**\r\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n     **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n     */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n     */\r\n    function failOpaque(\r\n        Error err,\r\n        FailureInfo info,\r\n        uint opaqueError\r\n    ) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}