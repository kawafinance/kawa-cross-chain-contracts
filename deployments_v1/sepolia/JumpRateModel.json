{
  "address": "0x72F6cCF7A463D732F1998ad1e82b419196b08aBB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseRatePerTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpMultiplierPerTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampsPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9e1ae01012e20cd869224b975885d5957484be0cb3107967f0c99ca96dbd465",
  "receipt": {
    "to": null,
    "from": "0x6027862A465EF7d842e32A8a16a39D4D83c25D3A",
    "contractAddress": "0x72F6cCF7A463D732F1998ad1e82b419196b08aBB",
    "transactionIndex": 51,
    "gasUsed": "480592",
    "logsBloom": "0x
    "blockHash": "0xcf5446e2a0823b58ef2c05022851acecc6a65354c6cf90081a2d51d6e865757a",
    "transactionHash": "0xe9e1ae01012e20cd869224b975885d5957484be0cb3107967f0c99ca96dbd465",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 7082612,
        "transactionHash": "0xe9e1ae01012e20cd869224b975885d5957484be0cb3107967f0c99ca96dbd465",
        "address": "0x72F6cCF7A463D732F1998ad1e82b419196b08aBB",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000025cd0f7f00000000000000000000000000000000000000000000000000000000bd014d7e000000000000000000000000000000000000000000000000000000080c27ccae0000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 2053,
        "blockHash": "0xcf5446e2a0823b58ef2c05022851acecc6a65354c6cf90081a2d51d6e865757a"
      }
    ],
    "blockNumber": 7082612,
    "cumulativeGasUsed": "17867627",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "20000000000000000",
    "100000000000000000",
    "1090000000000000000",
    "800000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f7db05aaed8f2fad2107baa116d98cd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseRatePerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampsPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CompoundKawa\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by 1e18)\",\"jumpMultiplierPerYear\":\"The multiplierPerTimestamp after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by 1e18)\"}},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per timestamp as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per timestamp as a mantissa (scaled by 1e18)\"}},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, 1e18]\"}}},\"title\":\"Kawa's JumpRateModel Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRatePerTimestamp()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"constructor\":{\"notice\":\"Construct an interest rate model\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per timestamp, with the error code expected by the market\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per timestamp\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"jumpMultiplierPerTimestamp()\":{\"notice\":\"The multiplierPerTimestamp after hitting a specified utilization point\"},\"kink()\":{\"notice\":\"The utilization point at which the jump multiplier is applied\"},\"multiplierPerTimestamp()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"timestampsPerYear()\":{\"notice\":\"The approximate number of timestamps per year that is assumed by the interest rate model\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/irm/JumpRateModel.sol\":\"JumpRateModel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c73537367a0070ce86a9956c0ccaef9c45991fbb7b4a4dc8632c2b1b141f155\",\"license\":\"BSD-3-Clause\"},\"contracts/irm/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Kawa's InterestRateModel Interface\\r\\n * @author Kawa\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @return The borrow rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @param reserveFactorMantissa The current reserve factor the market has\\r\\n     * @return The supply rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves,\\r\\n        uint reserveFactorMantissa\\r\\n    ) external view virtual returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x81db3c2dc31dd9eea2551206086f0c2ab90b150ca9febd1aa2cef5b1f351379d\",\"license\":\"BSD-3-Clause\"},\"contracts/irm/JumpRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"../SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Kawa's JumpRateModel Contract\\r\\n * @author Compound\\r\\n * @author Kawa\\r\\n */\\r\\ncontract JumpRateModel is InterestRateModel {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    event NewInterestParams(\\r\\n        uint baseRatePerTimestamp,\\r\\n        uint multiplierPerTimestamp,\\r\\n        uint jumpMultiplierPerTimestamp,\\r\\n        uint kink\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice The approximate number of timestamps per year that is assumed by the interest rate model\\r\\n     */\\r\\n    uint public constant timestampsPerYear = 60 * 60 * 24 * 365;\\r\\n\\r\\n    /**\\r\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\r\\n     */\\r\\n    uint public multiplierPerTimestamp;\\r\\n\\r\\n    /**\\r\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\r\\n     */\\r\\n    uint public baseRatePerTimestamp;\\r\\n\\r\\n    /**\\r\\n     * @notice The multiplierPerTimestamp after hitting a specified utilization point\\r\\n     */\\r\\n    uint public jumpMultiplierPerTimestamp;\\r\\n\\r\\n    /**\\r\\n     * @notice The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    uint public kink;\\r\\n\\r\\n    /// @dev we know that we do not need to use safemath, however safemath is still used for safety\\r\\n    /// and to not modify existing code.\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an interest rate model\\r\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\r\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\r\\n     * @param jumpMultiplierPerYear The multiplierPerTimestamp after hitting a specified utilization point\\r\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    constructor(\\r\\n        uint baseRatePerYear,\\r\\n        uint multiplierPerYear,\\r\\n        uint jumpMultiplierPerYear,\\r\\n        uint kink_\\r\\n    ) {\\r\\n        baseRatePerTimestamp = baseRatePerYear\\r\\n            .mul(1e18)\\r\\n            .div(timestampsPerYear)\\r\\n            .div(1e18);\\r\\n        multiplierPerTimestamp = multiplierPerYear\\r\\n            .mul(1e18)\\r\\n            .div(timestampsPerYear)\\r\\n            .div(1e18);\\r\\n        jumpMultiplierPerTimestamp = jumpMultiplierPerYear\\r\\n            .mul(1e18)\\r\\n            .div(timestampsPerYear)\\r\\n            .div(1e18);\\r\\n        kink = kink_;\\r\\n\\r\\n        emit NewInterestParams(\\r\\n            baseRatePerTimestamp,\\r\\n            multiplierPerTimestamp,\\r\\n            jumpMultiplierPerTimestamp,\\r\\n            kink\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market (currently unused)\\r\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\r\\n     */\\r\\n    function utilizationRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) public pure returns (uint) {\\r\\n        // Utilization rate is 0 when there are no borrows\\r\\n        if (borrows == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow rate per timestamp, with the error code expected by the market\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market\\r\\n     * @return The borrow rate percentage per timestamp as a mantissa (scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) public view override returns (uint) {\\r\\n        uint util = utilizationRate(cash, borrows, reserves);\\r\\n\\r\\n        if (util <= kink) {\\r\\n            return\\r\\n                util.mul(multiplierPerTimestamp).div(1e18).add(\\r\\n                    baseRatePerTimestamp\\r\\n                );\\r\\n        } else {\\r\\n            uint normalRate = kink.mul(multiplierPerTimestamp).div(1e18).add(\\r\\n                baseRatePerTimestamp\\r\\n            );\\r\\n            uint excessUtil = util.sub(kink);\\r\\n            return\\r\\n                excessUtil.mul(jumpMultiplierPerTimestamp).div(1e18).add(\\r\\n                    normalRate\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply rate per timestamp\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market\\r\\n     * @param reserveFactorMantissa The current reserve factor for the market\\r\\n     * @return The supply rate percentage per timestamp as a mantissa (scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves,\\r\\n        uint reserveFactorMantissa\\r\\n    ) public view override returns (uint) {\\r\\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\\r\\n        uint borrowRate = getBorrowRate(cash, borrows, reserves);\\r\\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\r\\n        return\\r\\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9f4e022a40a87e49f819a2809ded1f4e0c98374a17a7f2c7c2d869ffe4b0f66\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108b33803806108b383398101604081905261002f91610200565b610051670de0b6b3a764000061004b6301e133808188846100f1565b90610181565b600155610070670de0b6b3a764000061004b6301e133808187846100f1565b60005561008f670de0b6b3a764000061004b6301e133808186846100f1565b60028190556003829055600154600054604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a1505050506102cb565b6000826000036101035750600061017b565b600061010f8385610236565b90508261011c858361025b565b146101785760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b600061017883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506101c960201b60201c565b600081836101ea5760405162461bcd60e51b815260040161016f919061027d565b5060006101f7848661025b565b95945050505050565b6000806000806080858703121561021657600080fd5b505082516020840151604085015160609095015191969095509092509050565b808202811582820484141761017b57634e487b7160e01b600052601160045260246000fd5b60008261027857634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156102aa5785810183015185820160400152820161028e565b506000604082860101526040601f19601f8301168501019250505092915050565b6105d9806102da6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806340bc0af41161006657806340bc0af4146100ea5780636c2df6a7146100f35780636e71e2d8146100fc578063b81688161461010f578063fd2da3391461012257600080fd5b80630c5748611461009857806315f24053146100b65780632191f92a146100c957806326c394f7146100e1575b600080fd5b6100a36301e1338081565b6040519081526020015b60405180910390f35b6100a36100c4366004610482565b61012b565b6100d1600181565b60405190151581526020016100ad565b6100a360025481565b6100a360015481565b6100a360005481565b6100a361010a366004610482565b6101f7565b6100a361011d3660046104ae565b61023a565b6100a360035481565b6000806101398585856101f7565b9050600354811161017f57610177600154610171670de0b6b3a764000061016b600054866102a790919063ffffffff16565b90610337565b90610379565b9150506101f0565b60006101aa600154610171670de0b6b3a764000061016b6000546003546102a790919063ffffffff16565b905060006101c3600354846103d890919063ffffffff16565b90506101ea82610171670de0b6b3a764000061016b600254866102a790919063ffffffff16565b93505050505b9392505050565b600082600003610209575060006101f0565b6102326102208361021a8787610379565b906103d8565b61016b85670de0b6b3a76400006102a7565b949350505050565b60008061024f670de0b6b3a7640000846103d8565b9050600061025e87878761012b565b90506000610278670de0b6b3a764000061016b84866102a7565b905061029b670de0b6b3a764000061016b836102958c8c8c6101f7565b906102a7565b98975050505050505050565b6000826000036102b957506000610331565b60006102c583856104f6565b9050826102d2858361050d565b1461032e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b600061032e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061041a565b600080610386838561052f565b90508381101561032e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610325565b600061032e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610451565b6000818361043b5760405162461bcd60e51b81526004016103259190610542565b506000610448848661050d565b95945050505050565b600081848411156104755760405162461bcd60e51b81526004016103259190610542565b5060006104488486610590565b60008060006060848603121561049757600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156104c457600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610331576103316104e0565b60008261052a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610331576103316104e0565b600060208083528351808285015260005b8181101561056f57858101830151858201604001528201610553565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115610331576103316104e056fea2646970667358221220e0bf4daa6dd4040459d1ff4af96d16bb7ed2f6440e541f92e47819db5420944b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806340bc0af41161006657806340bc0af4146100ea5780636c2df6a7146100f35780636e71e2d8146100fc578063b81688161461010f578063fd2da3391461012257600080fd5b80630c5748611461009857806315f24053146100b65780632191f92a146100c957806326c394f7146100e1575b600080fd5b6100a36301e1338081565b6040519081526020015b60405180910390f35b6100a36100c4366004610482565b61012b565b6100d1600181565b60405190151581526020016100ad565b6100a360025481565b6100a360015481565b6100a360005481565b6100a361010a366004610482565b6101f7565b6100a361011d3660046104ae565b61023a565b6100a360035481565b6000806101398585856101f7565b9050600354811161017f57610177600154610171670de0b6b3a764000061016b600054866102a790919063ffffffff16565b90610337565b90610379565b9150506101f0565b60006101aa600154610171670de0b6b3a764000061016b6000546003546102a790919063ffffffff16565b905060006101c3600354846103d890919063ffffffff16565b90506101ea82610171670de0b6b3a764000061016b600254866102a790919063ffffffff16565b93505050505b9392505050565b600082600003610209575060006101f0565b6102326102208361021a8787610379565b906103d8565b61016b85670de0b6b3a76400006102a7565b949350505050565b60008061024f670de0b6b3a7640000846103d8565b9050600061025e87878761012b565b90506000610278670de0b6b3a764000061016b84866102a7565b905061029b670de0b6b3a764000061016b836102958c8c8c6101f7565b906102a7565b98975050505050505050565b6000826000036102b957506000610331565b60006102c583856104f6565b9050826102d2858361050d565b1461032e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b600061032e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061041a565b600080610386838561052f565b90508381101561032e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610325565b600061032e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610451565b6000818361043b5760405162461bcd60e51b81526004016103259190610542565b506000610448848661050d565b95945050505050565b600081848411156104755760405162461bcd60e51b81526004016103259190610542565b5060006104488486610590565b60008060006060848603121561049757600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156104c457600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610331576103316104e0565b60008261052a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610331576103316104e0565b600060208083528351808285015260005b8181101561056f57858101830151858201604001528201610553565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115610331576103316104e056fea2646970667358221220e0bf4daa6dd4040459d1ff4af96d16bb7ed2f6440e541f92e47819db5420944b64736f6c63430008140033",
  "devdoc": {
    "author": "CompoundKawa",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by 1e18)",
          "jumpMultiplierPerYear": "The multiplierPerTimestamp after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by 1e18)"
        }
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per timestamp as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per timestamp as a mantissa (scaled by 1e18)"
        }
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, 1e18]"
        }
      }
    },
    "title": "Kawa's JumpRateModel Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRatePerTimestamp()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "constructor": {
        "notice": "Construct an interest rate model"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per timestamp, with the error code expected by the market"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per timestamp"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "jumpMultiplierPerTimestamp()": {
        "notice": "The multiplierPerTimestamp after hitting a specified utilization point"
      },
      "kink()": {
        "notice": "The utilization point at which the jump multiplier is applied"
      },
      "multiplierPerTimestamp()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "timestampsPerYear()": {
        "notice": "The approximate number of timestamps per year that is assumed by the interest rate model"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20315,
        "contract": "contracts/irm/JumpRateModel.sol:JumpRateModel",
        "label": "multiplierPerTimestamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 20318,
        "contract": "contracts/irm/JumpRateModel.sol:JumpRateModel",
        "label": "baseRatePerTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 20321,
        "contract": "contracts/irm/JumpRateModel.sol:JumpRateModel",
        "label": "jumpMultiplierPerTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20324,
        "contract": "contracts/irm/JumpRateModel.sol:JumpRateModel",
        "label": "kink",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}