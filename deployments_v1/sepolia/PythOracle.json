{
  "address": "0xa34dd78B64bcFDc4e4cA816696528A436B399C90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pythContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "directPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract KTokenInterface",
          "name": "kToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPriceOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pythPriceIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDirectPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_ids",
          "type": "bytes[]"
        }
      ],
      "name": "updatePythPriceIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcae8cb6babb7b5314c8589e89633e3481df8752c6b61f949136fde9b9e5c362b",
  "receipt": {
    "to": null,
    "from": "0x6027862A465EF7d842e32A8a16a39D4D83c25D3A",
    "contractAddress": "0xa34dd78B64bcFDc4e4cA816696528A436B399C90",
    "transactionIndex": 47,
    "gasUsed": "714395",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcf23306f8609946d75a21004b4b8210d0f56e91dbab9b119411a21d9bc5f10b3",
    "transactionHash": "0xcae8cb6babb7b5314c8589e89633e3481df8752c6b61f949136fde9b9e5c362b",
    "logs": [],
    "blockNumber": 7082647,
    "cumulativeGasUsed": "6242926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDd24F84d36BF92C65F92307595335bdFab5Bbd21"
  ],
  "numDeployments": 1,
  "solcInputHash": "f7db05aaed8f2fad2107baa116d98cd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KTokenInterface\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pythPriceIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDirectPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_ids\",\"type\":\"bytes[]\"}],\"name\":\"updatePythPriceIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrice(address)\":{\"details\":\"returns price of token\",\"params\":{\"kToken\":\"address of the kToken\"},\"returns\":{\"price\":\"scaled price of the token\"}},\"getUnderlyingPrice(address)\":{\"details\":\"returns price of cToken underlying\",\"params\":{\"kToken\":\"address of the kToken\"},\"returns\":{\"_0\":\"scaled price of the underlying\"}},\"setDirectPrice(address,uint256)\":{\"details\":\"set price of the token directly, only in case if there is no feed\",\"params\":{\"price\":\"underlying price in 18 decimal places\",\"token\":\"address of the underlying token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isPriceOracle()\":{\"notice\":\"Indicator that this is a PriceOracle contract (for inspection)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pyth/PythOracle.sol\":\"PythOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/Pyth/KTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface KTokenInterface {\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b44e93584f9fb6e1540eecad1fa46950520427a5604b9dc8349f595e38a0665\",\"license\":\"MIT\"},\"contracts/Pyth/PriceOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./KTokenInterface.sol\\\";\\r\\n\\r\\ninterface PriceOracleInterface {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    function isPriceOracle() external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a kToken asset\\r\\n     * @param kToken The kToken to get the underlying price of\\r\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n     *  Zero means the price is unavailable.\\r\\n     */\\r\\n    function getUnderlyingPrice(\\r\\n        KTokenInterface kToken\\r\\n    ) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x48dae5156ad0263ae94b8eeeff936ea70400391dcd669797b35204e9fcda6ee6\",\"license\":\"MIT\"},\"contracts/Pyth/PythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\r\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\r\\n\\r\\nimport {KTokenInterface} from \\\"./KTokenInterface.sol\\\";\\r\\nimport {PriceOracleInterface} from \\\"./PriceOracleInterface.sol\\\";\\r\\n\\r\\ncontract PythOracle is PriceOracleInterface {\\r\\n    IPyth public immutable pyth;\\r\\n    address public admin;\\r\\n\\r\\n    bool public constant override isPriceOracle = true;\\r\\n    address internal constant ETH_ADDRESS =\\r\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    // Pyth USD-denominated feeds store answers at 8 decimals\\r\\n    uint256 internal constant USD_DECIMAL = 8;\\r\\n\\r\\n    // Stores pyth oracle price Id of the particular token\\r\\n    mapping(address => bytes32) public pythPriceIds;\\r\\n\\r\\n    // Mapping to store direct price by token address\\r\\n    mapping(address => uint256) public directPrices;\\r\\n\\r\\n    constructor(address pythContract) {\\r\\n        admin = msg.sender;\\r\\n        pyth = IPyth(pythContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns price of cToken underlying\\r\\n     * @param kToken address of the kToken\\r\\n     * @return scaled price of the underlying\\r\\n     */\\r\\n    function getUnderlyingPrice(\\r\\n        KTokenInterface kToken\\r\\n    ) external view override returns (uint256) {\\r\\n        string memory symbol = kToken.symbol();\\r\\n//        if (compareStrings(symbol, \\\"kETH\\\")) {\\r\\n//            return getOraclePrice(ETH_ADDRESS);\\r\\n//        } else {\\r\\n            return getPrice(address(kToken));\\r\\n//        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns price of token\\r\\n     * @param kToken address of the kToken\\r\\n     * @return price scaled price of the token\\r\\n     */\\r\\n    function getPrice(address kToken) public view returns (uint256 price) {\\r\\n        address token = address(KTokenInterface(kToken).underlying());\\r\\n\\r\\n        uint256 directPrice = directPrices[token];\\r\\n        if (directPrice > 0) {\\r\\n            price = directPrice;\\r\\n        } else {\\r\\n            price = getOraclePrice(token);\\r\\n        }\\r\\n\\r\\n        uint256 decimalDelta = uint256(18) - KTokenInterface(token).decimals();\\r\\n        // Ensure that we don't multiply the result by 0\\r\\n        if (decimalDelta > 0) {\\r\\n            price = price * (10 ** decimalDelta);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param token underlying address of cToken\\r\\n     * @return price underlying price in 18 decimal places\\r\\n     */\\r\\n    function getOraclePrice(\\r\\n        address token\\r\\n    ) internal view returns (uint256 price) {\\r\\n        PythStructs.Price memory _price = pyth.getPriceNoOlderThan(\\r\\n            pythPriceIds[token],\\r\\n            24 * 60 * 60\\r\\n        );\\r\\n        price = uint256(uint64(_price.price));\\r\\n\\r\\n        uint decimalDelta = uint256(18) - USD_DECIMAL;\\r\\n        if (decimalDelta > 0) {\\r\\n            price = price * (10 ** decimalDelta);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set price of the token directly, only in case if there is no feed\\r\\n     * @param token address of the underlying token\\r\\n     * @param price underlying price in 18 decimal places\\r\\n     */\\r\\n    function setDirectPrice(address token, uint256 price) external onlyAdmin {\\r\\n        directPrices[token] = price;\\r\\n    }\\r\\n\\r\\n    function updateAdmin(address newAdmin) external onlyAdmin {\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    function updatePythPriceIds(\\r\\n        address[] memory _tokens,\\r\\n        bytes[] memory _ids\\r\\n    ) external onlyAdmin {\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            pythPriceIds[_tokens[i]] = bytes32(_ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function compareStrings(\\r\\n        string memory a,\\r\\n        string memory b\\r\\n    ) internal pure returns (bool) {\\r\\n        return (keccak256(abi.encodePacked((a))) ==\\r\\n            keccak256(abi.encodePacked((b))));\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"only admin may call\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x751d3a814545cd613732f3d1ba863f9d2991615fee6445e171e44c6b51dc27c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c2b380380610c2b83398101604081905261002f91610052565b600080546001600160a01b031916331790556001600160a01b0316608052610082565b60006020828403121561006457600080fd5b81516001600160a01b038116811461007b57600080fd5b9392505050565b608051610b876100a46000396000818161018c01526104fd0152610b876000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063e2f273bd11610066578063e2f273bd14610129578063f32d08f81461013c578063f851a4401461015c578063f98d06f014610187578063fc57d4df146101ae57600080fd5b806309a8acb0146100a3578063243e5f57146100b857806341976e09146100cb57806366331bba146100f15780637eb5fbfd14610109575b600080fd5b6100b66100b13660046105c7565b6101c1565b005b6100b66100c6366004610755565b610210565b6100de6100d9366004610817565b6102c3565b6040519081526020015b60405180910390f35b6100f9600181565b60405190151581526020016100e8565b6100de610117366004610817565b60016020526000908152604090205481565b6100b6610137366004610817565b6103f8565b6100de61014a366004610817565b60026020526000908152604090205481565b60005461016f906001600160a01b031681565b6040516001600160a01b0390911681526020016100e8565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6100de6101bc366004610817565b610444565b6000546001600160a01b031633146101f45760405162461bcd60e51b81526004016101eb90610834565b60405180910390fd5b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b0316331461023a5760405162461bcd60e51b81526004016101eb90610834565b60005b82518110156102be5781818151811061025857610258610861565b602002602001015161026990610877565b6001600085848151811061027f5761027f610861565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806102b6906108b4565b91505061023d565b505050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032891906108cd565b6001600160a01b03811660009081526002602052604090205490915080156103525780925061035e565b61035b826104bf565b92505b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906108ea565b6103d09060ff16601261090d565b905080156103f0576103e381600a610a0a565b6103ed9085610a16565b93505b505050919050565b6000546001600160a01b031633146104225760405162461bcd60e51b81526004016101eb90610834565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610485573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ad9190810190610a2d565b90506104b8836102c3565b9392505050565b6001600160a01b0381811660009081526001602052604080822054905163052571af60e51b81526004810191909152620151806024820152909182917f00000000000000000000000000000000000000000000000000000000000000009091169063a4ae35e090604401608060405180830381865afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610aba565b805167ffffffffffffffff169250905060006105886008601261090d565b905080156105a85761059b81600a610a0a565b6105a59084610a16565b92505b5050919050565b6001600160a01b03811681146105c457600080fd5b50565b600080604083850312156105da57600080fd5b82356105e5816105af565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610632576106326105f3565b604052919050565b600067ffffffffffffffff821115610654576106546105f3565b5060051b60200190565b600067ffffffffffffffff821115610678576106786105f3565b50601f01601f191660200190565b600082601f83011261069757600080fd5b813560206106ac6106a78361063a565b610609565b82815260059290921b840181019181810190868411156106cb57600080fd5b8286015b8481101561074a57803567ffffffffffffffff8111156106ef5760008081fd5b8701603f810189136107015760008081fd5b8481013560406107136106a78361065e565b8281528b828486010111156107285760008081fd5b82828501898301376000928101880192909252508452509183019183016106cf565b509695505050505050565b6000806040838503121561076857600080fd5b823567ffffffffffffffff8082111561078057600080fd5b818501915085601f83011261079457600080fd5b813560206107a46106a78361063a565b82815260059290921b840181019181810190898411156107c357600080fd5b948201945b838610156107ea5785356107db816105af565b825294820194908201906107c8565b9650508601359250508082111561080057600080fd5b5061080d85828601610686565b9150509250929050565b60006020828403121561082957600080fd5b81356104b8816105af565b6020808252601390820152721bdb9b1e4818591b5a5b881b585e4818d85b1b606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b80516020808301519190811015610898576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016108c6576108c661089e565b5060010190565b6000602082840312156108df57600080fd5b81516104b8816105af565b6000602082840312156108fc57600080fd5b815160ff811681146104b857600080fd5b818103818111156109205761092061089e565b92915050565b600181815b808511156109615781600019048211156109475761094761089e565b8085161561095457918102915b93841c939080029061092b565b509250929050565b60008261097857506001610920565b8161098557506000610920565b816001811461099b57600281146109a5576109c1565b6001915050610920565b60ff8411156109b6576109b661089e565b50506001821b610920565b5060208310610133831016604e8410600b84101617156109e4575081810a610920565b6109ee8383610926565b8060001904821115610a0257610a0261089e565b029392505050565b60006104b88383610969565b80820281158282048414176109205761092061089e565b60006020808385031215610a4057600080fd5b825167ffffffffffffffff811115610a5757600080fd5b8301601f81018513610a6857600080fd5b8051610a766106a78261065e565b8181528684838501011115610a8a57600080fd5b60005b82811015610aa8578381018501518282018601528401610a8d565b50600091810190930152509392505050565b600060808284031215610acc57600080fd5b6040516080810167ffffffffffffffff8282108183111715610af057610af06105f3565b81604052845191508160070b8214610b0757600080fd5b9082526020840151908082168214610b1e57600080fd5b5060208201526040830151600381900b8114610b3957600080fd5b6040820152606092830151928101929092525091905056fea26469706673582212202e02f2ca8d681d7d4362e487bd25f6fec105d2b57477d24bd22001c12d08619e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063e2f273bd11610066578063e2f273bd14610129578063f32d08f81461013c578063f851a4401461015c578063f98d06f014610187578063fc57d4df146101ae57600080fd5b806309a8acb0146100a3578063243e5f57146100b857806341976e09146100cb57806366331bba146100f15780637eb5fbfd14610109575b600080fd5b6100b66100b13660046105c7565b6101c1565b005b6100b66100c6366004610755565b610210565b6100de6100d9366004610817565b6102c3565b6040519081526020015b60405180910390f35b6100f9600181565b60405190151581526020016100e8565b6100de610117366004610817565b60016020526000908152604090205481565b6100b6610137366004610817565b6103f8565b6100de61014a366004610817565b60026020526000908152604090205481565b60005461016f906001600160a01b031681565b6040516001600160a01b0390911681526020016100e8565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6100de6101bc366004610817565b610444565b6000546001600160a01b031633146101f45760405162461bcd60e51b81526004016101eb90610834565b60405180910390fd5b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b0316331461023a5760405162461bcd60e51b81526004016101eb90610834565b60005b82518110156102be5781818151811061025857610258610861565b602002602001015161026990610877565b6001600085848151811061027f5761027f610861565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806102b6906108b4565b91505061023d565b505050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032891906108cd565b6001600160a01b03811660009081526002602052604090205490915080156103525780925061035e565b61035b826104bf565b92505b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906108ea565b6103d09060ff16601261090d565b905080156103f0576103e381600a610a0a565b6103ed9085610a16565b93505b505050919050565b6000546001600160a01b031633146104225760405162461bcd60e51b81526004016101eb90610834565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610485573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ad9190810190610a2d565b90506104b8836102c3565b9392505050565b6001600160a01b0381811660009081526001602052604080822054905163052571af60e51b81526004810191909152620151806024820152909182917f00000000000000000000000000000000000000000000000000000000000000009091169063a4ae35e090604401608060405180830381865afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610aba565b805167ffffffffffffffff169250905060006105886008601261090d565b905080156105a85761059b81600a610a0a565b6105a59084610a16565b92505b5050919050565b6001600160a01b03811681146105c457600080fd5b50565b600080604083850312156105da57600080fd5b82356105e5816105af565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610632576106326105f3565b604052919050565b600067ffffffffffffffff821115610654576106546105f3565b5060051b60200190565b600067ffffffffffffffff821115610678576106786105f3565b50601f01601f191660200190565b600082601f83011261069757600080fd5b813560206106ac6106a78361063a565b610609565b82815260059290921b840181019181810190868411156106cb57600080fd5b8286015b8481101561074a57803567ffffffffffffffff8111156106ef5760008081fd5b8701603f810189136107015760008081fd5b8481013560406107136106a78361065e565b8281528b828486010111156107285760008081fd5b82828501898301376000928101880192909252508452509183019183016106cf565b509695505050505050565b6000806040838503121561076857600080fd5b823567ffffffffffffffff8082111561078057600080fd5b818501915085601f83011261079457600080fd5b813560206107a46106a78361063a565b82815260059290921b840181019181810190898411156107c357600080fd5b948201945b838610156107ea5785356107db816105af565b825294820194908201906107c8565b9650508601359250508082111561080057600080fd5b5061080d85828601610686565b9150509250929050565b60006020828403121561082957600080fd5b81356104b8816105af565b6020808252601390820152721bdb9b1e4818591b5a5b881b585e4818d85b1b606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b80516020808301519190811015610898576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016108c6576108c661089e565b5060010190565b6000602082840312156108df57600080fd5b81516104b8816105af565b6000602082840312156108fc57600080fd5b815160ff811681146104b857600080fd5b818103818111156109205761092061089e565b92915050565b600181815b808511156109615781600019048211156109475761094761089e565b8085161561095457918102915b93841c939080029061092b565b509250929050565b60008261097857506001610920565b8161098557506000610920565b816001811461099b57600281146109a5576109c1565b6001915050610920565b60ff8411156109b6576109b661089e565b50506001821b610920565b5060208310610133831016604e8410600b84101617156109e4575081810a610920565b6109ee8383610926565b8060001904821115610a0257610a0261089e565b029392505050565b60006104b88383610969565b80820281158282048414176109205761092061089e565b60006020808385031215610a4057600080fd5b825167ffffffffffffffff811115610a5757600080fd5b8301601f81018513610a6857600080fd5b8051610a766106a78261065e565b8181528684838501011115610a8a57600080fd5b60005b82811015610aa8578381018501518282018601528401610a8d565b50600091810190930152509392505050565b600060808284031215610acc57600080fd5b6040516080810167ffffffffffffffff8282108183111715610af057610af06105f3565b81604052845191508160070b8214610b0757600080fd5b9082526020840151908082168214610b1e57600080fd5b5060208201526040830151600381900b8114610b3957600080fd5b6040820152606092830151928101929092525091905056fea26469706673582212202e02f2ca8d681d7d4362e487bd25f6fec105d2b57477d24bd22001c12d08619e64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrice(address)": {
        "details": "returns price of token",
        "params": {
          "kToken": "address of the kToken"
        },
        "returns": {
          "price": "scaled price of the token"
        }
      },
      "getUnderlyingPrice(address)": {
        "details": "returns price of cToken underlying",
        "params": {
          "kToken": "address of the kToken"
        },
        "returns": {
          "_0": "scaled price of the underlying"
        }
      },
      "setDirectPrice(address,uint256)": {
        "details": "set price of the token directly, only in case if there is no feed",
        "params": {
          "price": "underlying price in 18 decimal places",
          "token": "address of the underlying token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isPriceOracle()": {
        "notice": "Indicator that this is a PriceOracle contract (for inspection)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19024,
        "contract": "contracts/Pyth/PythOracle.sol:PythOracle",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19038,
        "contract": "contracts/Pyth/PythOracle.sol:PythOracle",
        "label": "pythPriceIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 19042,
        "contract": "contracts/Pyth/PythOracle.sol:PythOracle",
        "label": "directPrices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}