{
  "address": "0xC04F54AD1a7Eeb3ff7dB9f716DE52806b2e92E2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gasReceiver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clientContract_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "clientChain_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gasReceiver_",
          "type": "address"
        }
      ],
      "name": "_setAxelarGasReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "clientChain_",
          "type": "string"
        }
      ],
      "name": "_setClientChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientContract_",
          "type": "address"
        }
      ],
      "name": "_setClientContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kToken_",
          "type": "address"
        }
      ],
      "name": "_setKToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clientChain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clientContract",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "gasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasReceiver",
      "outputs": [
        {
          "internalType": "contract IAxelarGasService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0ebfbcb2f3a8327216e3911aa32dd71f3fecd7b0b22969b3ab6458ec9fdd431",
  "receipt": {
    "to": null,
    "from": "0x6027862A465EF7d842e32A8a16a39D4D83c25D3A",
    "contractAddress": "0xC04F54AD1a7Eeb3ff7dB9f716DE52806b2e92E2E",
    "transactionIndex": 105,
    "gasUsed": "1451839",
    "logsBloom": "0x000000000000000000000000000080000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000004000000000000000000040200000000000000000008000000000000000000200000000000004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x396178b7e023eee8fd0136017bdc5c5893fbed222599a9cbbeef89d46fead926",
    "transactionHash": "0xa0ebfbcb2f3a8327216e3911aa32dd71f3fecd7b0b22969b3ab6458ec9fdd431",
    "logs": [
      {
        "transactionIndex": 105,
        "blockNumber": 7082641,
        "transactionHash": "0xa0ebfbcb2f3a8327216e3911aa32dd71f3fecd7b0b22969b3ab6458ec9fdd431",
        "address": "0xC04F54AD1a7Eeb3ff7dB9f716DE52806b2e92E2E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006027862a465ef7d842e32a8a16a39d4d83c25d3a"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0x396178b7e023eee8fd0136017bdc5c5893fbed222599a9cbbeef89d46fead926"
      }
    ],
    "blockNumber": 7082641,
    "cumulativeGasUsed": "17079110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xe432150cce91c13a887f7D836923d5597adD8E31",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6",
    "0x6f6318b3840C875106fDf1569776856022B4b28F",
    "binance"
  ],
  "numDeployments": 1,
  "solcInputHash": "b64876b1e957758841b9047c285c3bf7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clientContract_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"clientChain_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasReceiver_\",\"type\":\"address\"}],\"name\":\"_setAxelarGasReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"clientChain_\",\"type\":\"string\"}],\"name\":\"_setClientChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientContract_\",\"type\":\"address\"}],\"name\":\"_setClientContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken_\",\"type\":\"address\"}],\"name\":\"_setKToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clientChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clientContract\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"gasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasReceiver\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidAddress()\":[{\"details\":\"Thrown when a function is called with an invalid address.\"}],\"NotApprovedByGateway()\":[{\"details\":\"Thrown when the call is not approved by the Axelar Gateway.\"}]},\"kind\":\"dev\",\"methods\":{\"execute(bytes32,string,string,bytes)\":{\"details\":\"This function ensures the call is approved by Axelar Gateway before execution. It uses a hash of the payload for validation and internally calls _execute for the actual command execution. Reverts if the validation fails.\",\"params\":{\"commandId\":\"The unique identifier of the cross-chain message being executed.\",\"payload\":\"The payload of the message payload.\",\"sourceAddress\":\"The address on the source chain that sent the message.\",\"sourceChain\":\"The name of the source chain from which the message originated.\"}},\"gateway()\":{\"returns\":{\"_0\":\"The Axelar Gateway instance.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes32,string,string,bytes)\":{\"notice\":\"Executes the cross-chain command after validating it with the Axelar Gateway.\"},\"gateway()\":{\"notice\":\"Returns the address of the AxelarGateway contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageHub/MessageHub.sol\":\"MessageHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\n/**\\n * @title AxelarExecutable\\n * @dev Abstract contract to be inherited by contracts that need to execute cross-chain commands via Axelar's Gateway.\\n * It implements the IAxelarExecutable interface.\\n */\\nabstract contract AxelarExecutable is IAxelarExecutable {\\n    /// @dev Reference to the Axelar Gateway contract.\\n    address internal immutable gatewayAddress;\\n\\n    /**\\n     * @dev Contract constructor that sets the Axelar Gateway address.\\n     * Reverts if the provided address is the zero address.\\n     * @param gateway_ The address of the Axelar Gateway contract.\\n     */\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gatewayAddress = gateway_;\\n    }\\n\\n    /**\\n     * @notice Executes the cross-chain command after validating it with the Axelar Gateway.\\n     * @dev This function ensures the call is approved by Axelar Gateway before execution.\\n     * It uses a hash of the payload for validation and internally calls _execute for the actual command execution.\\n     * Reverts if the validation fails.\\n     * @param commandId The unique identifier of the cross-chain message being executed.\\n     * @param sourceChain The name of the source chain from which the message originated.\\n     * @param sourceAddress The address on the source chain that sent the message.\\n     * @param payload The payload of the message payload.\\n     */\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external virtual {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway().validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(commandId, sourceChain, sourceAddress, payload);\\n    }\\n\\n    /**\\n     * @dev Internal virtual function to be overridden by child contracts to execute the command.\\n     * It allows child contracts to define their custom command execution logic.\\n     * @param commandId The identifier of the command to execute.\\n     * @param sourceChain The name of the source chain from which the command originated.\\n     * @param sourceAddress The address on the source chain that sent the command.\\n     * @param payload The payload of the command to be executed.\\n     */\\n    function _execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual;\\n\\n    /**\\n     * @notice Returns the address of the AxelarGateway contract.\\n     * @return The Axelar Gateway instance.\\n     */\\n    function gateway() public view returns (IAxelarGateway) {\\n        return IAxelarGateway(gatewayAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x89078799d3ff3501cb859e3b87c9ac9541dd54bcdeb194b230324a2d74f6a74a\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\n/**\\n * @title IAxelarExecutable\\n * @dev Interface for a contract that is executable by Axelar Gateway's cross-chain message passing.\\n * It defines a standard interface to execute commands sent from another chain.\\n */\\ninterface IAxelarExecutable {\\n    /**\\n     * @dev Thrown when a function is called with an invalid address.\\n     */\\n    error InvalidAddress();\\n\\n    /**\\n     * @dev Thrown when the call is not approved by the Axelar Gateway.\\n     */\\n    error NotApprovedByGateway();\\n\\n    /**\\n     * @notice Returns the address of the AxelarGateway contract.\\n     * @return The Axelar Gateway contract associated with this executable contract.\\n     */\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    /**\\n     * @notice Executes the specified command sent from another chain.\\n     * @dev This function is called by the Axelar Gateway to carry out cross-chain commands.\\n     * Reverts if the call is not approved by the gateway or other checks fail.\\n     * @param commandId The identifier of the command to execute.\\n     * @param sourceChain The name of the source chain from where the command originated.\\n     * @param sourceAddress The address on the source chain that sent the command.\\n     * @param payload The payload of the command to be executed. This typically includes the function selector and encoded arguments.\\n     */\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc62de7533d4891bfd5bd8792e6638cb1d3ff4389dee2ce1f1dc8de235a057daa\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { GasInfo } from '../types/GasEstimationTypes.sol';\\nimport { IInterchainGasEstimation } from './IInterchainGasEstimation.sol';\\nimport { IUpgradable } from './IUpgradable.sol';\\n\\n/**\\n * @title IAxelarGasService Interface\\n * @notice This is an interface for the AxelarGasService contract which manages gas payments\\n * and refunds for cross-chain communication on the Axelar network.\\n * @dev This interface inherits IUpgradable\\n */\\ninterface IAxelarGasService is IInterchainGasEstimation, IUpgradable {\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n    error InvalidGasUpdates();\\n    error InvalidParams();\\n    error InsufficientGasPayment(uint256 required, uint256 provided);\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event Refunded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Pay for gas for any type of contract execution on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @dev If estimateOnChain is true, the function will estimate the gas cost and revert if the payment is insufficient.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param executionGasLimit The gas limit for the contract call\\n     * @param estimateOnChain Flag to enable on-chain gas estimation\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     * @param params Additional parameters for gas payment. This can be left empty for normal contract call payments.\\n     */\\n    function payGas(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        uint256 executionGasLimit,\\n        bool estimateOnChain,\\n        address refundAddress,\\n        bytes calldata params\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for a contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for a contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using native currency for a contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using native currency for a contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for an express contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForExpressCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for an express contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using native currency for an express contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForExpressCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using native currency for an express contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Add additional gas payment using ERC20 tokens after initiating a cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param gasToken The ERC20 token address used to add gas\\n     * @param gasFeeAmount The amount of tokens to add as gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Add additional gas payment using native currency after initiating a cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Add additional gas payment using ERC20 tokens after initiating an express cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param gasToken The ERC20 token address used to add gas\\n     * @param gasFeeAmount The amount of tokens to add as gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Add additional gas payment using native currency after initiating an express cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates the gas price for a specific chain.\\n     * @dev This function is called by the gas oracle to update the gas prices for a specific chains.\\n     * @param chains Array of chain names\\n     * @param gasUpdates Array of gas updates\\n     */\\n    function updateGasInfo(string[] calldata chains, GasInfo[] calldata gasUpdates) external;\\n\\n    /**\\n     * @notice Allows the gasCollector to collect accumulated fees from the contract.\\n     * @dev Use address(0) as the token address for native currency.\\n     * @param receiver The address to receive the collected fees\\n     * @param tokens Array of token addresses to be collected\\n     * @param amounts Array of amounts to be collected for each respective token address\\n     */\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /**\\n     * @notice Refunds gas payment to the receiver in relation to a specific cross-chain transaction.\\n     * @dev Only callable by the gasCollector.\\n     * @dev Use address(0) as the token address to refund native currency.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param receiver The address to receive the refund\\n     * @param token The token address to be refunded\\n     * @param amount The amount to refund\\n     */\\n    function refund(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the designated gas collector.\\n     * @return address of the gas collector\\n     */\\n    function gasCollector() external returns (address);\\n}\\n\",\"keccak256\":\"0x7ad77d3af41f342e9032889a7b5aa224ab0c6dfaf9ce9350fe403d4a596c5eae\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAxelarGateway\\n * @dev Interface for the Axelar Gateway that supports general message passing and contract call execution.\\n */\\ninterface IAxelarGateway {\\n    /**\\n     * @notice Emitted when a contract call is made through the gateway.\\n     * @dev Logs the attempt to call a contract on another chain.\\n     * @param sender The address of the sender who initiated the contract call.\\n     * @param destinationChain The name of the destination chain.\\n     * @param destinationContractAddress The address of the contract on the destination chain.\\n     * @param payloadHash The keccak256 hash of the sent payload data.\\n     * @param payload The payload data used for the contract call.\\n     */\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    /**\\n     * @notice Sends a contract call to another chain.\\n     * @dev Initiates a cross-chain contract call through the gateway to the specified destination chain and contract.\\n     * @param destinationChain The name of the destination chain.\\n     * @param contractAddress The address of the contract on the destination chain.\\n     * @param payload The payload data to be used in the contract call.\\n     */\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    /**\\n     * @notice Checks if a contract call is approved.\\n     * @dev Determines whether a given contract call, identified by the commandId and payloadHash, is approved.\\n     * @param commandId The identifier of the command to check.\\n     * @param sourceChain The name of the source chain.\\n     * @param sourceAddress The address of the sender on the source chain.\\n     * @param contractAddress The address of the contract where the call will be executed.\\n     * @param payloadHash The keccak256 hash of the payload data.\\n     * @return True if the contract call is approved, false otherwise.\\n     */\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Validates and approves a contract call.\\n     * @dev Validates the given contract call information and marks it as approved if valid.\\n     * @param commandId The identifier of the command to validate.\\n     * @param sourceChain The name of the source chain.\\n     * @param sourceAddress The address of the sender on the source chain.\\n     * @param payloadHash The keccak256 hash of the payload data.\\n     * @return True if the contract call is validated and approved, false otherwise.\\n     */\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a command has been executed.\\n     * @dev Determines whether a command, identified by the commandId, has been executed.\\n     * @param commandId The identifier of the command to check.\\n     * @return True if the command has been executed, false otherwise.\\n     */\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IContractIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// General interface for upgradable contracts\\ninterface IContractIdentifier {\\n    /**\\n     * @notice Returns the contract ID. It can be used as a check during upgrades.\\n     * @dev Meant to be overridden in derived contracts.\\n     * @return bytes32 The contract ID\\n     */\\n    function contractId() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x21a94655f7f1ed3d7188bd38ce6187892c615b80f9a74e123cbc38113d855a35\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IContractIdentifier } from './IContractIdentifier.sol';\\n\\ninterface IImplementation is IContractIdentifier {\\n    error NotProxy();\\n\\n    function setup(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa7f275514d44bec3ab8ab8c768736329174d7cc6c5cd329c3509a66bce9cd468\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IInterchainGasEstimation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { GasEstimationType, GasInfo } from '../types/GasEstimationTypes.sol';\\n\\n/**\\n * @title IInterchainGasEstimation Interface\\n * @notice This is an interface for the InterchainGasEstimation contract\\n * which allows for estimating gas fees for cross-chain communication on the Axelar network.\\n */\\ninterface IInterchainGasEstimation {\\n    error UnsupportedEstimationType(GasEstimationType gasEstimationType);\\n\\n    /**\\n     * @notice Event emitted when the gas price for a specific chain is updated.\\n     * @param chain The name of the chain\\n     * @param info The gas info for the chain\\n     */\\n    event GasInfoUpdated(string chain, GasInfo info);\\n\\n    /**\\n     * @notice Returns the gas price for a specific chain.\\n     * @param chain The name of the chain\\n     * @return gasInfo The gas info for the chain\\n     */\\n    function getGasInfo(string calldata chain) external view returns (GasInfo memory);\\n\\n    /**\\n     * @notice Estimates the gas fee for a cross-chain contract call.\\n     * @param destinationChain Axelar registered name of the destination chain\\n     * @param destinationAddress Destination contract address being called\\n     * @param executionGasLimit The gas limit to be used for the destination contract execution,\\n     *        e.g. pass in 200k if your app consumes needs upto 200k for this contract call\\n     * @param params Additional parameters for the gas estimation\\n     * @return gasEstimate The cross-chain gas estimate, in terms of source chain's native gas token that should be forwarded to the gas service.\\n     */\\n    function estimateGasFee(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        uint256 executionGasLimit,\\n        bytes calldata params\\n    ) external view returns (uint256 gasEstimate);\\n}\\n\",\"keccak256\":\"0x5463c0d3632e53d3906796d4283a627bd7ebc63d0092685715d98340db9516ff\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IOwnable Interface\\n * @notice IOwnable is an interface that abstracts the implementation of a\\n * contract with ownership control features. It's commonly used in upgradable\\n * contracts and includes the functionality to get current owner, transfer\\n * ownership, and propose and accept ownership.\\n */\\ninterface IOwnable {\\n    error NotOwner();\\n    error InvalidOwner();\\n    error InvalidOwnerAddress();\\n\\n    event OwnershipTransferStarted(address indexed newOwner);\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    /**\\n     * @notice Returns the current owner of the contract.\\n     * @return address The address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the pending owner of the contract.\\n     * @return address The address of the pending owner\\n     */\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new address\\n     * @param newOwner The address to transfer ownership to\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Proposes to transfer the contract's ownership to a new address.\\n     * The new owner needs to accept the ownership explicitly.\\n     * @param newOwner The address to transfer ownership to\\n     */\\n    function proposeOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Transfers ownership to the pending owner.\\n     * @dev Can only be called by the pending owner\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x5cb5691c9293e3011e1b133485411e8933ca1e110f2436a663df12991d134bf7\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IOwnable } from './IOwnable.sol';\\nimport { IImplementation } from './IImplementation.sol';\\n\\n// General interface for upgradable contracts\\ninterface IUpgradable is IOwnable, IImplementation {\\n    error InvalidCodeHash();\\n    error InvalidImplementation();\\n    error SetupFailed();\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4e1f84c9711c3c15c77aee5fce8de99fcb49a902c7e6ff24626c924a60b8c22d\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/libs/AddressString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n    error InvalidAddressString();\\n\\n    function toAddress(string memory addressString) internal pure returns (address) {\\n        bytes memory stringBytes = bytes(addressString);\\n        uint160 addressNumber = 0;\\n        uint8 stringByte;\\n\\n        if (stringBytes.length != 42 || stringBytes[0] != '0' || stringBytes[1] != 'x') revert InvalidAddressString();\\n\\n        for (uint256 i = 2; i < 42; ++i) {\\n            stringByte = uint8(stringBytes[i]);\\n\\n            if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n            else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n            else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n            else revert InvalidAddressString();\\n\\n            addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n        }\\n\\n        return address(addressNumber);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address address_) internal pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(address_);\\n        bytes memory characters = '0123456789abcdef';\\n        bytes memory stringBytes = new bytes(42);\\n\\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n\\n        for (uint256 i; i < 20; ++i) {\\n            stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n            stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n        }\\n\\n        return string(stringBytes);\\n    }\\n}\\n\",\"keccak256\":\"0x4afddc49329b9a253af8066b60be50ed28c9fbeff2743ca4f3552d9e6738727c\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/types/GasEstimationTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title GasEstimationType\\n * @notice This enum represents the gas estimation types for different chains.\\n */\\nenum GasEstimationType {\\n    Default,\\n    OptimismEcotone,\\n    OptimismBedrock,\\n    Arbitrum,\\n    Scroll\\n}\\n\\n/**\\n * @title GasInfo\\n * @notice This struct represents the gas pricing information for a specific chain.\\n * @dev Smaller uint types are used for efficient struct packing to save storage costs.\\n */\\nstruct GasInfo {\\n    /// @dev Custom gas pricing rule, such as L1 data fee on L2s\\n    uint64 gasEstimationType;\\n    /// @dev Scalar value needed for specific gas estimation types, expected to be less than 1e10\\n    uint64 l1FeeScalar;\\n    /// @dev Axelar base fee for cross-chain message approval on destination, in terms of source native gas token\\n    uint128 axelarBaseFee;\\n    /// @dev Gas price of destination chain, in terms of the source chain token, i.e dest_gas_price * dest_token_market_price / src_token_market_price\\n    uint128 relativeGasPrice;\\n    /// @dev Needed for specific gas estimation types. Blob base fee of destination chain, in terms of the source chain token, i.e dest_blob_base_fee * dest_token_market_price / src_token_market_price\\n    uint128 relativeBlobBaseFee;\\n    /// @dev Axelar express fee for express execution, in terms of source chain token\\n    uint128 expressFee;\\n}\\n\",\"keccak256\":\"0x7da6d20700698dfae8f8252c442e4bebd29030ffcdac4fbbe986f1ddbcb6365c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(\\r\\n        address[] calldata kTokens\\r\\n    ) external virtual returns (uint[] memory);\\r\\n    function exitMarket(address kToken) external virtual returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function redeemAllowed(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    // Do not remove, still used by KToken\\r\\n    function redeemVerify(\\r\\n        address kToken,\\r\\n        address redeemer,\\r\\n        uint redeemAmount,\\r\\n        uint redeemTokens\\r\\n    ) external pure virtual;\\r\\n\\r\\n    function borrowAllowed(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    function transferAllowed(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        uint repayAmount\\r\\n    ) external view virtual returns (uint, uint);\\r\\n}\\r\\n\\r\\n// The hooks that were patched out of the comptroller to make room for the supply caps, if we need them\\r\\nabstract contract ComptrollerInterfaceWithAllVerificationHooks is\\r\\n    ComptrollerInterface\\r\\n{\\r\\n    function mintVerify(\\r\\n        address kToken,\\r\\n        address minter,\\r\\n        uint mintAmount,\\r\\n        uint mintTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    // Included in ComptrollerInterface already\\r\\n    // function redeemVerify(address kToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowVerify(\\r\\n        address kToken,\\r\\n        address borrower,\\r\\n        uint borrowAmount\\r\\n    ) external virtual;\\r\\n\\r\\n    function repayBorrowVerify(\\r\\n        address kToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex\\r\\n    ) external virtual;\\r\\n\\r\\n    function liquidateBorrowVerify(\\r\\n        address kTokenBorrowed,\\r\\n        address kTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function seizeVerify(\\r\\n        address kTokenCollateral,\\r\\n        address kTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual;\\r\\n\\r\\n    function transferVerify(\\r\\n        address kToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint transferTokens\\r\\n    ) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ae39528ead57993b2652575ffa1457cbe8c1021be94cff255293da3e0dfdd39\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved\\r\\n     * @return success Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return remaining The number of tokens allowed to be spent\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x93af1d53aab720b15cf34b59c36bf6c9f692987f5a8dd4e5f1f133a4394f980c\",\"license\":\"BSD-3-Clause\"},\"contracts/KTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./irm/InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./TokenErrorReporter.sol\\\";\\r\\n\\r\\ncontract KTokenStorage {\\r\\n    /// @dev Guard variable for re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @notice EIP-20 token name for this token\\r\\n    string public name;\\r\\n\\r\\n    /// @notice EIP-20 token symbol for this token\\r\\n    string public symbol;\\r\\n\\r\\n    /// @notice EIP-20 token decimals for this token\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /// @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    // @notice Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n\\r\\n    /// @notice Pending administrator for this contract\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /// @notice Contract which oversees inter-kToken operations\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /// @notice Model which tells what the current interest rate should be\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // @notice Initial exchange rate used when minting the first KTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /// @notice Fraction of interest currently set aside for reserves\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /// @notice Block number that interest was last accrued at\\r\\n    uint public accrualBlockTimestamp;\\r\\n\\r\\n    /// @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /// @notice Total amount of outstanding borrows of the underlying in this market\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /// @notice Total amount of reserves of the underlying held in this market\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping(address => uint) internal accountTokens;\\r\\n\\r\\n    /// @notice Approved token transfer amounts on behalf of others\\r\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // @notice Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /// @notice Share of seized collateral that is added to reserves\\r\\n    uint public protocolSeizeShareMantissa;\\r\\n}\\r\\n\\r\\nabstract contract KTokenInterface is KTokenStorage {\\r\\n    /// @notice Indicator that this is a KToken contract (for inspection)\\r\\n    bool public constant isKToken = true;\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /// @notice Event emitted when interest is accrued\\r\\n    event AccrueInterest(\\r\\n        uint cashPrior,\\r\\n        uint interestAccumulated,\\r\\n        uint borrowIndex,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when tokens are redeemed\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /// @notice Event emitted when underlying is borrowed\\r\\n    event Borrow(\\r\\n        address borrower,\\r\\n        uint borrowAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is changed\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /// @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /// @notice Event emitted when comptroller is changed\\r\\n    event NewComptroller(\\r\\n        ComptrollerInterface oldComptroller,\\r\\n        ComptrollerInterface newComptroller\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when interestRateModel is changed\\r\\n    event NewMarketInterestRateModel(\\r\\n        InterestRateModel oldInterestRateModel,\\r\\n        InterestRateModel newInterestRateModel\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserve factor is changed\\r\\n    event NewReserveFactor(\\r\\n        uint oldReserveFactorMantissa,\\r\\n        uint newReserveFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the protocol seize share is changed\\r\\n    event NewProtocolSeizeShare(\\r\\n        uint oldProtocolSeizeShareMantissa,\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are added\\r\\n    event ReservesAdded(\\r\\n        address benefactor,\\r\\n        uint addAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the reserves are reduced\\r\\n    event ReservesReduced(\\r\\n        address admin,\\r\\n        uint reduceAmount,\\r\\n        uint newTotalReserves\\r\\n    );\\r\\n\\r\\n    /// @notice EIP20 Transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /// @notice EIP20 Approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view virtual returns (uint);\\r\\n    function balanceOf(address owner) external view virtual returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\r\\n    function getAccountSnapshot(\\r\\n        address account\\r\\n    ) external view virtual returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerTimestamp() external view virtual returns (uint);\\r\\n    function supplyRatePerTimestamp() external view virtual returns (uint);\\r\\n    function totalBorrowsCurrent() external virtual returns (uint);\\r\\n    function borrowBalanceCurrent(\\r\\n        address account\\r\\n    ) external virtual returns (uint);\\r\\n    function borrowBalanceStored(\\r\\n        address account\\r\\n    ) external view virtual returns (uint);\\r\\n    function exchangeRateCurrent() external virtual returns (uint);\\r\\n    function exchangeRateStored() external view virtual returns (uint);\\r\\n    function getCash() external view virtual returns (uint);\\r\\n    function accrueInterest() external virtual returns (uint);\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(\\r\\n        address payable newPendingAdmin\\r\\n    ) external virtual returns (uint);\\r\\n    function _acceptAdmin() external virtual returns (uint);\\r\\n    function _setComptroller(\\r\\n        ComptrollerInterface newComptroller\\r\\n    ) external virtual returns (uint);\\r\\n    function _setReserveFactor(\\r\\n        uint newReserveFactorMantissa\\r\\n    ) external virtual returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\r\\n    function _setInterestRateModel(\\r\\n        InterestRateModel newInterestRateModel\\r\\n    ) external virtual returns (uint);\\r\\n    function _setProtocolSeizeShare(\\r\\n        uint newProtocolSeizeShareMantissa\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\ncontract KErc20Storage {\\r\\n    /// @notice Underlying asset for this KToken\\r\\n    address public underlying;\\r\\n    /// @notice messageHub for this KToken\\r\\n    address public messageHub;\\r\\n}\\r\\n\\r\\nabstract contract KErc20BaseInterface is KErc20Storage {\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\r\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20Interface {\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external virtual returns (uint);\\r\\n    function mintWithPermit(\\r\\n        uint mintAmount,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n}\\r\\n\\r\\nabstract contract KErc20CrossChainInterface {\\r\\n    /*** MessageHub Interface ***/\\r\\n\\r\\n    function mint(\\r\\n        address minter,\\r\\n        uint mintAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrow(\\r\\n        address payer,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function repayBorrowBehalf(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external virtual returns (uint);\\r\\n    function liquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external virtual returns (uint);\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function redeem(uint redeemTokens) external payable virtual returns (uint);\\r\\n    function redeemUnderlying(\\r\\n        uint redeemAmount\\r\\n    ) external payable virtual returns (uint);\\r\\n    function borrow(uint borrowAmount) external payable virtual returns (uint);\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setMessageHub(address newMessageHub) external virtual;\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewMessageHub(\\r\\n        address oldMessageHub,\\r\\n        address messageHub\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract KDelegationStorage {\\r\\n    /// @notice Implementation address for this contract\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract KDelegatorInterface is KDelegationStorage {\\r\\n    /// @notice Emitted when implementation is changed\\r\\n    event NewImplementation(\\r\\n        address oldImplementation,\\r\\n        address newImplementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(\\r\\n        address implementation_,\\r\\n        bool allowResign,\\r\\n        bytes memory becomeImplementationData\\r\\n    ) external virtual;\\r\\n}\\r\\n\\r\\nabstract contract KDelegateInterface is KDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) external virtual;\\r\\n\\r\\n    /// @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n    function _resignImplementation() external virtual;\\r\\n}\\r\\n\\r\\ncontract KClientStorage {\\r\\n\\r\\n    /// @notice MessageHub implementation's address\\r\\n    address public messageHub;\\r\\n\\r\\n    /// @notice Administrator for this contract\\r\\n    address payable public admin;\\r\\n\\r\\n    /// @notice Prevents re-initialization\\r\\n    bool private initialized;\\r\\n}\\r\\n\\r\\nabstract contract KClientInterface is KClientStorage {\\r\\n    /*** User Interface ***/\\r\\n    function mint(uint mintAmount) external payable virtual;\\r\\n    function repayBorrow(uint repayAmount) external payable virtual;\\r\\n    function repayBorrowBehalf(\\r\\n        address borrower,\\r\\n        uint repayAmount\\r\\n    ) external payable virtual;\\r\\n    function liquidateBorrow(\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        KTokenInterface kTokenCollateral\\r\\n    ) external payable virtual;\\r\\n    function releaseETH(\\r\\n        address payable recipient,\\r\\n        uint amount\\r\\n    ) external virtual returns (bool);\\r\\n\\r\\n    /// @notice Event emitted when tokens are minted\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /// @notice Event emitted when a borrow is repaid\\r\\n    event RepayBorrow(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint accountBorrows,\\r\\n        uint totalBorrows\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when a borrow is liquidated\\r\\n    event LiquidateBorrow(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        address kTokenCollateral,\\r\\n        uint seizeTokens\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when the message hub is changed\\r\\n    event NewMessageHub(\\r\\n        address oldMessageHub,\\r\\n        address messageHub\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x27bd2c41a07b73054ee807baa378e94de073642a9753718438a9873a20355ecc\",\"license\":\"BSD-3-Clause\"},\"contracts/MessageHub/MessageHub.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./MessageHubBase.sol\\\";\\r\\n\\r\\ncontract MessageHub is MessageHubBase, MessageHubInterfaces {\\r\\n\\r\\n    constructor(\\r\\n        address kToken_,\\r\\n        address gateway_,\\r\\n        address gasReceiver_,\\r\\n        address clientContract_,\\r\\n        string memory clientChain_\\r\\n    ) MessageHubBase(\\r\\n    kToken_,\\r\\n    gateway_,\\r\\n    gasReceiver_,\\r\\n    clientContract_,\\r\\n    clientChain_\\r\\n    )\\r\\n    {}\\r\\n\\r\\n    function sendMessage(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external payable override {\\r\\n\\r\\n        bytes memory payload = abi.encode(recipient, amount);\\r\\n        _sendMessageInternal(sender, payload);\\r\\n    }\\r\\n\\r\\n    function _execute(\\r\\n        bytes32 commandId,\\r\\n        string calldata sourceChain,\\r\\n        string calldata sourceAddress,\\r\\n        bytes calldata payload\\r\\n    ) internal override {\\r\\n\\r\\n        bytes4 selector = bytes4(payload[: 4]);\\r\\n\\r\\n        if (selector == KErc20CrossChainInterface.mint.selector) {\\r\\n            (, address sender, uint amount) = abi.decode(payload, (bytes4, address, uint));\\r\\n            KErc20CrossChainInterface(kToken).mint(sender, amount);\\r\\n        } else if (selector == KErc20CrossChainInterface.repayBorrow.selector) {\\r\\n            (, address sender, uint amount) = abi.decode(payload, (bytes4, address, uint));\\r\\n            KErc20CrossChainInterface(kToken).repayBorrow(sender, amount);\\r\\n        } else if (selector == KErc20CrossChainInterface.repayBorrowBehalf.selector) {\\r\\n            (, address sender, address borrower, uint amount) = abi.decode(payload, (bytes4, address, address, uint));\\r\\n            KErc20CrossChainInterface(kToken).repayBorrowBehalf(sender, borrower, amount);\\r\\n        } else {\\r\\n            revert(\\\"Unknown function selector\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd2488b9c5fe6869082e28b476df8606459be514eb84e633275d90d567c4392f5\",\"license\":\"UNLICENSED\"},\"contracts/MessageHub/MessageHubBase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"../KTokenInterfaces.sol\\\";\\r\\nimport \\\"./MessageHubInterfaces.sol\\\";\\r\\n\\r\\nabstract contract MessageHubBase is MessageHubStorage, AxelarExecutable, Ownable {\\r\\n    using StringToAddress for string;\\r\\n    using AddressToString for address;\\r\\n\\r\\n    constructor(\\r\\n        address kToken_,\\r\\n        address gateway_,\\r\\n        address gasReceiver_,\\r\\n        address clientContract_,\\r\\n        string memory clientChain_\\r\\n    )\\r\\n    AxelarExecutable(gateway_)\\r\\n    {\\r\\n        kToken = kToken_;\\r\\n        gasReceiver = IAxelarGasService(gasReceiver_);\\r\\n        clientContract = clientContract_.toString();\\r\\n        clientChain = clientChain_;\\r\\n    }\\r\\n\\r\\n    function _setKToken(address kToken_) external onlyOwner {\\r\\n        kToken = kToken_;\\r\\n    }\\r\\n\\r\\n    function _setAxelarGasReceiver(address gasReceiver_) external onlyOwner {\\r\\n        gasReceiver = IAxelarGasService(gasReceiver_);\\r\\n    }\\r\\n\\r\\n    function _setClientContract(address clientContract_) external onlyOwner {\\r\\n        clientContract = clientContract_.toString();\\r\\n    }\\r\\n\\r\\n    function _setClientChain(string memory clientChain_) external onlyOwner {\\r\\n        clientChain = clientChain_;\\r\\n    }\\r\\n\\r\\n    function _sendEth(\\r\\n        address payable recipient,\\r\\n        uint amount\\r\\n    ) internal {\\r\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Refund  failed\\\");\\r\\n    }\\r\\n\\r\\n    function _sendMessageInternal(\\r\\n        address sender,\\r\\n        bytes memory payload\\r\\n    ) internal {\\r\\n        require(msg.sender == kToken, \\\"Unauthorized\\\");\\r\\n\\r\\n        uint gas = gasReceiver.estimateGasFee(\\r\\n            clientChain,\\r\\n            clientContract,\\r\\n            payload,\\r\\n            2000,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.value >= gas, \\\"Insufficient funds\\\");\\r\\n\\r\\n        gasReceiver.payNativeGasForContractCall{value: gas}(\\r\\n            address(this),\\r\\n            clientChain,\\r\\n            clientContract,\\r\\n            payload,\\r\\n            sender\\r\\n        );\\r\\n\\r\\n        gateway().callContract(clientChain, clientContract, payload);\\r\\n        if (msg.value - gas > 0) {\\r\\n            _sendEth(payable(sender), msg.value - gas);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function gasEstimate(\\r\\n        bytes memory payload,\\r\\n        uint gasLimit\\r\\n    ) external view returns (uint gas) {\\r\\n\\r\\n        gas = gasReceiver.estimateGasFee(\\r\\n            clientChain,\\r\\n            clientContract,\\r\\n            payload,\\r\\n            gasLimit,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc60bdfd8dae4facc1cc9809491dbb18995f9f176f71ae7fb87cd758c3665d8f0\",\"license\":\"UNLICENSED\"},\"contracts/MessageHub/MessageHubInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\r\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\r\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\r\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/libs/AddressString.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MessageHubStorage {\\r\\n    address public kToken;\\r\\n\\r\\n    IAxelarGasService public gasReceiver;\\r\\n\\r\\n    string public clientContract;\\r\\n    string public clientChain;\\r\\n}\\r\\n\\r\\nabstract contract MessageHubInterfaces {\\r\\n\\r\\n    function sendMessage(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external payable virtual;\\r\\n}\\r\\n\\r\\nabstract contract MessageHubClientInterface {\\r\\n\\r\\n    function sendMessage(\\r\\n        address sender,\\r\\n        bytes memory payload\\r\\n    ) external payable virtual;\\r\\n}\",\"keccak256\":\"0xfa5d06b10a3b6f4f268e33c22976417bdc4fabdc994a6ff3d269c05c4f442d47\",\"license\":\"UNLICENSED\"},\"contracts/TokenErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        SET_GAS_AMOUNT_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_ACCRUE_INTEREST_FAILED,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_OWNER_CHECK,\\r\\n        SET_PROTOCOL_SEIZE_SHARE_FRESH_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n     **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n     */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n     */\\r\\n    function failOpaque(\\r\\n        Error err,\\r\\n        FailureInfo info,\\r\\n        uint opaqueError\\r\\n    ) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9214409e0b914b6ff5ef77e03ecefe0c9271d1e23d27c6dada7a8b1a1235ae17\",\"license\":\"BSD-3-Clause\"},\"contracts/irm/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title Kawa's InterestRateModel Interface\\r\\n * @author Kawa\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @return The borrow rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves\\r\\n    ) external view virtual returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply interest rate per timestamp\\r\\n     * @param cash The total amount of cash the market has\\r\\n     * @param borrows The total amount of borrows the market has outstanding\\r\\n     * @param reserves The total amount of reserves the market has\\r\\n     * @param reserveFactorMantissa The current reserve factor the market has\\r\\n     * @return The supply rate per timestamp (as a percentage, and scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(\\r\\n        uint cash,\\r\\n        uint borrows,\\r\\n        uint reserves,\\r\\n        uint reserveFactorMantissa\\r\\n    ) external view virtual returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x81db3c2dc31dd9eea2551206086f0c2ab90b150ca9febd1aa2cef5b1f351379d\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "InvalidAddress()": [
        {
          "details": "Thrown when a function is called with an invalid address."
        }
      ],
      "NotApprovedByGateway()": [
        {
          "details": "Thrown when the call is not approved by the Axelar Gateway."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "execute(bytes32,string,string,bytes)": {
        "details": "This function ensures the call is approved by Axelar Gateway before execution. It uses a hash of the payload for validation and internally calls _execute for the actual command execution. Reverts if the validation fails.",
        "params": {
          "commandId": "The unique identifier of the cross-chain message being executed.",
          "payload": "The payload of the message payload.",
          "sourceAddress": "The address on the source chain that sent the message.",
          "sourceChain": "The name of the source chain from which the message originated."
        }
      },
      "gateway()": {
        "returns": {
          "_0": "The Axelar Gateway instance."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(bytes32,string,string,bytes)": {
        "notice": "Executes the cross-chain command after validating it with the Axelar Gateway."
      },
      "gateway()": {
        "notice": "Returns the address of the AxelarGateway contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10573,
        "contract": "contracts/MessageHub/MessageHub.sol:MessageHub",
        "label": "kToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10576,
        "contract": "contracts/MessageHub/MessageHub.sol:MessageHub",
        "label": "gasReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAxelarGasService)604"
      },
      {
        "astId": 10578,
        "contract": "contracts/MessageHub/MessageHub.sol:MessageHub",
        "label": "clientContract",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10580,
        "contract": "contracts/MessageHub/MessageHub.sol:MessageHub",
        "label": "clientChain",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1084,
        "contract": "contracts/MessageHub/MessageHub.sol:MessageHub",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAxelarGasService)604": {
        "encoding": "inplace",
        "label": "contract IAxelarGasService",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}